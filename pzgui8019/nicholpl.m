function  nicholpl( BodeFreqs, BodeMag, BodePhs, ...
                    PlotName, FrqSelNdx, PlotTitle, Position, BtnDwnFn, Domain)
% Creates and services the Nichols plot, for both C-T and D-T

% The following copyrighted m-files comprise the PZGUI tool:
%    ** The contents of these files may not be included **
%    **  in any other program without explicit written  **
%    **    consent from the author, Mark A. Hopkins     **
%     bodepl.m        pzg_bodex.m     pzg_islink.m     pzg_seltxt.m
%     contents.m      pzg_box.m       pzg_islogx.m     pzg_tools.m
%     contourpl.m     pzg_c2d.m       pzg_isunwrp.m    pzg_tpwr.m
%     dpzgui.m        pzg_cntr.m      pzg_lims.m       pzg_txan.m
%     dupdatep.m      pzg_cphndl.m    pzg_menu.m       pzg_unre.m
%     figopts.m       pzg_d2c.m       pzg_moda.m       pzg_unwrap.m
%     fr_disp.m       pzg_disab.m     pzg_onoff.m      pzg_updtfilt.m
%     freqserv.m      pzg_efmt.m      pzg_pfesim.m     pzg_xtrfrq.m
%     gainfilt.m      pzg_err.m       pzg_prvw.m       pzgcalbk.m
%     helpserv.m      pzg_errvis.m    pzg_ptr.m        pzgui.m
%     ldlgfilt.m      pzg_fndo.m      pzg_recovr.m     pzmvserv.m
%     nicholpl.m      pzg_gle.m       pzg_reptxt.m     resppl.m
%     nyqistpl.m      pzg_grid.m      pzg_res.m        rlocuspl.m
%     pidfilt.m       pzg_inzpk.m     pzg_rsppfe.m     sensplot.m
%     pz_move.m       pzg_isdby.m     pzg_rss.m        updatepl.m
%     pzg_bkup.m      pzg_ishzx.m     pzg_scifmt.m     updtpzln.m
%                                     pzg_sclpt.m      zmimntcpt.m
% (c) 1996 - 2014
%    by Professor Mark A. Hopkins, Ph.D.
%       Electrical and Microelectronic Engineering
%       Rochester Institute of Technology
%       Rochester NY, USA 14623        Email:  mark.hopkins@rit.edu
%
% SHAREWARE INFORMATION:
%               FREE, IF USED ONLY FOR EDUCATIONAL PURPOSES.
%   Otherwise:
%    (corporations, companies, and other for-profit users) 
%    Individual licenses -- US$200 per computer
%    Site license -- US$2000 per industrial site, any number of users
%    Make check payable to "Mark A. Hopkins", and remit to address above
% ----------------------------------------------------------------------
global PZG
if isempty(PZG) && ~pzg_recovr
  return
end
evalin('base','global PZG')

% Check that the input arguments are valid:
if ( nargin == 1 ) && ischar(BodeFreqs)
  local_service_callback(BodeFreqs);
  return
end

if ( nargin < 4 ) || ( nargin > 9 )
  disp('Correct format is:  ');
  disp(' nicholpl( BodeFreqs, BodeMag, BodePhs, PlotName ...');
  disp('        <,FrqSelNdx> <,PlotTitle> <,Position> <,BtnDwnFn> )');
  return
end

if nargin < 9
  Domain = 's';
end
if ~ischar(Domain) || ( numel(Domain) ~= 1 ) ...
  || ( ~strcmpi( Domain,'s') && ~strcmpi( Domain,'z') )
  disp('9-th input argument, DOMAIN must be either ''z'' or ''s''.');
  return
else
  Domain = lower(Domain);
end
if strcmpi( Domain,'s')
  dom_ndx = 1;
else
  dom_ndx = 2;
end

if nargin < 8
  BtnDwnFn = ['try,tempfs=freqserv(gcbf,1);pzg_ptr;' ...
              'catch,pzg_err(''button down'');' ...
              'end,clear tempfs'];
end
if ( ~ischar(BtnDwnFn) ) || ( min(size(BtnDwnFn) > 1 ) )
  disp('8-th input argument, BTNDWNFN must be a simple string.');
  return
end

if nargin < 7
  Position = [];
end
if sum( ( ( size(Position) ~= [1 4] ) | ischar(Position) ) ...
       &( size(Position) ~= [0 0] )) > 0
  disp('7-th input arg, POSITION must be a 1-by-4 numerical array.');
  return
end

if nargin < 6
  PlotTitle = '';
end
if ( ~ischar(PlotTitle) ) || ( min(size(PlotTitle) > 1 ) )
  disp('Sixth input argument, PLOTTITLE must be a simple string.');
  return
end
  
if nargin < 5
  FrqSelNdx = [];
end
if numel(FrqSelNdx) > 1
  disp('Fifth input argument, FRQSELNDX must be a scalar.')
  return
end

if ( ~ischar(PlotName) ) 
  disp('Fourth input argument, PLOTNAME must be a simple string.');
  return
end
if ( min(size(PlotName))~=1 )
  disp('Fourth input argument, PLOTNAME cannot be an empty string.');
  return
end

if ischar(BodeFreqs) || ischar(BodeMag) || ischar(BodePhs)
  disp('Bode plot data cannot be string data.');
  return
end
if ( numel(BodeFreqs) ~= numel(BodeMag) ) ...
   || ( numel(BodeFreqs) ~= numel(BodePhs) )
  disp('nicholpl:  Arguments BODEFREQS, BODEMAG, and BODEPHS ');
  disp('           must all be the same length.');
  return
end
if ( min(size(BodeFreqs)) > 1 ) ...
   || ( min(size(BodeMag)) > 1 ) ...
   || ( min(size(BodePhs)) > 1 )
  disp('nicholpl:  Arguments BODEFREQS, BODEMAG, and BODEPHS ');
  disp('           must column or row vectors.');
  return
end

BodeFreqs = BodeFreqs(:);
BodeMag = BodeMag(:);
BodePhs = BodePhs(:);

% Refresh the contour data, if necessary.
if ~isequal( PZG(dom_ndx).recompute_frf, 0 ) ...
  || ~isfield( PZG(dom_ndx),'cntr_data') ...
  || isempty( PZG(dom_ndx).cntr_data ) ...
  ||~isstruct( PZG(dom_ndx).cntr_data ) ...
  ||~isfield( PZG(dom_ndx).cntr_data,'contour_freq')
  PZG(dom_ndx).recompute_frf = 0;
  pzg_cntr(dom_ndx);
  pzg_bodex(dom_ndx);
end

bg_color = PZG(dom_ndx).DefaultBackgroundColor;
if strcmpi(bg_color,'k')
  contrast_color = 'w';
else
  contrast_color = 'k';
end

neg_freq_select = PZG(dom_ndx).NegSelect;

tempNdx = [];
tempVis = 'off';
if numel(FrqSelNdx) == 1
  if ( FrqSelNdx > 0 ) && ( FrqSelNdx <= numel(BodeFreqs) )
    tempNdx = FrqSelNdx;
    if ~PZG(dom_ndx).NegSelect
      tempVis = 'on';
    end
    if dom_ndx == 2
      select_freq = mod( BodeFreqs(FrqSelNdx), 2*pi/PZG(2).Ts );
      if select_freq > pi/PZG(2).Ts
        select_freq = 2*pi/PZG(2).Ts - select_freq;
        neg_freq_select = 1;
        FrqSelNdx = pzg_gle( BodeFreqs, select_freq,'near');
        tempNdx = FrqSelNdx;
        tempVis = 'off';
      end
    end
  end
end
if ~PZG(dom_ndx).pzg_show_frf_computation
  tempVis = 'off';
end

XLimit = [ -180 0 ];
if min(BodePhs) < -180
  XLimit(1) = -270;
end
if min(BodePhs) < -270
  XLimit(1) = -360;
end
if min(BodePhs) < -360
  XLimit(1) = min(BodePhs);
end

if max(BodePhs) > 0
  XLimit(2) = 90;
end
if max(BodePhs) > 90
  XLimit(2) = 180;
end
if max(BodePhs) > 180
  XLimit(2) = max(BodePhs);
end

if strcmpi('z',Domain)
  sample_freq_ndx = pzg_gle( BodeFreqs, pi/PZG(2).Ts,'<');
  BodeFreqs = BodeFreqs(1:sample_freq_ndx);
  BodeMag = BodeMag(1:sample_freq_ndx);
  BodePhs = BodePhs(1:sample_freq_ndx);
  % Also, guarantee conjugate symmetry of the phase data.
  nyq_freq_ndx = pzg_gle( BodeFreqs, pi/PZG(2).Ts,'<');
  if nyq_freq_ndx <= sample_freq_ndx/2
    temp = BodePhs(1:nyq_freq_ndx);
    temp = -flipud(temp);
    BodePhs(end-nyq_freq_ndx+1:end) = temp;
  end
end

YLimit = [ min(-30,min(BodeMag) )  max(20,max(BodeMag)) ];

FigHndl = pzg_fndo( dom_ndx, 6,'fig_h');
if isempty(FigHndl)
  FigHndl = findobj(allchild(0),'Name', PlotName );
  if ~isempty(FigHndl)
    delete(FigHndl)
    FigHndl = [];
  end
end

temp0 = [];
if ~isempty(FigHndl)
  temp0 = get(FigHndl,'UserData');
  if isappdata( FigHndl,'hndl')
    hndl = getappdata( FigHndl,'hndl');
  else
    hndl = [];
  end
end

if isempty(temp0)
  % Nichols plot doesn't exist yet, so create it.
  X1 = ( -4.5*360: 10: 2.5*360 );
  X2 = zeros(size(X1));
  % Get the max and min open-loop bode magnitude.
  if strcmpi('s', Domain )
    max_db = max( 60, max(PZG(1).BodeMag) );
    min_db = min( -60, min(PZG(1).BodeMag) );
  else
    max_db = max( 60, max(PZG(2).BodeMag) );
    min_db = min( -60, min(PZG(2).BodeMag) );
  end
  Y2 = 1.1*[ min_db max_db ];
  %Y1 = -180*ones(size(Y2));
  del_str = ...
    ['global PZG,' ...
     'try,' ...
       'temp_nichcb=pzg_fndo(' ...
          num2str(dom_ndx) ',' num2str(11+dom_ndx) ',''Nichols_checkbox'');' ...
       'if~isempty(temp_nichcb),' ...
         'set(temp_nichcb,''value'',0);' ...
       'end,' ...
       'PZG(' num2str(dom_ndx) ').plot_h{6}=[];' ...
     'end,' ...
     'pzg_bkup,' ...
     'clear temp_nichcb;'];
  
  gcf0 = ...
    figure('menubar','figure', ...
       'numbertitle','off', ...
       'integerhandle','off', ...
       'dockcontrols','off', ...
       'visible','off', ...
       'windowbuttonmotionfcn', ...
         ['try,' ...
          'if pzg_disab,return,end,' ...
          'tempfs=freqserv(gcbf);pzg_ptr;' ...
          'catch,pzg_err(''mouse motion nich'');' ...
          'end,clear tempfs;'], ...
       'WindowButtonDownFcn', BtnDwnFn, ...
       'tag','PZGUI plot', ...
       'handlevisibility','callback');
          
  if ~isequal( size(Position),[1 4] )
    set( gcf0, ...
      'units','normalized', ...
      'Name',PlotName, ...
      'Color', bg_color, ...
      'Interruptible','On', ...
      'deletefcn', del_str );
    else
        if max(Position) > 1
          ScrSize = get(0,'screensize');
          Position([1;3]) = Position([1;3])/ScrSize(3);
          Position([2;4]) = Position([2;4])/ScrSize(4);
        end
    set( gcf0, ...
      'units','normalized', ...
      'Position', Position, ...
      'Name', PlotName, ...
      'Color', bg_color, ...
      'Interruptible','On', ...
      'deletefcn', del_str );
  end
  
  % Put an "Options" menu item in the figure's menubar.
  opt_menu_h = ...
    uimenu('parent', gcf0, ...
           'label', 'PZGUI OPTIONS', ...
           'tag','pzgui_options_menu');
  pzg_menu( opt_menu_h, Domain );
  hndl = getappdata( gcf0,'hndl');
  
  hndl.plot_name = get( gcf0,'name');
  hndl.dom_ndx = dom_ndx;
  hndl.ploth_ndx = 6;
  
  gca0 = ...
    axes('parent', gcf0, ...
      'nextplot','add', ...
      'xgrid','on', ...
      'ygrid','on', ...
      'color', bg_color, ...
      'tag','pzg nichols plot axes');
  hndl.ax = gca0;
  hndl.ax_title = get(gca0,'title');
  hndl.ax_xlabel = get(gca0,'xlabel');
  hndl.ax_ylabel = get(gca0,'ylabel');
  
  temp0 = zeros([10 2]);
  
  % Create the main FRF plot.
  temp0(2,1) = ...
    plot( BodePhs, BodeMag, ...
      'color','r', ...
      'linestyle','-', ...
      'LineWidth', 3, ...
      'marker','none', ...
      'markersize', 4, ...
      'userdata', BodeFreqs, ...
      'hittest','off', ...
      'handlevisibility','off', ...
      'parent', gca0, ...
      'tag','nicholpl mag phase line');
  if numel(BodePhs) < 2
    set(temp0(2,1),'Visible','off');
  end
  hndl.nicholpl_mag_phase_line = temp0(2,1);
    
  % Create the auxiliary plots.
  hndl = local_plot_nyq_mapping( gca0, dom_ndx, hndl );
  
  temp0(1,1) = gca0;
  set( gca0, ...
      'Color', bg_color, ...
      'XColor', contrast_color, ...
      'YColor', contrast_color );
  ScrSize = get(0,'ScreenSize');
  if ScrSize(3) > 1024
    set(gca0, ...
      'Interruptible','On', ...
      'FontSize',10, ...
      'XLim',XLimit,'YLim',YLimit, ...
      'Position',[0.13 0.18 0.775 0.745] );
  else
    set(gca0, ...
      'Interruptible','On', ...
      'FontSize',8, ...
      'XLim',XLimit,'YLim',YLimit, ...
      'Position',[0.13 0.18 0.775 0.745] );
  end
  
  tempH5 = findobj( gcf0,'tag','CL mag phase grid checkbox');
  if isempty(tempH5)
    hndl.CL_mag_phase_grid_checkbox = ...
      uicontrol(gcf0, ...
         'style','checkbox', ...
         'units','normalized', ...
         'position',[0.001 0.01 0.16 0.045], ...
         'string','Nich grid', ...
         'value', 1, ...
         'tooltipstring','show the standard "Nichols Grid"', ...
         'tag','CL mag phase grid checkbox', ...
         'callback', ...
           ['global PZG,' ...
            'temp_hndl=getappdata(gcbf,''hndl'');' ...
            'temp_h=[temp_hndl.pzgui_nichols_grid;' ...
                    'temp_hndl.pzgui_nichols_text];' ...
            'temp_h2=temp_hndl.Nichols_hilite_cursor_checkbox;' ...
            'if~isempty(temp_h),' ...
              'if get(gcbo,''value''),' ...
                'set(temp_h,''visible'',''on'');' ...
                'set(temp_h2,''visible'',''on'');' ...
              'else,' ...
                'set(temp_h,''visible'',''off'');' ...
                'set(temp_h2,''visible'',''off'');' ...
                'if isfield(temp_hndl,''CL_0dB_contour''),' ...
                  'temp_h=temp_hndl.CL_0dB_contour;' ...
                  'if~isempty(temp_h),' ...
                    'set(temp_h,''visible'',''off''),' ...
                  'end,' ...
                'end,' ...
                'if isfield(temp_hndl,''LeadLag_Text''),' ...
                  'temp_h=temp_hndl.LeadLag_Text;' ...
                  'if~isempty(temp_h),' ...
                    'set(temp_h,''visible'',''off''),' ...
                  'end,' ...
                'end,' ...
              'end,' ...
            'end,' ...
            'clear temp_h temp_h2']);
  end
  
  tempHC = ...
    findobj( gcf0,'tag','Nichols hilite cursor checkbox');
  if isempty(tempHC)
    hndl.Nichols_hilite_cursor_checkbox = ...
      uicontrol(gcf0, ...
       'style','checkbox', ...
       'units','normalized', ...
       'position',[0.162 0.01 0.22 0.045], ...
       'string','Nich grid hilite', ...
       'value', 0, ...
       'tooltipstring','highlight "Nichols Grid" cursor location', ...
       'tag','Nichols hilite cursor checkbox');
  end
  
  tempH5 = findobj( gcf0,'tag','equimargin checkbox');
  if isempty(tempH5)
    hndl.equimargin_checkbox = ...
      uicontrol(gcf0, ...
       'style','checkbox', ...
       'units','normalized', ...
       'position',[0.795 0.01 0.20 0.045], ...
       'string','equi-margins', ...
       'value', 0, ...
       'tooltipstring','show the gainphase equi-margin grid', ...
       'tag','equimargin checkbox', ...
       'callback', ...
         ['global PZG,' ...
          'try,' ...
           'if get(gcbo,''value''),' ...
             'set(PZG(' num2str(dom_ndx) ').plot_h{6}.hndl.equimargin_grid,' ...
                  '''visible'',''on'');' ...
             'set(PZG(' num2str(dom_ndx) ').plot_h{6}.hndl.equimargin_text,' ...
                  '''visible'',''on'');' ...
           'else,' ...
             'set(PZG(' num2str(dom_ndx) ').plot_h{6}.hndl.equimargin_grid,' ...
                  '''visible'',''off'');' ...
             'set(PZG(' num2str(dom_ndx) ').plot_h{6}.hndl.equimargin_text,' ...
                  '''visible'',''off'');' ...
           'end,' ...
          'catch,' ...
           'pzg_err(''nichols equi-margin checkbox'');' ...
          'end']);
  end
  
  tempNF = findobj( gcf0,'tag','show nyq mapping checkbox');
  if isempty(tempNF)
    hndl.show_nyq_mapping_checkbox = ...
      uicontrol( gcf0, ...
       'style','checkbox', ...
       'units','normalized', ...
       'position',[0.001 0.06 0.20 0.045], ...
       'string','Nyq Mapping', ...
       'value', 0, ...
       'tag','show nyq mapping checkbox', ...
       'tooltipstring','show the complete Nyquist-contour mapping', ...
       'callback','nicholpl(''show nyq mapping checkbox'');');
  end
  
  hndl = local_nichols_grid( BodeMag, BodePhs, gca0, hndl );

  % tempH3 = findobj( gcf0,'tag',[ Domain '-Domain Lead-Lag Design PB']);
  % if isempty(tempH3)
  %   hndl.Controller_Design_PB = ...
  %     uicontrol(gcf0,'style','pushbutton', ...
  %       'units','normalized', ...
  %       'position',[0.64 0.01 0.14 0.045], ...
  %       'string','Design', ...
  %       'tag', ...
  %         [ Domain '-Domain Lead-Lag Design PB'], ...
  %       'tooltipstring', ...
  %         'open thone of the controller design tools', ...
  %       'callback', ...
  %         ['tempDSGN=gcbo;' ...
  %          'set(tempDSGN,''enable'',''off'');' ...
  %          'try,' ...
  %            'temp_q_dlg_ans=questdlg(' ...
  %              '{''Which design tool do you want to open,'';' ...
  %                '''the Gain tool, the Lead-Lag tool, or the PID tool ?''},' ...
  %                '''Which Design Tool?'',' ...
  %                '''PID Tool'',''Lead-Lag Tool'',''Pure Gain Tool'',' ...
  %                '''Lead-Lag Tool'');' ...
  %            'if strcmpi(''PID Tool'',temp_q_dlg_ans),' ...
  %              'pidfilt(get(gcbo,''tag''));' ...
  %            'elseif strcmpi(''Lead-Lag Tool'',temp_q_dlg_ans),' ...
  %              'ldlgfilt(get(gcbo,''tag''));' ...
  %            'elseif strcmpi(''Pure Gain Tool'',temp_q_dlg_ans),' ...
  %              'gainfilt(get(gcbo,''tag''));' ...
  %            'end,' ...
  %          'catch,pzg_err(''lead-lag Design pushbutton'');end,' ...
  %          'drawnow,' ...
  %          'set(tempDSGN,''enable'',''on'');' ...
  %          'clear tempDSGN temp_q_dlg_ans'] );
  % end
    
  % ---------------------------------------------

  if ~isempty(tempNdx) ...
    && ( tempNdx > numel(BodeFreqs) ) && strcmp('z', Domain )
    % Go back to the 2*Fs data set.
    selected_freq = PZG(2).BodeFreqs(tempNdx)/2/pi;
    while selected_freq > 2*pi/PZG(2).Ts
      selected_freq = selected_freq - 2*pi/PZG(2).Ts;
    end
    if selected_freq > pi/PZG(2).Ts
      alt_freq = 2*pi/PZG(2).Ts - selected_freq;
      tempNdx = pzg_gle( BodeFreqs, alt_freq,'near');
    else
      tempNdx = pzg_gle( BodeFreqs, selected_freq,'near');
    end
  end
  FrqSelNdx = tempNdx;
  x_seldata = BodePhs(tempNdx);
  y_seldata = BodeMag(tempNdx);
  if isempty(FrqSelNdx) && ~isempty( PZG(dom_ndx).NyqSelNdx )
    x_seldata = PZG(dom_ndx).cntr_data.Nichols_phs(PZG(dom_ndx).NyqSelNdx);
    y_seldata = PZG(dom_ndx).cntr_data.Nichols_mag(PZG(dom_ndx).NyqSelNdx);
  end
  if PZG(dom_ndx).NegSelect || neg_freq_select
    x_seldata = -x_seldata;
  end
  if isempty(x_seldata)
    temp0(3,1) = ...
      plot( 0, 0, ...
        'color',[0 0.7 0.7], ...
        'marker','o', ...
        'MarkerSize', 8, ...
        'LineWidth', 2.0, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'Visible','off', ...
        'parent', gca0, ...
        'tag','implicit freq marker');
    hndl.implicit_freq_marker = temp0(3,1);
  else
    temp0(3,1) = ...
      plot( x_seldata, y_seldata, ...
        'color',[0 0.7 0.7], ...
        'marker','o', ...
        'MarkerSize', 8, ...
        'LineWidth', 2.0, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'parent', gca0, ...
        'visible', tempVis, ...
        'tag','implicit freq marker');
    hndl.implicit_freq_marker = temp0(3,1);
    tempH = pzg_fndo( dom_ndx, 6,'CL_-dB_contour');
    tempH2 = pzg_fndo( dom_ndx, 6,'LeadLag_Text');
    clgrid_chkbox_h = pzg_fndo( dom_ndx, 6,'CL_mag_phase_grid_checkbox');
    curr_tools = pzg_tools(dom_ndx);
    design_fig_h = [];
    if curr_tools(2)
      design_fig_h = PZG(dom_ndx).LDLG_fig;
    end
    if isempty(design_fig_h) || ~get(clgrid_chkbox_h,'value')
      lead_lag_vis = 'off';
      set([tempH;tempH2],'visible','off')
    else
      lead_lag_vis = 'on';
      set([tempH;tempH2],'visible','on')
    end
    if ~isempty(tempH) && ~isempty(tempH2)
      if strcmpi( tempVis,'off') || ~get(clgrid_chkbox_h,'value')
        set( tempH,'visible','off')
        set( tempH2,'visible','off')
      else
        Contour = get(tempH,'userdata');
        Mag1 = BodeMag( FrqSelNdx );
        Phs1 = BodePhs( FrqSelNdx );
        Ndx = sum( Contour(:,2) <= Mag1 );
        if ( Ndx > 1 ) && ( Ndx < size(Contour,1) )
          Phs2 = Contour(Ndx,1);
          Mag2 = Contour(Ndx,2);
          set( tempH, ...
              'Visible', lead_lag_vis, ...
              'xdata',[Phs1 Phs2], ...
              'ydata',[Mag1 Mag2] )
          set( tempH2, ...
              'Visible', lead_lag_vis, ...
              'string', ['   ' num2str(Phs2-Phs1) ' degrees'], ...
              'color',[1 1 0], ...
              'position',[max(Phs1,Phs2) Mag2])
        else
          set( tempH,'visible','off')
          set( tempH2,'visible','off')
        end
      end
    end
  end
  
  hndl.pzg_Nichols_xaxis_hilite = ...
    plot(X1,X2,'c','parent', gca0, ...
      'tag','pzg Nichols xaxis hilite', ...
      'hittest','off', ...
      'handlevisibility','off');
  hndl.pzg_Nichols_yaxis_hilite = ...
    plot( zeros(size(Y2)),Y2,'c', ...
      'parent', gca0, ...
      'tag','pzg Nichols yaxis hilite', ...
      'hittest','off', ...
      'handlevisibility','off');
  set( hndl.ax_title,'string', PlotTitle,'Color',[1 1 1] );
  temp0(6,1) = hndl.ax_xlabel;
  set( hndl.ax_ylabel,'string','Magnitude, dB');
  hndl.ax_xlim = get(hndl.ax,'xlim');
  hndl.ax_ylim = get(hndl.ax,'ylim');

  set(gcf0,'UserData',temp0);
  setappdata(gcf0,'hndl', hndl );
  PZG(dom_ndx).plot_h{6}.fig_h = gcf0;
  PZG(dom_ndx).plot_h{6}.ax_h = gca0;  
  PZG(dom_ndx).plot_h{6}.xlim = hndl.ax_xlim;
  PZG(dom_ndx).plot_h{6}.ylim = hndl.ax_ylim;
  pzg_cphndl( gcf0, dom_ndx, 6 );
  
  % Adjust the background color.
  figopts('apply_default_color', gcf0 )
  
  pzg_prvw( dom_ndx );
  
  freqserv('refresh_plot_h', gcf0 );
  pzg_seltxt(dom_ndx)
  
  set( gcf0,'visible','on')
  
else
  % Nichols plot already exists.
  pzg_seltxt(dom_ndx)

  gca0 = get( temp0(2,1),'parent');
  
  hndl2 = local_nichols_grid( BodeMag, BodePhs, gca0, hndl );
  if ~isequal( hndl, hndl2 )
    setappdata( FigHndl,'hndl', hndl2 )
    pzg_cphndl( FigHndl, dom_ndx, 7 );
  end
  
  if numel(BodePhs) > 1
    set( temp0(2,1), ...
        'Xdata',BodePhs, ...
        'Ydata',BodeMag, ...
        'Visible','on' );
    
    % Create the Nyquist data plots.
    hndl2 = local_plot_nyq_mapping( gca0, dom_ndx, hndl );
    if ~isequal( hndl, hndl2 )
      setappdata( FigHndl,'hndl', hndl2 )
      pzg_cphndl( FigHndl, dom_ndx, 7 );
    end
  else
    set( temp0(2,1), ...
      'Xdata',BodePhs, ...
      'Ydata',BodeMag, ...
      'Visible','off' );
  end
  
  if ~isempty(tempNdx) && ( tempNdx > 0 ) && ( tempNdx <=  numel(BodeMag) )
    set( temp0(3,1), ...
      'Xdata', BodePhs(tempNdx), ...
      'Ydata', BodeMag(tempNdx), ...
      'Visible', tempVis );
  end
  tempH = pzg_fndo( dom_ndx, 6,'CL_0dB_contour');
  tempH2 = pzg_fndo( dom_ndx, 6,'LeadLag_Text');
  if isfield( PZG(dom_ndx),'LDLG_fig')
    design_fig_h = PZG(dom_ndx).LDLG_fig;
  elseif dom_ndx == 1
    design_fig_h = findobj( allchild(0),'name','s-Domain Lead Lag Design GUI');
    PZG(1).LDLG_fig = design_fig_h;
  elseif dom_ndx == 2
    design_fig_h = findobj( allchild(0),'name','z-Domain Lead Lag Design GUI');
    PZG(2).LDLG_fig = design_fig_h;
  end
  if isempty(design_fig_h)
    design_obj_vis = 'off';
    set([tempH;tempH2],'visible','off');
  else
    design_obj_vis = 'on';
    set([tempH;tempH2],'visible','on');
  end
  if isfield( hndl,'CL_mag_phase_grid_checkbox') ...
    && ~isempty( hndl.CL_mag_phase_grid_checkbox )
    clgrid_chkbox_h = hndl.CL_mag_phase_grid_checkbox;
  else
    clgrid_chkbox_h = ...
      findobj(FigHndl,'tag','CL mag phase grid checkbox');
    hndl.CL_mag_phase_grid_checkbox = clgrid_chkbox_h;
  end
  if ~isempty(tempH) && ~isempty(tempH2)
    if strcmpi( tempVis,'off') || ~get(clgrid_chkbox_h,'value')
      set( tempH,'visible','off')
      set( tempH2,'visible','off')
    else
      Contour = get(tempH,'userdata');
      Mag1 = BodeMag( FrqSelNdx );
      Phs1 = BodePhs( FrqSelNdx );
      if ~isempty(Contour)
        Ndx = sum( Contour(:,2) <= Mag1 );
        if ( Ndx > 1 ) && ( Ndx < size(Contour,1) )
          Phs2 = Contour(Ndx,1);
          Mag2 = Contour(Ndx,2);
          set(tempH, ...
            'Visible',design_obj_vis, ...
            'xdata',[Phs1 Phs2], ...
            'ydata',[Mag1 Mag2])
          set(tempH2, ...
            'Visible',design_obj_vis, ...
            'string', ['   ' num2str(Phs2-Phs1) ' degrees'], ...
            'color',[1 1 0], ...
            'position',[max(Phs1,Phs2) Mag2])
        else
          set( tempH,'visible','off')
          set( tempH2,'visible','off')
        end
      else
        set( tempH,'visible','off')
        set( tempH2,'visible','off')
      end
    end
  end
end

curr_tools = pzg_tools(dom_ndx);
if any(curr_tools)
  if curr_tools(1)
    gainfilt(Domain)
  elseif curr_tools(2)
    ldlgfilt(Domain)
  elseif curr_tools(3)
    pidfilt(Domain)
  end
end

return


function hndl = local_plot_nyq_mapping( gca0, dom_ndx, hndl )

  global PZG
  
  fig_h = get( gca0,'parent');
  if ( nargin < 3 ) ...
    || ( isempty(hndl) && isappdata( get( gca0,'parent'),'hndl') )
    hndl = getappdata( fig_h,'hndl');
  end
  
  bg_color = PZG(dom_ndx).DefaultBackgroundColor;
  if strcmpi(bg_color,'k')
    contrast_color = 'w';
  else
    contrast_color = 'k';
  end

  nyq_vis = 'off';
  if isfield( hndl,'show_nyq_mapping_checkbox')
    shownyq_chkbox_h = hndl.show_nyq_mapping_checkbox;
  else
    shownyq_chkbox_h = ...
      findobj( get(gca0,'parent'),'tag','show nyq mapping checkbox');
    hndl.show_nyq_mapping_checkbox = shownyq_chkbox_h;
  end
  if ~isempty(shownyq_chkbox_h) ...
    && get( shownyq_chkbox_h,'value')
    nyq_vis = 'on';
  end
  
  if isfield(hndl,'nyquist_magphase_line') ...
    && ~isempty(hndl.nyquist_magphase_line) ...
    && all(ishandle(hndl.nyquist_magphase_line(:)))
    nyq_map_h = hndl.nyquist_magphase_line;
  else
    nyq_map_h = findobj( allchild(gca0),'tag','nyquist magphase line');
    hndl.nyquist_magphase_line = nyq_map_h;
  end
  if isempty(nyq_map_h)
    hndl.nyquist_magphase_line = ...
      plot( PZG(dom_ndx).cntr_data.Nichols_phs, ...
        PZG(dom_ndx).cntr_data.Nichols_mag, ...
        'color','r', ...
        'linestyle','--', ...
        'LineWidth', 1, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'parent', gca0, ...
        'visible', nyq_vis, ...
        'userdata', PZG(dom_ndx).cntr_data.contour_freq, ...
        'tag','nyquist magphase line');
  else
    set( nyq_map_h, ...
      'xdata', PZG(dom_ndx).cntr_data.Nichols_phs, ...
      'ydata', PZG(dom_ndx).cntr_data.Nichols_mag, ...
      'color','r', ...
      'userdata', PZG(dom_ndx).cntr_data.contour_freq, ...
      'visible', nyq_vis );
  end

  if isfield(hndl,'conjugate_nyquist_magphase_line') ...
    && ~isempty(hndl.conjugate_nyquist_magphase_line) ...
    && all(ishandle(hndl.conjugate_nyquist_magphase_line(:)))
    conj_nyq_map_h = hndl.conjugate_nyquist_magphase_line;
  else
    conj_nyq_map_h = ...
      findobj( allchild(gca0),'tag','conj_nyq_map_h nyquist magphase line');
    hndl.conjugate_nyquist_magphase_line = conj_nyq_map_h;
  end
  if isempty(conj_nyq_map_h)
    hndl.conjugate_nyquist_magphase_line = ...
      plot( -PZG(dom_ndx).cntr_data.Nichols_phs, ...
        PZG(dom_ndx).cntr_data.Nichols_mag, ...
        'color', contrast_color, ...
        'linestyle','--', ...
        'LineWidth', 1, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'parent', gca0, ...
        'visible', nyq_vis, ...
        'userdata', PZG(dom_ndx).cntr_data.contour_freq, ...
        'tag','conjugate nyquist magphase line');
  else
    set( conj_nyq_map_h, ...
      'xdata', -PZG(dom_ndx).cntr_data.Nichols_phs, ...
      'ydata', PZG(dom_ndx).cntr_data.Nichols_mag, ...
      'color', contrast_color, ...
      'userdata', PZG(dom_ndx).cntr_data.contour_freq, ...
      'visible', nyq_vis );
  end
  
  xdata = -PZG(dom_ndx).BodePhs;
  ydata = PZG(dom_ndx).BodeMag;
  freqs = PZG(dom_ndx).BodeFreqs;
  if dom_ndx == 2
    nyq_ndx = pzg_gle( freqs, pi/PZG(2).Ts,'<');
    xdata = xdata(1:nyq_ndx);
    ydata = ydata(1:nyq_ndx);
    freqs = freqs(1:nyq_ndx);
  end
  if isfield(hndl,'conjugate_nicholpl_mag_phase_line') ...
    && ~isempty(hndl.conjugate_nicholpl_mag_phase_line) ...
    && all(ishandle(hndl.conjugate_nicholpl_mag_phase_line(:)))
    conj_nicholpl_magphs_line_h = hndl.conjugate_nicholpl_mag_phase_line;
  else
    conj_nicholpl_magphs_line_h = ...
      findobj( allchild(gca0),'tag','conjugate nichol mag phase line');
    hndl.conjugate_nicholpl_mag_phase_line = conj_nicholpl_magphs_line_h;
  end
  if isempty(conj_nicholpl_magphs_line_h)
    hndl.conjugate_nicholpl_mag_phase_line = ...
      plot( xdata, ydata, ...
        'color', contrast_color, ...
        'LineWidth', 2, ...
        'linestyle','-', ...
        'marker','none', ...
        'markersize', 4, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'parent', gca0, ...
        'visible', nyq_vis, ...
        'userdata', freqs, ...
        'tag','conjugate bode magphase line');
  else
    set( conj_nicholpl_magphs_line_h, ...
      'xdata', xdata,'ydata', ydata, ...
      'color', contrast_color, ...
      'userdata', freqs, ...
      'visible', nyq_vis );
  end
  
  if ~isfield(hndl,'nicholpl_mag_phase_line') ...
    || isempty(hndl.nicholpl_mag_phase_line) ...
    || ~all(ishandle(hndl.nicholpl_mag_phase_line(:)))
    bode_line_h = ...
      findobj( allchild(gca0),'tag','nicholpl mag phase line');
    hndl.conjugate_nicholpl_mag_phase_line = bode_line_h;
  end
return

function local_service_callback(BodeFreqs)
  
  global PZG
  
  gcbf_name = get( gcbf,'name');
  if isempty(gcbf_name)
    return
  end
  if ~isempty( strfind( gcbf_name,'ontinuous') ) ...
    || ~isempty( strfind( gcbf_name,'s-Domain') )
    dom_ndx = 1;
  elseif ~isempty( strfind( gcbf_name,'iscrete') ) ...
    || ~isempty( strfind( gcbf_name,'z-Domain') )
    dom_ndx = 2;
  else
    return
  end
  if isempty( PZG(dom_ndx).plot_h{6} ) ...
    || ~isfield( PZG(dom_ndx).plot_h{6},'fig_h') ...
    || ~isequal( 1, ishandle(PZG(dom_ndx).plot_h{6}.fig_h) )
    return
  end
  
  fig_h = PZG(dom_ndx).plot_h{6}.fig_h;
  if isappdata( fig_h,'hndl')
    hndl = getappdata( fig_h,'hndl');
  else
    hndl = [];
  end
  hndl0 = hndl;
  
  if isfield( hndl,'ax')
    ax_h = hndl.ax;
  else
    ax_h = findobj( gcbf,'tag','pzg nichols plot axes');
  end
  
  switch lower(BodeFreqs)
    case 'show nyq mapping checkbox'
      show_nyq_data = 0;
      if isfield( hndl,'show_nyq_mapping_checkbox')
        shownyq_chkbox_h = hndl.show_nyq_mapping_checkbox;   
      else
        shownyq_chkbox_h = ...
          findobj( fig_h,'tag','show nyq mapping checkbox');
        hndl.show_nyq_mapping_checkbox = shownyq_chkbox_h;
      end
      if ~isempty(shownyq_chkbox_h)
        show_nyq_data = get( shownyq_chkbox_h,'value');
      end
      
      if isfield( hndl,'nyquist_magphase_line')
        nyquist_line_h = hndl.nyquist_magphase_line;
      else
        nyquist_line_h = findobj( allchild(ax_h),'tag','nyquist magphase line');
        hndl.nyquist_magphase_line = nyquist_line_h;
      end
      if isfield( hndl,'conjugate_nyquist_magphase_line')
        conjugate_nyquist_h = hndl.conjugate_nyquist_magphase_line;
      else
        conjugate_nyquist_h = ...
          findobj( allchild(ax_h),'tag','conjugate nyquist magphase line');
        hndl.conjugate_nyquist_magphase_line = conjugate_nyquist_h;
      end
      if isfield( hndl,'conjugate_nicholpl_mag_phase_line')
        conj_bode_line_h = hndl.conjugate_nicholpl_mag_phase_line;
      else
        conj_bode_line_h = ...
          findobj( allchild(ax_h),'tag','conjugate bode magphase line');
        hndl.conjugate_nicholpl_mag_phase_line = conj_bode_line_h;
      end
      if isfield( hndl,'nicholpl_mag_phase_line')
        bode_line_h = hndl.nicholpl_mag_phase_line;
      else
        bode_line_h = findobj( allchild(ax_h),'tag','nicholpl mag phase line');
        hndl.nicholpl_mag_phase_line = bode_line_h;
      end
      if isfield( hndl,'implicit_freq_marker')
        freqsel_line_h = hndl.implicit_freq_marker;
      else
        freqsel_line_h = findobj( allchild(ax_h),'tag','implicit freq marker');
        hndl.implicit_freq_marker = freqsel_line_h;
      end
      
      curr_tools = pzg_tools(dom_ndx);
      if curr_tools(1)
        design_line_h = pzg_fndo( dom_ndx, 6,'Gain_Preview');
        desn_hndl = getappdata( PZG(dom_ndx).Gain_fig,'hndl');
      elseif curr_tools(2)
        design_line_h = pzg_fndo( dom_ndx, 6,'LDLG_Preview');
        desn_hndl = getappdata( PZG(dom_ndx).LDLG_fig,'hndl');
      elseif curr_tools(3)
        design_line_h = pzg_fndo( dom_ndx, 6,'PID_Preview');
        desn_hndl = getappdata( PZG(dom_ndx).PID_fig,'hndl');
      else
        design_line_h = [];
      end
      design_vis = 'off';
      if ~isempty(design_line_h) && isfield( desn_hndl,'preview_pushbutton')
        pb_color = get( desn_hndl.preview_pushbutton,'backgroundcolor');
        if pb_color(2) > 1.1*max( pb_color([1,3]) )
          design_vis = 'on';
        end
      end
      set( design_line_h,'visible', design_vis )
      if ~show_nyq_data && ~isempty(design_line_h)
        set( design_line_h(end),'visible','off')
      end

      if show_nyq_data
        if ~isempty(nyquist_line_h)
          set( nyquist_line_h,'visible','on')
        end
        if ~isempty(conjugate_nyquist_h)
          set( conjugate_nyquist_h,'visible','on')
        end
        if ~isempty(conj_bode_line_h)
          set( conj_bode_line_h,'visible','on');
        end
        if ~isempty(freqsel_line_h) && PZG(dom_ndx).pzg_show_frf_computation
          set( freqsel_line_h,'visible','on');
        elseif ~isempty(freqsel_line_h)
          set( freqsel_line_h,'visible','off');
        end
        if ~isempty(bode_line_h)
          set( bode_line_h,'linestyle','-');
        end
      else
        % Only the Bode data are visible.
        if ~isempty(nyquist_line_h)
          set( nyquist_line_h,'visible','off')
        end
        if ~isempty(conjugate_nyquist_h)
          set( conjugate_nyquist_h,'visible','off')
        end
        if ~isempty(bode_line_h)
          set( bode_line_h,'linestyle','-');
        end
        if ~isempty(conj_bode_line_h)
          set( conj_bode_line_h,'visible','off');
        end
      end
      
      if ~isempty(freqsel_line_h)
        if PZG(dom_ndx).pzg_show_frf_computation
          neg_freq = 0;
          if isfield(PZG(dom_ndx),'NegSelect') ...
            && ~isempty(PZG(dom_ndx).NegSelect) && PZG(dom_ndx).NegSelect
            neg_freq = 1;
          end
          if show_nyq_data ...
            && isfield(PZG(dom_ndx),'NyqSelNdx') ...
            && ~isempty(PZG(dom_ndx).NyqSelNdx)
            set( freqsel_line_h,'visible','on');
          elseif ~isempty( PZG(dom_ndx).FrqSelNdx )
            if neg_freq
              set( freqsel_line_h,'visible','off');
            end
          else
            set( freqsel_line_h,'visible','off');
          end
        else
          set( freqsel_line_h,'visible','off');
        end
      end
      pzg_seltxt(dom_ndx)
    otherwise
  end
  if ~isequal( hndl0, hndl )
    setappdata( fig_h,'hndl', hndl);
    pzg_cphndl( fig_h, dom_ndx, hndl.ploth_ndx )
  end
return

function hndl = local_nichols_grid( BodeMag, BodePhs, gca0, hndl )
  % Get existing grid lines.
  if isfield( hndl,'pzgui_nichols_grid')
    nichgrid_h = hndl.pzgui_nichols_grid;
  else
    nichgrid_h = [];
  end
  if isfield( hndl,'pzgui_nichols_m1_markers')
    nich_m1_marker_h = hndl.pzgui_nichols_m1_markers;
  else
    nich_m1_marker_h = [];
  end
  if isfield( hndl,'pzgui_m1_vertical_marker')
    nich_m1_vert_h = hndl.pzgui_m1_vertical_marker;
  else
    nich_m1_vert_h = [];
  end
  if isfield( hndl,'pzgui_nichols_text')
    nichtext_h = hndl.pzgui_nichols_text;
  else
    nichtext_h = [];
  end
 
  nGains = [logspace(-5,-2.5,11) ...
            logspace(-2.5,-0.05,45) ...
            logspace(-0.05,0.05,101) ...
            logspace(0.05,2.5,45) ...
            logspace(2.5,5,11) ]';
  nPhases = [ -359.5, (-340:20:-20), -0.5 ];
  CLPhaseGrid = nGains * exp(1i*pi/180*nPhases);
  OLPhaseGrid = CLPhaseGrid./(1-CLPhaseGrid);
  magPhsGrd = 20*log10(abs(OLPhaseGrid));
  angPhsGrd = 180/pi*angle(OLPhaseGrid);
  for Ck = 1:numel(nGains)
    for Dk = 1:numel(nPhases)
      if angPhsGrd(Ck,Dk) > 0
        angPhsGrd(Ck,Dk) = ...
            angPhsGrd(Ck,Dk) - 360;
      end
    end
  end
  
  % Determine number of copies of CL grid.  BodePhs, BodeMag
  aboveneg40_ndxs = find( BodeMag > min( -40, max(BodeMag)-15 ) );
  max_grid_phs = max( 180, max( BodePhs(aboveneg40_ndxs) ) );
  nr_pos_grids = ceil( ceil( max_grid_phs/180 )/2 );
  min_grid_phs = min( -540, min( BodePhs(aboveneg40_ndxs) ) );
  nr_neg_grids = ceil( ceil( -min_grid_phs/180 )/2 );
  nr_neg_grids = max(nr_neg_grids,nr_pos_grids);
  nr_pos_grids = nr_neg_grids;
  
  grid_mults = ( min( -1, 1-nr_neg_grids ):max( 1, nr_pos_grids ) )';
  all_phs_grid = ...
    zeros( size(angPhsGrd,1), size(angPhsGrd,2)*numel(grid_mults) );
  all_mag_grid = ...
    zeros( size(magPhsGrd,1), size(angPhsGrd,2)*numel(grid_mults) );
  for kndx = 1:numel(grid_mults)
    start_ndx = 1+size(angPhsGrd,2)*(kndx-1);
    k = grid_mults(kndx);
    all_phs_grid(:,start_ndx:start_ndx+size(angPhsGrd,2)-1) = angPhsGrd+360*k;
    all_mag_grid(:,start_ndx:start_ndx+size(angPhsGrd,2)-1) = magPhsGrd;
  end
  all_phs_grid = [ all_phs_grid; NaN*ones(1,size(all_phs_grid,2)) ];
  all_phs_grid = all_phs_grid(:);
  all_mag_grid = [ all_mag_grid; NaN*ones(1,size(all_mag_grid,2)) ];
  all_mag_grid = all_mag_grid(:);
  
  if ~isequal( 3, numel(nichgrid_h) )
    nichgrid_h = ...
      plot( all_phs_grid, all_mag_grid, ...
        'color',[0.7 0.7 0], ...
        'linestyle',':', ...
        'handlevisibility','off', ...
        'parent', gca0, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'tag','pzgui nichols grid');
  else
    set( nichgrid_h(1), ...
      'xdata', all_phs_grid, ...
      'ydata', all_mag_grid, ...
      'color',[0.7 0.7 0], ...
      'linestyle',':', ...
      'handlevisibility','off');
  end

  nGains = 10.^([ (-60:10:-10) -6 -3 -2 -1 -0.5 -0.1 0 0.1 ...
                   0.5 1 2 3 6 10 20 40 60 100] / 20);
  nPhases = ...
    [ -359.99 (-359.95:0.5:-350.25), (-350:5:-10), ...
      (-9.75:0.5:-0.25) (-0.20:0.05:-0.05) -0.01 ]';
  CLPhaseGrid = exp(1i*pi/180*nPhases) * nGains;
  OLPhaseGrid = CLPhaseGrid./(1-CLPhaseGrid);
  magPhsGrd = 20*log10(abs(OLPhaseGrid));
  angPhsGrd = 180/pi*angle(OLPhaseGrid);
  
  Ndx = find( angPhsGrd > 0 );
  angPhsGrd(Ndx) = angPhsGrd(Ndx) - 360;

  unity_gain_phs_grd = [ angPhsGrd(:,13); -90.025; NaN ];
  unity_gain_mag_grd = [ magPhsGrd(:,13); 61.2; NaN ];
  
  all_unityphs_grid = zeros( numel(unity_gain_phs_grd), numel(grid_mults) );
  all_unitymag_grid = zeros( numel(unity_gain_mag_grd), numel(grid_mults) );
  all_phs_grid = zeros( size(angPhsGrd,1), numel(grid_mults) );
  all_mag_grid = zeros( size(magPhsGrd,1), numel(grid_mults) );
  for kndx = 1:numel(grid_mults)
    start_ndx = 1+size(angPhsGrd,2)*(kndx-1);
    k = grid_mults(kndx);
    all_phs_grid(:,start_ndx:start_ndx+size(angPhsGrd,2)-1) = angPhsGrd+360*k;
    all_mag_grid(:,start_ndx:start_ndx+size(angPhsGrd,2)-1) = magPhsGrd;
    all_unityphs_grid(:,kndx) = unity_gain_phs_grd+360*k;
    all_unitymag_grid(:,kndx) = unity_gain_mag_grd;
  end

  all_phs_grid = [ all_phs_grid; NaN*ones(1,size(all_phs_grid,2)) ];
  all_phs_grid = all_phs_grid(:);
  all_mag_grid = [ all_mag_grid; NaN*ones(1,size(all_mag_grid,2)) ];
  all_mag_grid = all_mag_grid(:);
  if ~isequal( 3, numel(nichgrid_h) )
    nichgrid_h(2) = ...
      plot( all_phs_grid, all_mag_grid, ...
        'color',[0 0.7 0.7], ...
        'linestyle',':', ...
        'parent', gca0, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'tag','pzgui nichols grid');
    nichgrid_h(3) = ...
      plot( all_unityphs_grid(:), all_unitymag_grid(:), ...
        'color', [0 0.7 0.7], ...
        'linestyle','-', ...
        'LineWidth', 2, ...
        'parent', gca0, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'tag','pzgui nichols grid');
    hndl.pzgui_nichols_grid = nichgrid_h(:);
  else
    set( nichgrid_h(2), ...
      'xdata', all_phs_grid, ...
      'ydata', all_mag_grid, ...
      'color',[0 0.7 0.7], ...
      'linestyle',':');
    set( nichgrid_h(3), ...
      'xdata', all_unityphs_grid(:), ...
      'ydata', all_unitymag_grid(:), ...
      'color', [0 0.7 0.7], ...
      'linestyle','-', ...
      'LineWidth', 2 );
  end
     
  neg1_phs_pts = (2*(1-nr_neg_grids:nr_pos_grids)-1)*180;
  if ~isequal( 1, numel(nich_m1_marker_h) )
    hndl.pzgui_nichols_m1_markers = ...
      plot( neg1_phs_pts, zeros(size(neg1_phs_pts)), ...
        'linestyle','none', ...
        'linewidth', 2, ...
        'marker','s', ...
        'markersize', 3, ...
        'color',[0.7 0.7 0], ...
        'handlevisibility','off', ...
        'parent', gca0, ...
        'tag','pzgui nichols -1 markers', ...
        'hittest','off', ...
        'handlevisibility','off');
  else
    set( nich_m1_marker_h, ...
      'xdata', neg1_phs_pts, ...
      'ydata', zeros(size(neg1_phs_pts)), ...
      'linestyle','none', ...
      'linewidth', 2, ...
      'marker','s', ...
      'markersize', 3, ...
      'color',[0.7 0.7 0], ...
      'handlevisibility','off');
  end
  
  neg1_phs_pts_grid = ...
    [ neg1_phs_pts+75.16i; neg1_phs_pts-100i; NaN*ones(size(neg1_phs_pts)) ];
  if ~isequal( 1, numel(nich_m1_vert_h) )
    hndl.pzgui_m1_vertical_marker = ...
      plot( neg1_phs_pts_grid(:), ...
        'linestyle','--', ...
        'color', [0 0.7 0.7], ...
        'handlevisibility','off', ...
        'parent', gca0, ...
        'tag','pzgui -1 vertical marker', ...
        'hittest','off', ...
        'handlevisibility','off');
    else
    set( nich_m1_vert_h, ...
      'xdata', real(neg1_phs_pts_grid(:)), ...
      'ydata', imag(neg1_phs_pts_grid(:)), ...
      'linestyle','--', ...
      'color', [0 0.7 0.7], ...
        'handlevisibility','off');
  end
  
  if isempty(nichtext_h)
    xLocs = ...
      [  -70 -70 -70 -70 -70 -70 -70 -70 -72 -74 -78 ...
        -82 -113 ...
        -130 -140 -152 -162 -170 -178 ]';
    yLocs = ...
      [-59 -49 -39 -29 -21  -10 -4  2  6.8  12  17 ...
        23 26 ...
        21  18  14  11  7  4 ]';
    txtStr = ['-60 ';'-50 ';'-40 ';'-30 ';'-20 '; ...
              '-10 ';'-6  ';'-3  ';'-2  ';'-1  ';'-0.5'; ...
              '-0.1';'0.1 '; ...
              '0.5 ';'1   ';'2   ';'3   ';'6   ';'10  '];
    text( xLocs, yLocs, txtStr, ...
      'Color', [0 1 1], ...
      'clipping','on', ...
      'hittest','off', ...
      'handlevisibility','off', ...
      'parent', gca0, ...
      'tag','pzgui nichols text');

    text( -89, 32,'0 dB', ...
      'color',[0 0.8 0.8], ...
      'fontweight','bold', ...
      'clipping','on', ...
      'hittest','off', ...
      'handlevisibility','off', ...
      'parent', gca0, ...
      'tag','pzgui nichols text');

    text( -248, 41.5,'-359.5^o', ...
      'Color',[0.8 0.8 0], ...
      'clipping','on', ...
      'hittest','off', ...
      'handlevisibility','off', ...
      'parent', gca0, ...
      'tag','pzgui nichols text');
    text( -125, 41.5,'-0.5^o', ...
      'Color',[0.8 0.8 0], ...
      'clipping','on', ...
      'hittest','off', ...
      'handlevisibility','off', ...
      'parent', gca0, ...
      'tag','pzgui nichols text');
    % degrees -340 -320 -300 -60 -40  -20 
    xLocs =  [-290 -310 -305 ...
              -85 -65 -45 -30]';
    yLocs =  [ 11   -3   -18 ...
               -17.5 -16 -13 -4]';
    txtStr = ['-340^o';'-320^o';'-300^o'; ...
              '-80^o ';'-60^o ';'-40^o ';'-20^o '];
    text( xLocs, yLocs, txtStr, ...
      'Color',[0.8 0.8 0], ...
      'clipping','on', ...
      'hittest','off', ...
      'handlevisibility','off', ...
      'parent', gca0, ...
      'tag','pzgui nichols text');
    hndl.pzgui_nichols_text = ...
      findobj( allchild(gca0),'tag','pzgui nichols text');
  end
  
  if ~isfield( hndl,'CL_mag_phase_grid_checkbox') ...
    || isempty(hndl.CL_mag_phase_grid_checkbox) ...
    || ~get( hndl.CL_mag_phase_grid_checkbox,'value')
    set( hndl.pzgui_nichols_grid,'visible','off')
    set( hndl.pzgui_nichols_text,'visible','off')
  else
    set( hndl.pzgui_nichols_grid,'visible','on')
    set( hndl.pzgui_nichols_text,'visible','on')
  end
  
  hndl = local_target_grid( BodePhs, gca0, hndl );
return

function hndl = local_target_grid( NichPhs, gca0, hndl )
  if ( nargin < 2 ) || ~isequal( ishandle(gca0), 1 ) ...
    || ~strcmp('axes', get( gca0,'type') )
    return
  end
  
  minPhs = min( -180, floor( min(NichPhs)/180 ) * 180 );
  maxPhs = max( 0, ceil( max(NichPhs)/180 * 180 ) );
  
  gm_pts = [ 1-1/2/sqrt(2); 1/2; 1-1/sqrt(2) ];
  target_points = [];
  for k = 1:numel(gm_pts)
    target_points = [ target_points; ...
      -1 + gm_pts(k) ...
      *exp(1i*linspace(-acos(gm_pts(k)/2),acos(gm_pts(k)/2),2500)') ]; ...
                                                               %#ok<AGROW>
  end
  target_points = [ target_points; 1./conj(target_points) ];
  
  target_points_y_block = 20*log10(abs(target_points));
  target_points_x_block = 180/pi*angle(target_points);
  temp_ndx = find( target_points_x_block > 0 );
  target_points_x_block(temp_ndx) = target_points_x_block(temp_ndx) - 360;

  min_phase_block = min( -1, floor((minPhs)/360) );
  max_phase_block = max(  0, ceil((maxPhs-180)/360) );
  target_points_x = target_points_x_block;
  target_points_y = target_points_y_block;
  for k1 = min_phase_block:max_phase_block
    if k1 < -1
      target_points_x = ...
        [ target_points_x_block+360*(k1+1); target_points_x ]; %#ok<AGROW>
      target_points_y = ...
        [       target_points_y_block;      target_points_y ]; %#ok<AGROW>
    elseif k1 > -1
      target_points_x = ...
        [ target_points_x; target_points_x_block+360*(k1+1) ]; %#ok<AGROW>
      target_points_y = ...
        [ target_points_y;       target_points_y_block      ]; %#ok<AGROW>
    end
  end
  target_points_x = [ target_points_x; NaN*ones(1,size(target_points_x,2)) ];
  target_points_y = [ target_points_y; NaN*ones(1,size(target_points_y,2)) ];
  
  if isfield( hndl,'equimargin_grid')
    target_h = hndl.equimargin_grid;
  else
    target_h = findobj( allchild(gca0),'type','line','tag','equimargin grid');
    hndl.equimargin_grid = target_h;
  end
  if numel(target_h) > 1
    delete(target_h)
    target_h = [];
  end
  if isfield( hndl,'equimargin_checkbox')
    eqmrgn_cb = hndl.equimargin_checkbox;
  else
    eqmrgn_cb = findobj( get(gca0,'parent'),'tag','equimargin checkbox');
    hndl.equimargin_checkbox = eqmrgn_cb;
  end
  if isempty(eqmrgn_cb) || isequal( get(eqmrgn_cb,'value'), 0 )
    eqmgn_vis = 'off';
  else
    eqmgn_vis = 'on';
  end
  if isempty(target_h)
    hndl.equimargin_grid = ...
      plot( target_points_x(:), target_points_y(:), ...
        'color',[0 0.8 0], ...
        'parent', gca0, ...
        'visible', eqmgn_vis, ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'tag','equimargin grid');
  else
    set( target_h, ...
      'xdata', target_points_x, ...
      'ydata', target_points_y, ...
      'visible', eqmgn_vis );
  end
  
  if isfield( hndl,'equimargin_text')
    target_h = hndl.equimargin_text;
  else
    target_h = findobj( allchild(gca0),'type','line','tag','equimargin text');
  end
  target_text = {'3-dB eq';'6-dB eq';'9-dB eq'};
  text_pos = [ -200 1.6; -209 3.8; -218 6 ];
  if numel(target_h) ~= 3
    delete(target_h)
    for k = 1:3
      text( text_pos(k,1), text_pos(k,2), target_text{k}, ...
        'parent', gca0, ...
        'color',[0 0.8 0], ...
        'fontsize', 10, ...
        'rotation', 36, ...
        'clipping','on', ...
        'hittest','off', ...
        'handlevisibility','off', ...
        'visible', eqmgn_vis, ...
        'tag','equimargin text');
    end
    hndl.equimargin_text = ...
      findobj( allchild(gca0),'type','text','tag','equimargin text');
  else
    for k = 1:3
      set( target_h(k), ...
        'position', [text_pos(k,1) text_pos(k,2) ], ...
        'string', target_text{k}, ...
        'color',[0 0.8 0], ...
        'fontsize', 10, ...
        'rotation', 36, ...
        'visible', eqmgn_vis );
    end
  end
return
