function  bodepl( BodeFreqs, BodeMag, BodePhs, ...
                  PlotName, FrqSelNdx, PlotTitle, Position, BtnDwnFn )
% Creates the bode magnitude and bode phase plots

% The following copyrighted m-files comprise the PZGUI tool:
%    ** The contents of these files may not be included **
%    **  in any other program without explicit written  **
%    **    consent from the author, Mark A. Hopkins     **
%     bodepl.m        pzg_bodex.m     pzg_islink.m     pzg_seltxt.m
%     contents.m      pzg_box.m       pzg_islogx.m     pzg_tools.m
%     contourpl.m     pzg_c2d.m       pzg_isunwrp.m    pzg_tpwr.m
%     dpzgui.m        pzg_cntr.m      pzg_lims.m       pzg_txan.m
%     dupdatep.m      pzg_cphndl.m    pzg_menu.m       pzg_unre.m
%     figopts.m       pzg_d2c.m       pzg_moda.m       pzg_unwrap.m
%     fr_disp.m       pzg_disab.m     pzg_onoff.m      pzg_updtfilt.m
%     freqserv.m      pzg_efmt.m      pzg_pfesim.m     pzg_xtrfrq.m
%     gainfilt.m      pzg_err.m       pzg_prvw.m       pzgcalbk.m
%     helpserv.m      pzg_errvis.m    pzg_ptr.m        pzgui.m
%     ldlgfilt.m      pzg_fndo.m      pzg_recovr.m     pzmvserv.m
%     nicholpl.m      pzg_gle.m       pzg_reptxt.m     resppl.m
%     nyqistpl.m      pzg_grid.m      pzg_res.m        rlocuspl.m
%     pidfilt.m       pzg_inzpk.m     pzg_rsppfe.m     sensplot.m
%     pz_move.m       pzg_isdby.m     pzg_rss.m        updatepl.m
%     pzg_bkup.m      pzg_ishzx.m     pzg_scifmt.m     updtpzln.m
%                                     pzg_sclpt.m      zmimntcpt.m
% (c) 1996 - 2014
%    by Professor Mark A. Hopkins, Ph.D.
%       Electrical and Microelectronic Engineering
%       Rochester Institute of Technology
%       Rochester NY, USA 14623        Email:  mark.hopkins@rit.edu
%
% SHAREWARE INFORMATION:
%               FREE, IF USED ONLY FOR EDUCATIONAL PURPOSES.
%   Otherwise:
%    (corporations, companies, and other for-profit users) 
%    Individual licenses -- US$200 per computer
%    Site license -- US$2000 per industrial site, any number of users
%    Make check payable to "Mark A. Hopkins", and remit to address above
% ----------------------------------------------------------------------
global PZG
if isempty(PZG) && ~pzg_recovr 
  return
end

% Check that the input arguments are valid:
if ( nargin < 4 ) || ( nargin > 8 )
  disp('Correct format is:  ');
  disp(' bodepl( BodeFreqs, BodeMag, BodePhs, PlotName ...');
  disp('    <,FrqSelNdx> <,PlotTitle> <,Position> <,BtnDwnFn> )');
  return
end

if nargin < 8
  BtnDwnFn = ...
    ['try,tempfs=freqserv(gcbf,1);pzg_ptr;' ...
     'catch,pzg_err(''button down'');end,clear tempfs;'];
end
if ( ~ischar(BtnDwnFn) ) || ( min(size(BtnDwnFn) > 1 ) )
  disp('8-th input argument, BTNDWNFN must be a simple string.');
  return
end

if nargin < 7
  Position = [];
end
if ( numel(Position) ~= 4 ) || ischar(Position)
  disp('7-th input arg, POSITION must be a 1-by-4 numerical array.');
  return
end

if nargin < 6
  PlotTitle = '';
end
if ~ischar(PlotTitle) || ( min(size(PlotTitle) > 1 ) )
  disp('Sixth input argument, PLOTTITLE must be a simple string.');
  return
end
if ~ischar(PlotName)
  disp('Fourth input argument, PLOTNAME must be a simple string.');
  return
end
if min(size(PlotName))~=1
  disp('Fourth input argument, PLOTNAME cannot be an empty string.');
  return
end
if isempty( strfind( PlotName,'iscrete') )
  dom_ndx = 1;
else
  dom_ndx = 2;
end
if isempty( strfind( lower(PlotName),'open') )
  magploth_ndx = 3;
  phsploth_ndx = 4;
else
  magploth_ndx = 1;
  phsploth_ndx = 2;
end
  
if nargin < 5
  FrqSelNdx = [];
end
if numel(FrqSelNdx) > 1
  disp('Fifth input argument, FRQSELNDX must be a scalar.')
  return
end
if PZG(dom_ndx).NegSelect && isequal( dom_ndx, 1 )
  FrqSelNdx = [];
end
if numel(FrqSelNdx) == 1
  if ( FrqSelNdx > 0 ) && ( FrqSelNdx <= numel(BodeFreqs) )
    tempNdx = FrqSelNdx;
    tempVis = 'on';
  else
    tempNdx = 1;
    tempVis = 'off';
  end
else
  tempNdx = 1;
  tempVis = 'off';
end
if ~PZG(dom_ndx).pzg_show_frf_computation
  tempVis = 'off';
end

if ischar(BodeFreqs) || ischar(BodeMag) || ischar(BodePhs)
  disp('Bode plot data cannot be string data.');
  return
end
if ( numel(BodeFreqs) ~= numel(BodeMag) ) ...
  ||( numel(BodeFreqs) ~= numel(BodePhs) )
  disp('bodepl:  Arguments BODEFREQS, BODEMAG, and BODEPHS ');
  disp('         must all be the same length.');
  return
end
if ( min(size(BodeFreqs)) > 1 ) ...
  ||( min(size(BodeMag)) > 1 ) ...
  ||( min(size(BodePhs)) > 1 )
  disp('bodepl:  Arguments BODEFREQS, BODEMAG, and BODEPHS ');
  disp('         must column or row vectors.');
  return
end

% ----------------------------------------------------------------------
% Set the Bode Phase at very low frequencies 
% to the value indicated by the low-frequency slope.
if dom_ndx == 2
  negfreq_ndxs_1 = ...
    find( ( BodeFreqs > pi/PZG(2).Ts ) & ( BodeFreqs < 2*pi/PZG(2).Ts ) );
  negfreq_ndxs_2 = ...
    find( ( BodeFreqs > 3*pi/PZG(2).Ts ) & ( BodeFreqs < 4*pi/PZG(2).Ts ) );
else
  negfreq_ndxs_1 = [];
  negfreq_ndxs_2 = [];
end

% ----------------------------------------------------------------------
LogChk = pzg_islogx;
DBchk = pzg_isdby;
HZchk = pzg_ishzx;
UnwrapChk = pzg_isunwrp;

freqmult = 1;
if HZchk
  freqmult = 1/2/pi;
end
  
% ----------------------------------------------------------------------
% The MAGNITUDE PLOT
gcf0 = pzg_fndo( dom_ndx, magploth_ndx,'fig_h');
if isempty(gcf0)
  gcf0 = findobj( allchild(0),'type','figure','name',[ PlotName ' Magnitude']);
  if ~isempty(gcf0)
    delete(gcf0)
    gcf0 = [];
  end
end
if ~isempty(gcf0) && ~isappdata( gcf0,'hndl')
  delete(gcf0)
  gcf0 = [];
end
temp0 = [];
if ~isempty(gcf0)
  temp0 = get( gcf0,'userdata');
  if isempty(temp0)
    delete(gcf0)
    gcf0 = [];
  end
end
  
if isempty(temp0)
  % Plot doesn't yet exist
  if ( dom_ndx == 1 ) && ( magploth_ndx == 1 )
    del_str = ...
      ['global PZG,' ...
       'try,' ...
         'if isfield(PZG(1).plot_h{12},''fig_h''),' ...
           'set(PZG(1).plot_h{12}.hndl.OLbode_checkbox,''value'',0);' ...
         'end,' ...
         'PZG(1).plot_h{1}=[];' ...
         'if isfield(PZG(1).plot_h{2},''fig_h''),' ...
           'delete(PZG(1).plot_h{2}.fig_h),' ...
           'PZG(1).plot_h{2} = [];' ...
         'end,' ...
       'end,' ...
       'pzg_bkup'];
  elseif ( dom_ndx == 1 ) && ( magploth_ndx == 3 )
    del_str = ...
      ['global PZG,' ...
       'try,' ...
         'if isfield(PZG(1).plot_h{12},''fig_h''),' ...
           'set(PZG(1).plot_h{12}.hndl.CLbode_checkbox,''value'',0);' ...
         'end,' ...
         'PZG(1).plot_h{3}=[];' ...
         'if isfield(PZG(1).plot_h{4},''fig_h''),' ...
           'delete(PZG(1).plot_h{4}.fig_h),' ...
           'PZG(1).plot_h{4} = [];' ...
         'end,' ...
       'end,' ...
       'pzg_bkup'];
  elseif ( dom_ndx == 2 ) && ( magploth_ndx == 1 )
    del_str = ...
      ['global PZG,' ...
       'try,' ...
         'if isfield(PZG(2).plot_h{13},''fig_h''),' ...
           'set(PZG(2).plot_h{13}.hndl.OLbode_checkbox,''value'',0);' ...
         'end,' ...
         'PZG(2).plot_h{1}=[];' ...
         'if isfield(PZG(2).plot_h{2},''fig_h''),' ...
           'delete(PZG(2).plot_h{2}.fig_h),' ...
           'PZG(2).plot_h{2} = [];' ...
         'end,' ...
       'end,' ...
       'pzg_bkup'];
  elseif ( dom_ndx == 2 ) && ( magploth_ndx == 3 )
    del_str = ...
      ['global PZG,' ...
       'try,' ...
         'if isfield(PZG(2).plot_h{13},''fig_h''),' ...
           'set(PZG(2).plot_h{13}.hndl.CLbode_checkbox,''value'',0);' ...
         'end,' ...
         'PZG(2).plot_h{3}=[];' ...
         'if isfield(PZG(2).plot_h{4},''fig_h''),' ...
           'delete(PZG(2).plot_h{4}.fig_h),' ...
           'PZG(2).plot_h{4} = [];' ...
         'end,' ...
       'end,' ...
       'pzg_bkup'];
  end
        
  if isempty(Position)
    gcf0 = figure('units','normalized', ...
      'menubar','figure', ...
      'numbertitle','off', ...
      'integerhandle','off', ...
      'handlevisibility','callback', ...
      'dockcontrols','off', ...
      'Name',[ PlotName ' Magnitude'], ...
      'tag','PZGUI plot', ...
      'Color','k', ...
      'Interruptible','on', ...
      'visible','off', ...
      'deletefcn', del_str );
  else
    MagPosition = Position;
    if max(MagPosition) > 1
      ScrSize = get( 0,'screensize');
      MagPosition([1;3]) = MagPosition([1;3])/ScrSize(3);
      MagPosition([2;4]) = MagPosition([2;4])/ScrSize(4);
    end
    gcf0 = figure('units','normalized', ...
      'position', MagPosition, ...
      'menubar','figure', ...
      'numbertitle','off', ...
      'integerhandle','off', ...
      'handlevisibility','callback', ...
      'dockcontrols','off', ...
      'Name',[ PlotName ' Magnitude'], ...
      'tag','PZGUI plot', ...
      'Color','k', ...
      'Interruptible','on', ...
      'visible','off', ...
      'deletefcn', del_str, ...
      'windowbuttonmotionfcn', ...
        ['try,' ...
         'if pzg_disab,return,end,' ...
         'tempfs=freqserv(gcbf);pzg_ptr;' ...
         'catch,pzg_err(''mouse motion bode mag'');' ...
         'end,clear tempfs']);
  end
  
  % Put menu items in the figure's menubar.
  opt_menu_h = ...
    uimenu('parent', gcf0, ...
           'label', 'PZGUI OPTIONS', ...
           'tag','pzgui_options_menu');
  dom_str = {'s','z'};
  pzg_menu( opt_menu_h, dom_str{dom_ndx} );
  maghndl = getappdata( gcf0,'hndl');
  
  maghndl.plot_name = get( gcf0,'name');
  maghndl.dom_ndx = dom_ndx;
  if isempty( strfind( lower(maghndl.plot_name),'closed') )
    maghndl.ploth_ndx = 1;
  else
    maghndl.ploth_ndx = 3;
  end
  maghndl.ax = ...
    axes('parent', gcf0,'xgrid','on','ygrid','on', ...
         'xscale','log','nextplot','add','tag','pzg bode plot axes');
  maghndl.ax_title = get( maghndl.ax,'title');
  maghndl.ax_xlabel = get( maghndl.ax,'xlabel');
  maghndl.ax_ylabel = get( maghndl.ax,'ylabel');
  
  if ~LogChk
    set( maghndl.ax,'xscale','linear')
  end
  if ~isempty(BtnDwnFn)
    set(gcf0,'WindowButtonDownFcn', BtnDwnFn );
  end
  
  temp0 = zeros([10 2]);
  tempVis1 = 'on';
  if (numel(BodeFreqs)<2) || (numel(BodeMag)<2)
    BodeFreqs = 1;
    BodeMag = 0;
    BodePhs = 0;
    tempNdx = 1;
    tempVis = 'off';
    tempVis1 = 'off';
  end
  
  if ~isempty( strfind( lower(PlotName),'open') )
    tfedelmag_h = ...
      plot( 1, 0, ...
        'color','g', ...
        'linestyle',':', ...
        'linewidth', 2, ...
        'parent', maghndl.ax, ...
        'visible','off', ...
        'tag','TFE Delta Mag line');
    set( tfedelmag_h,'xdata', [],'ydata', [] );
    maghndl.TFE_Delta_Mag_line = tfedelmag_h;
    
    tfemag_h = ...
      plot( 1, 1, ...
         'color','g', ...
         'linewidth', 1.5, ...
         'parent', maghndl.ax, ...
         'tag','TFE Mag line');
    set( tfemag_h,'xdata', [],'ydata', [] );
    maghndl.TFE_Mag_line = tfemag_h;
  else
    maghndl.TFE_Delta_Mag_line = [];
    maghndl.TFE_Mag_line = [];
  end

  if DBchk
    temp0(2,2) = ...
      plot( BodeFreqs([1,end])*freqmult, [0,0], ...
        'color','c', ...
        'linestyle','--', ...
        'LineWidth', 0.5, ...
        'Tag','unity gain line', ...
        'Visible', tempVis1, ...
        'parent', maghndl.ax );
    maghndl.unity_gain_line = temp0(2,2);
    maghndl.zero_gain_line = ...
      plot( BodeFreqs([1,end])*freqmult, [0 0], ...
        'color','c', ...
        'linestyle','-', ...
        'LineWidth', 1, ...
        'Tag','zero gain line', ...
        'Visible','off', ...
        'parent', maghndl.ax, ...
        'Tag','zero gain line');
    temp0(2,1) = ...
      plot( BodeFreqs*freqmult, BodeMag,'r', ...
        'LineWidth', 3, ...
        'Tag','Bode Line', ...
        'Visible', tempVis1, ...
        'parent', maghndl.ax );
    maghndl.Bode_Line = temp0(2,1);
    
    if dom_ndx == 2
      if numel(BodeMag) > 2
        n_freq = BodeFreqs(negfreq_ndxs_1);
        n_mag = BodeMag(negfreq_ndxs_1);
        plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts] * freqmult;
        plot_mag = [ n_mag(1); n_mag(:); n_mag(end) ];
        temp0(5,1) = ...
          plot( plot_freq, plot_mag, ...
           'color', 1-get(maghndl.ax,'color'), ...
           'linewidth', 2, ...
           'linestyle','--', ...
           'Tag','Bode DT negfreq Line', ...
           'Visible', tempVis1, ...
           'parent', maghndl.ax );        
        n_freq = BodeFreqs(negfreq_ndxs_2);
        n_mag = BodeMag(negfreq_ndxs_2);
        plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ] * freqmult;
        plot_mag = [ n_mag(1); n_mag(:) ];
        temp0(5,2) = ...
          plot( plot_freq, plot_mag, ...
          'color', 1-get(maghndl.ax,'color'), ...
          'linewidth', 2, ...
          'linestyle','--', ...
          'Tag','Bode DT negfreq Line', ...
          'Visible', tempVis1, ...
          'parent', maghndl.ax );
        maghndl.Bode_DT_negfreq_Line = temp0(5,1:2);
      else
        temp0(5,1) = ...
          plot( 1, 0, ...
                   'color', 1-get(maghndl.ax,'color'), ...
                   'linewidth', 2, ...
                   'linestyle','--', ...
                   'Tag','Bode DT negfreq Line', ...
                   'Visible', tempVis1, ...
                   'parent', maghndl.ax );
        temp0(5,2) = ...
          plot( 1, 0, ...
                   'color', 1-get(maghndl.ax,'color'), ...
                   'linewidth', 2, ...
                   'linestyle','--', ...
                   'Tag','Bode DT negfreq Line', ...
                   'Visible', tempVis1, ...
                   'parent', maghndl.ax );
        maghndl.Bode_DT_negfreq_Line = temp0(5,1:2);
      end
    else
      maghndl.Bode_DT_negfreq_Line = [];
    end
    
    YLim = get( maghndl.ax,'ylim');
    if diff(YLim) < 1
      YLim = [ YLim(1)-1 YLim(2)+1 ];
      set( maghndl.ax,'ylim', YLim )
      maghndl.ax_ylim = YLim;
    end
    set( maghndl.ax_ylabel,'Color',[1 1 1],'string','Magnitude (dB)');
  else
    maghndl.unity_gain_line = ...
      plot( BodeFreqs([1,end])*freqmult, [1,1],'c-', ...
               'LineWidth',0.5, ...
               'Visible',tempVis1, ...
               'parent', maghndl.ax, ...
               'Tag','unity gain line');
    temp0(2,1) = ...
      plot( BodeFreqs*freqmult, 10.^(BodeMag/20),'r', ...
               'LineWidth', 3, ...
               'Visible',tempVis1, ...
               'parent', maghndl.ax, ...
               'Tag','Bode Line');
    maghndl.Bode_Line = temp0(2,1);
    if dom_ndx == 2
      if numel(BodeMag) > 2
        n_freq = BodeFreqs(negfreq_ndxs_1);
        n_mag = 10.^( BodeMag(negfreq_ndxs_1)/20 );
        plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts] * freqmult;
        plot_mag = [ n_mag(1); n_mag(:); n_mag(end) ];
        temp0(5,1) = ...
          plot( ...
            plot_freq, plot_mag, ...
           'color', 1-get(maghndl.ax,'color'), ...
           'linewidth', 2, ...
           'linestyle','--', ...
           'Visible', tempVis1, ...
           'parent', maghndl.ax, ...
           'Tag','Bode DT negfreq Line');
        n_freq = BodeFreqs(negfreq_ndxs_2);
        n_mag = 10.^( BodeMag(negfreq_ndxs_2)/20 );
        plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ] * freqmult;
        plot_mag = [ n_mag(1); n_mag(:) ];
        temp0(5,2) = ...
          plot( ...
            plot_freq, plot_mag, ...
           'color', 1-get(maghndl.ax,'color'), ...
           'linewidth', 2, ...
           'linestyle','--', ...
           'Tag','Bode DT negfreq Line', ...
           'Visible', tempVis1, ...
           'parent', maghndl.ax );
      else
        temp0(5,1) = ...
          plot( 1, 0, ...
                   'color', 1-get(maghndl.ax,'color'), ...
                   'linewidth', 2, ...
                   'linestyle','--', ...
                   'Visible', tempVis1, ...
                   'parent', maghndl.ax, ...
                   'Tag','Bode DT negfreq Line');
        temp0(5,2) = ...
          plot( 1, 0, ...
                   'color', 1-get(maghndl.ax,'color'), ...
                   'linewidth', 2, ...
                   'linestyle','--', ...
                   'Visible', tempVis1, ...
                   'parent', maghndl.ax, ...
                   'Tag','Bode DT negfreq Line');
      end
    end
    maghndl.Bode_DT_negfreq_Line = temp0(5,1:2);
    
    YLim = get( maghndl.ax,'ylim');
    if diff(YLim) < 0.5
      YLim = [ YLim(1)-0.5  YLim(2)+0.5 ];
      set( maghndl.ax,'ylim', YLim )
      maghndl.ax_ylim = YLim;
    end
    maghndl.ax_ylabel = get(maghndl.ax,'ylabel');
    set( maghndl.ax_ylabel, ...
        'Color',[1 1 1], ...
        'string','Magnitude (NOT in dB)');
  end
  
  if HZchk && ( numel(BodeFreqs) > 1 )
    set( maghndl.ax,'xlim', [BodeFreqs(1) BodeFreqs(end)]/2/pi );
    maghndl.ax_xlim = [BodeFreqs(1) BodeFreqs(end)]/2/pi;
  elseif numel(BodeFreqs) > 1
    set( maghndl.ax,'xlim', [BodeFreqs(1) BodeFreqs(end)] );
    maghndl.ax_xlim = [BodeFreqs(1) BodeFreqs(end)];
  end
  
  temp0(1,1) = maghndl.ax;
  set( maghndl.ax,'Color','k','XColor','w','YColor','w');
  ScrSize = get(0,'ScreenSize');
  if ScrSize(3) > 1024
    set( maghndl.ax,...
          'Interruptible','on', ...
          'FontSize',10, ...
          'YLim',[min(BodeMag)-5  max(BodeMag)+5], ...
          'position',[0.14 0.21 0.77 0.70] );
    maghndl.ax_ylim = [min(BodeMag)-5  max(BodeMag)+5];
  else
    set( maghndl.ax, ...
          'Interruptible','on', ...
          'FontSize',8, ...
          'YLim',[min(BodeMag)-5  max(BodeMag)+5], ...
          'position',[0.14 0.21 0.77 0.70] );
    maghndl.ax_ylim = [min(BodeMag)-5  max(BodeMag)+5];
  end
  if DBchk && ~HZchk
    temp0(3,1) = ...
      plot( BodeFreqs(tempNdx), BodeMag(tempNdx),'co', ...
           'MarkerSize',7,'LineWidth',2.5, ...
           'Visible',tempVis, ...
           'tag','Bode  selection marker', ...
           'parent', maghndl.ax );
  elseif DBchk && HZchk
    temp0(3,1) = ...
      plot( BodeFreqs(tempNdx)/2/pi, BodeMag(tempNdx),'co', ...
           'MarkerSize',7,'LineWidth',2.5, ...
           'Visible',tempVis, ...
           'tag','Bode selection marker', ...
           'parent', maghndl.ax );
  elseif ~DBchk && ~HZchk
    temp0(3,1) = ...
      plot( BodeFreqs(tempNdx), 10^(BodeMag(tempNdx)/20),'co', ...
           'MarkerSize',7,'LineWidth',2.5, ...
           'Visible',tempVis, ...
           'tag','Bode selection marker', ...
           'parent', maghndl.ax );
  else
    temp0(3,1) = ...
      plot( BodeFreqs(tempNdx)/2/pi, 10^(BodeMag(tempNdx)/20),'co', ...
           'MarkerSize',7,'LineWidth',2.5, ...
           'tag','Bode selection marker', ...
           'Visible',tempVis, ...
           'parent', maghndl.ax );
  end
  maghndl.Bode_selection_marker = temp0(3,1);  
 
  set( maghndl.ax_title, ...
      'string',[ PlotTitle ' Bode Magnitude'], ...
      'Color', 1-get(maghndl.ax,'color') );
  
  temp0(6,1)=get( maghndl.ax,'xlabel');
  maghndl.ax_xlabel = temp0(6,1);
  
  temp0(7,1) = uicontrol( gcf0,'Style','checkbox', ...
    'String','dB', ...
    'Value', DBchk, ...
    'Units','normalized', ...
    'position',[0.005 0.055 0.100 0.050], ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor',[1 .65 .65], ...
    'ForegroundColor',[0 0 0], ...
    'UserData', BodeMag, ...
    'Tag','BodeDBChkbox', ...
    'tooltipstring','y-axis in dB, instead of raw magnitude', ...
    'Callback',['try,pzgcalbk(gcbo,''dB checkbox'');' ...
                'catch,pzg_err(''dB checkbox'');end']);
  maghndl.BodeDBChkbox = temp0(7,1);
 
  temp0(8,1) = uicontrol( gcf0,'Style','checkbox', ...
    'String','Hz', ...
    'Value', HZchk, ...
    'Units','normalized', ...
    'position',[0.005 0.005 0.100 0.050], ...
    'HorizontalAlignment','Left', ...
    'BackgroundColor',[1 .65 .65], ...
    'ForegroundColor',[0 0 0], ...
    'UserData',BodeFreqs, ...
    'tooltipstring','x-axis in hertz, instead of rad/second', ...
    'Tag','BodeHZChkbox', ...
    'Callback',['try,pzgcalbk(gcbo,''Hz checkbox'');' ...
                'catch,pzg_err(''Hz checkbox'');end']);
  maghndl.BodeHZChkbox = temp0(8,1);
  
  set(gcf0,'UserData',temp0);

  maghndl.BodeAxesLinLogChkbox = ...
    uicontrol( gcf0,'Style','checkbox', ...
      'String','Log', ...
      'Value', LogChk, ...
      'Units','normalized', ...
      'position',[0.115 0.005 0.120 0.050], ...
      'HorizontalAlignment','Right', ...
      'BackgroundColor',[1 .65 .65], ...
      'ForegroundColor',[0 0 0], ...
      'Tag','BodeAxesLinLogChkbox', ...
      'tooltipstring','x-axis log-scaled, instead of linear', ...
      'Callback',['try,pzgcalbk(gcbo,''Log checkbox'');' ...
                'catch,pzg_err(''Log checkbox'');end']);
  
  % Adjust the background color.
  figopts('apply_default_color', gcf0 )
  
  % If any other bode plots already exist, set xlimit to same range.
  thisdom_ax_h = pzg_fndo( dom_ndx,(1:5),'ax_h');
  if isempty(thisdom_ax_h)
    if dom_ndx == 1
      thisdom_ax_h = pzg_fndo( 2,(1:5),'ax_h');
    else
      thisdom_ax_h = pzg_fndo( 1,(1:5),'ax_h');
    end
  end
  if ~isempty(thisdom_ax_h)
    exist_xlim = get( thisdom_ax_h(1),'xlim');
    set( maghndl.ax,'xlim', exist_xlim );
  end
  
  maghndl.ax_xlim = get( maghndl.ax,'xlim');
  maghndl.ax_ylim = get( maghndl.ax,'ylim');
  setappdata( gcf0,'hndl', maghndl );
  pzg_cphndl( gcf0, dom_ndx, magploth_ndx );
  pzg_bkup
  
  pzg_prvw(dom_ndx);

  set( gcf0,'visible','on')
  pause(0.1)
  set( gcf0,'position', MagPosition )
  freqserv('refresh_plot_h', gcf0 );
  pzg_seltxt(dom_ndx);
  
else
  % Magnitude plot already exists:
  maghndl = getappdata( gcf0,'hndl');
  
  set( maghndl.BodeDBChkbox,'UserData', BodeMag );
  set( maghndl.BodeHZChkbox,'UserData', BodeFreqs );
  
  if get( maghndl.BodeDBChkbox,'Value')
     set( maghndl.Bode_Line,'Ydata', BodeMag );
     set( maghndl.unity_gain_line, ...
         'Ydata', [ 0 0 ], ...
         'Xdata', BodeFreqs([1,end]) );
    if ( dom_ndx == 2 ) ...
      && isequal( 2, numel(maghndl.Bode_DT_negfreq_Line) )
      if ishandle( maghndl.Bode_DT_negfreq_Line(1) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(1) )
        n_freq = BodeFreqs(negfreq_ndxs_1);
        n_mag = BodeMag(negfreq_ndxs_1);
        if numel(n_mag) > 2
          plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts ];
          plot_mag = [ n_mag(1); n_mag(:); n_mag(end) ];
          set( maghndl.Bode_DT_negfreq_Line(1), ...
              'xdata', plot_freq, ...
              'ydata', plot_mag, ...
              'color', 1-get(maghndl.ax,'color') );
        end
      end
      if ishandle( maghndl.Bode_DT_negfreq_Line(2) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(2) )
        n_freq = BodeFreqs(negfreq_ndxs_2);
        n_mag = BodeMag(negfreq_ndxs_2);
        if numel(n_mag) > 2
          plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ];
          plot_mag = [ n_mag(1); n_mag(:) ];
          set( maghndl.Bode_DT_negfreq_Line(2), ...
              'xdata', plot_freq, ...
              'ydata', plot_mag, ...
              'color', 1-get(maghndl.ax,'color') );
        end
      end
    end
  else
    set( maghndl.Bode_Line,'Ydata', 10.^(BodeMag/20));
    set( maghndl.unity_gain_line, ...
        'Ydata',[1 1], ...
        'Xdata', BodeFreqs([1,end]) );
    if dom_ndx == 2
      if ishandle( maghndl.Bode_DT_negfreq_Line(1) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(1) )
        n_freq = BodeFreqs(negfreq_ndxs_1);
        n_mag = 10.^( BodeMag(negfreq_ndxs_1)/20 );
        plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts ];
        plot_mag = [ n_mag(1); n_mag(:); n_mag(end) ];
        set( maghndl.Bode_DT_negfreq_Line(1), ...
            'xdata', plot_freq, ...
            'ydata', plot_mag, ...
            'color', 1-get(maghndl.ax,'color') );
      end
      if ishandle( maghndl.Bode_DT_negfreq_Line(2) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(2) )
        n_freq = BodeFreqs(negfreq_ndxs_2);
        n_mag = 10.^( BodeMag(negfreq_ndxs_2)/20 );
        plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ];
        plot_mag = [ n_mag(1); n_mag(:) ];
        set( maghndl.Bode_DT_negfreq_Line(2), ...
            'xdata', plot_freq, ...
            'ydata', plot_mag, ...
            'color', 1-get(maghndl.ax,'color') );
      end
    end
  end
 
  if get( maghndl.BodeHZChkbox,'Value')
    set( maghndl.Bode_Line,'Xdata', BodeFreqs/2/pi );
    set( maghndl.unity_gain_line, ...
        'xdata', BodeFreqs([1,end])/2/pi,'ydata', [0 0] );
    if ( dom_ndx == 2 ) ...
      && isequal( 2, numel(maghndl.Bode_DT_negfreq_Line) )
      if ishandle( maghndl.Bode_DT_negfreq_Line(1) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(1) )
        n_freq = BodeFreqs(negfreq_ndxs_1);
        plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts] /(2*pi);
        set( maghndl.Bode_DT_negfreq_Line(1),'Xdata', plot_freq );
      end
      if ishandle( maghndl.Bode_DT_negfreq_Line(2) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(2) )
        n_freq = BodeFreqs(negfreq_ndxs_2);
        plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ]/(2*pi);
        set( maghndl.Bode_DT_negfreq_Line(2),'Xdata', plot_freq );
      end
    end
  else
    set( maghndl.Bode_Line,'Xdata', BodeFreqs );
    set( maghndl.unity_gain_line, ...
        'Xdata', BodeFreqs([1,end]),'ydata', [0 0] );
    if ( dom_ndx == 2 ) ...
      && isequal( 2, numel(maghndl.Bode_DT_negfreq_Line) )
      if ishandle( maghndl.Bode_DT_negfreq_Line(1) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(1) )
        n_freq = BodeFreqs(negfreq_ndxs_1);
        plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts];
        set( maghndl.Bode_DT_negfreq_Line(1),'Xdata', plot_freq );
      end
      if ishandle( maghndl.Bode_DT_negfreq_Line(2) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(2) )
        n_freq = BodeFreqs(negfreq_ndxs_2);
        plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ];
        set( maghndl.Bode_DT_negfreq_Line(2),'Xdata', plot_freq );
      end
    end
  end
  
  % Remove the word "UNSTABLE" from the title.
  curr_title = get( maghndl.ax_title,'string');
  ndx = strfind( curr_title,' ... UNSTABLE');
  if ~isempty(ndx) && ( ndx(1) > 1 )
    set( maghndl.ax_title, ...
        'string', curr_title(1:ndx(1)-1), ...
        'color', [1 1 1]-get(temp0(1,1),'color'), ...
        'fontweight','normal');
  end
  if numel(BodeMag) < 2
    set( maghndl.Bode_Line,'Visible','off');
    if ( dom_ndx == 2 ) ...
      && isequal( 2, numel(maghndl.Bode_DT_negfreq_Line) )
      if ishandle( maghndl.Bode_DT_negfreq_Line(1) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(1) )
        set( maghndl.Bode_DT_negfreq_Line(1),'Visible','off');
      end
      if ishandle( maghndl.Bode_DT_negfreq_Line(2) ) ...
        && ~isempty( maghndl.Bode_DT_negfreq_Line(2) )
        set( maghndl.Bode_DT_negfreq_Line(2),'Visible','off');
      end
    end
    set( maghndl.ax_title, ...
         'string', [ curr_title ' ... UNSTABLE'], ...
         'color',[1 0 0], ...
         'fontweight','bold');
  else
    set(maghndl.Bode_Line,'Visible','on');
    if dom_ndx == 2
      if ( temp0(5,1) > 0 ) && isequal( 1, ishandle(temp0(5,1)) )
        set(temp0(5,1),'Visible','on');
      end
      if ( temp0(5,2) > 0 ) && isequal( 1, ishandle(temp0(5,2)) )
        set(temp0(5,2),'Visible','on');
      end
    end
  end
  if isempty(FrqSelNdx)
    FrqSelNdx = 0;
  end
  % warning off
  if ( numel(BodeMag) < 2 ) || ( tempNdx ~= FrqSelNdx )
    set(temp0(3,1),'Xdata',[],'Ydata',[],'Visible', 'off' );
    YLim = get( maghndl.ax,'ylim');
    if diff(YLim) < 1e-4
      YLim = [ YLim(1)-6e-5, YLim(2)+6e-5 ];
      set(maghndl.ax,'ylim',YLim)
    end
    if get(temp0(8,1),'Value')
       set( get(maghndl.ax,'xlabel'),'string','Frequency, hertz');
    else
       set( get(maghndl.ax,'xlabel'),'string','Frequency, rad/s');
    end
  else
    if get(temp0(7,1),'Value')
      set(temp0(3,1),'Ydata',BodeMag(tempNdx), ...
                     'Visible', tempVis );
    else
      set(temp0(3,1),'Ydata',10^(BodeMag(tempNdx)/20), ...
                   'Visible', tempVis );
    end
    
    YLim = get( maghndl.ax,'ylim');
    if diff(YLim) < 1e-4
      YLim = [ YLim(1)-6e-5, YLim(2)+6e-5 ];
      set(maghndl.ax,'ylim',YLim)
    end
   
    if get(temp0(8,1),'Value')
       set(temp0(3,1),'Xdata', BodeFreqs(tempNdx)/2/pi )
     else
      set(temp0(3,1),'Xdata', BodeFreqs(tempNdx) )
    end
  end
  
  sel_h = maghndl.Bode_selection_marker;
  if ~isempty(sel_h)
    if ~isempty( PZG(dom_ndx).FrqSelNdx ) ...
      &&( PZG(dom_ndx).FrqSelNdx > 0 ) ...
      &&( PZG(dom_ndx).FrqSelNdx <= numel(BodeMag) )
      if ~isempty(PZG(dom_ndx).FrqSelNdx)
        if DBchk
          sel_data_y = BodeMag(PZG(dom_ndx).FrqSelNdx);
        else
          sel_data_y = 10^( BodeMag(PZG(dom_ndx).FrqSelNdx)/20 );
        end
        if HZchk
          sel_data_x = BodeFreqs(PZG(dom_ndx).FrqSelNdx)/2/pi;
        else
          sel_data_x = BodeFreqs(PZG(dom_ndx).FrqSelNdx);
        end
        set( sel_h(1),'xdata', sel_data_x,'ydata', sel_data_y );
        if PZG(dom_ndx).pzg_show_frf_computation
          set( sel_h,'visible','on')
        else
          set( sel_h,'visible','off')
        end
      else
        set( sel_h,'xdata', [],'ydata', [],'visible','off');
      end
    end
  else
    set( sel_h,'xdata', [],'ydata', [],'visible','off');
  end
end

freqserv('refresh_plot_h', gcf0 );
pzg_seltxt(dom_ndx)

title_str = get( maghndl.ax_title,'string');
unstab_ndx = strfind( title_str,'... UNSTABLE');
if ~isempty(unstab_ndx) && ( unstab_ndx(1) > 1 )
  title_str = title_str(1:unstab_ndx(1)-1);
end
set( maghndl.ax_title,'string', title_str,'color',1-get(maghndl.ax,'color'));
if numel(BodeMag) <= 1
  title_str = [ title_str '... UNSTABLE'];
  set( maghndl.ax_title,'string', title_str,'color','r');
end

x_lim = get( maghndl.ax,'xlim');
y_lim = get( maghndl.ax,'ylim');
maghndl.ax_xlim = x_lim;
maghndl.ax_ylim = y_lim;
setappdata( gcf0,'hndl', maghndl );
pzg_cphndl( gcf0, dom_ndx, magploth_ndx );
pzg_bkup


% ----------------------------------------------------------------------
% The PHASE PLOT
gcf0 = pzg_fndo( dom_ndx, phsploth_ndx,'fig_h');
if isempty(gcf0)
  gcf0 = findobj( allchild(0),'type','figure','name',[ PlotName ' Phase']);
  if ~isempty(gcf0)
    delete(gcf0)
    gcf0 = [];
  end
end
if ~isempty(gcf0) && ~isappdata( gcf0,'hndl')
  delete(gcf0)
  gcf0 = [];
end
temp0 = [];
if ~isempty(gcf0)
  temp0 = get( gcf0,'userdata');
  if isempty(temp0)
    delete(gcf0)
    gcf0 = [];
  end
end

if isempty(temp0)
  % Plot doesn't yet exist:
  del_str = ...
    ['global PZG,' ...
     'PZG(' num2str(dom_ndx) ').plot_h{' num2str(phsploth_ndx) '}=[];' ...
     'pzg_bkup;'];
      
  if isempty(Position)
    gcf0 = figure('units','normalized', ...
      'menubar','figure', ...
      'numbertitle','off', ...
      'integerhandle','off', ...
      'Name',[ PlotName ' Phase'], ...
      'tag','PZGUI plot', ...
      'Color','k', ...
      'Interruptible','on', ...
      'handlevisibility','callback', ...
      'dockcontrols','off', ...
      'visible','off', ...
      'deletefcn', del_str );
  else
    ScrSize = get( 0,'screensize');
    PhasePosition = Position;
    if max(PhasePosition) > 1
      PhasePosition(2) = PhasePosition(2)-PhasePosition(4)-100;
      PhasePosition([1;3]) = PhasePosition([1;3])/ScrSize(3);
      PhasePosition([2;4]) = PhasePosition([2;4])/ScrSize(4);
    else
      PhasePosition(2) = PhasePosition(2) - 0.32;
    end
    gcf0 = figure('units','normalized', ...
      'position', PhasePosition, ...
      'menubar','figure', ...
      'numbertitle','off', ...
      'integerhandle','off', ...
      'Name',[ PlotName ' Phase'], ...
      'tag','PZGUI plot', ...
      'Color','k', ...
      'Interruptible','on', ...
      'handlevisibility','callback', ...
      'dockcontrols','off', ...
      'visible','off', ...
      'deletefcn', del_str, ...
      'windowbuttonmotionfcn', ...
        ['try,' ...
         'if pzg_disab,return,end,' ...
         'tempfs=freqserv(gcbf);pzg_ptr;' ...
         'catch,pzg_err(''mouse motion bode phs'');' ...
         'end,clear tempfs;']);
  end

  % Put menu items in the figure's menubar.
  opt_menu_h = ...
    uimenu('parent', gcf0, ...
           'label', 'PZGUI OPTIONS', ...
           'tag','pzgui_options_menu');
  dom_str = {'s','z'};
  pzg_menu( opt_menu_h, dom_str{dom_ndx} );
  phshndl = getappdata( gcf0,'hndl');
    
  phshndl.plot_name = get( gcf0,'name');
  phshndl.dom_ndx = dom_ndx;
  if isempty( strfind( lower(phshndl.plot_name),'closed') )
    phshndl.ploth_ndx = 2;
  else
    phshndl.ploth_ndx = 4;
  end
  phshndl.ax = axes('parent',gcf0,'xgrid','on','ygrid','on', ...
              'xscale','log','nextplot','add','tag','pzg bode plot axes');
  phshndl.ax_title = get(phshndl.ax,'title');
  phshndl.ax_xlabel = get(phshndl.ax,'xlabel');
  phshndl.ax_ylabel = get(phshndl.ax,'ylabel');
  drawnow
  if ~LogChk
    set( phshndl.ax,'xscale','linear')
  end
  if ~isempty(BtnDwnFn) 
    set( gcf0,'WindowButtonDownFcn', BtnDwnFn );
  end
  temp0 = zeros([10 2]);
  tempVis1 = 'on';
  if (numel(BodeFreqs)<2) || (numel(BodePhs)<2)
    BodeFreqs = 1;
    BodePhs = 0;
    tempNdx = 1;
    tempVis = 'off';
    tempVis1 = 'off';
  end
  BodeFreqs_hz = BodeFreqs/2/pi;
  
  if ~HZchk
    temp0(2,2) = ...
      plot( BodeFreqs([1,end]), 180*[1 1],'c--', ...
               'LineWidth',0.5, ...
               'parent', phshndl.ax, ...
               'Visible',tempVis1, ...
               'Tag','positive 180-degree line');
    phshndl.positive_180degree_line = temp0(2,2);
    temp0(3,2) = ...
      plot( BodeFreqs([1,end]), -180*[1 1],'c--', ...
               'LineWidth',0.5, ...
               'parent', phshndl.ax, ...
               'Visible',tempVis1, ...
               'Tag','negative 180-degree line');
    phshndl.negative_180degree_line = temp0(3,2);
    temp0(4,2) = ...
      plot( BodeFreqs([1,end]), [0 0],'c', ...
               'LineWidth',0.5, ...
               'parent', phshndl.ax, ...
               'Visible',tempVis1, ...
               'Tag','zero-degree line');
    phshndl.zero_degree_line = temp0(4,2);
  else
    temp0(2,2) = ...
      plot( BodeFreqs_hz([1,end]), 180*[1 1],'c--', ...
        'LineWidth',0.5, ...
        'parent', phshndl.ax, ...
        'Visible',tempVis1, ...
        'Tag','positive 180-degree line');
    phshndl.positive_180degree_line = temp0(2,2);
    temp0(3,2) = ...
      plot( BodeFreqs_hz([1,end]), -180*[1 1],'c--', ...
        'LineWidth',0.5, ...
        'parent', phshndl.ax, ...
        'Visible',tempVis1, ...
        'Tag','negative 180-degree line');
    phshndl.negative_180degree_line = temp0(3,2);
    temp0(4,2) = ...
      plot( BodeFreqs_hz([1,end]), [0 0],'c', ...
        'LineWidth',0.5, ...
        'parent', phshndl.ax, ...
        'Visible',tempVis1, ...
        'Tag','zero-degree line');
    phshndl.zero_degree_line = temp0(4,2);
  end
  
  if ~isempty( strfind( lower(PlotName),'open') )
    phshndl.TFE_Delta_Phs_line = ...
      plot( 1, 0, ...
        'color','g', ...
        'linestyle',':', ...
        'linewidth', 2, ...
        'visible','off', ...
        'parent', phshndl.ax, ...
        'tag','TFE Delta Phs line');
    set( phshndl.TFE_Delta_Phs_line,'xdata', [],'ydata', [] );
    phshndl.TFE_Phs_line = ...
      plot( 1, 1, ...
         'color','g', ...
         'linewidth', 1.5, ...
         'parent', phshndl.ax, ...
         'tag','TFE Phs line');
    set( phshndl.TFE_Phs_line,'xdata', [],'ydata', [] );
  else
    phshndl.TFE_Delta_Phs_line = [];
    phshndl.TFE_Phs_line = [];
  end
  
  % Wrap the phase within 2*pi section.
  if ~pzg_isunwrp
    BodePhs = (180/pi) * angle( exp( (1i*pi/180)*BodePhs ) );
  end
  
  if ~HZchk
    temp0(2,1) = ...
      plot( BodeFreqs, BodePhs,'r', ...
               'LineWidth',2.5, ...
               'parent', phshndl.ax, ...
               'Visible',tempVis1, ...
               'Tag','Bode Line');
    phshndl.Bode_Line = temp0(2,1);
    if ~isfield( phshndl,'Bode_DT_negfreq_Line')
      phshndl.Bode_DT_negfreq_Line = [];
    end
    if dom_ndx == 2
      if numel(BodePhs) > 2
        n_freq = BodeFreqs(negfreq_ndxs_1);
        n_phs = BodePhs(negfreq_ndxs_1);
        plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts] * freqmult;
        plot_phs = [ 0; n_phs(:); 0 ];
        temp0(5,1) = ...
          plot( plot_freq, plot_phs, ...
                   'color', 1-get(phshndl.ax,'color'), ...
                   'linewidth', 3, ...
                   'linestyle','--', ...
                   'parent', phshndl.ax, ...
                   'Visible', tempVis1, ...
                   'Tag','Bode DT negfreq Line');
        n_freq = BodeFreqs(negfreq_ndxs_2);
        n_phs = BodePhs(negfreq_ndxs_2);
        plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ] * freqmult;
        plot_phs = [ 0; n_phs(:) ];
        temp0(5,2) = ...
          plot( plot_freq, plot_phs, ...
                   'color', 1-get(phshndl.ax,'color'), ...
                   'linewidth', 3, ...
                   'linestyle','--', ...
                   'parent', phshndl.ax, ...
                   'Visible', tempVis1, ...
                   'Tag','Bode DT negfreq Line');
        phshndl.Bode_DT_negfreq_Line = temp0(5,1:2);
      else
        temp0(5,1) = ...
          plot( 1, 0, ...
                   'color', 1-get(phshndl.ax,'color'), ...
                   'linewidth', 3, ...
                   'linestyle','--', ...
                   'parent', phshndl.ax, ...
                   'Visible', tempVis1, ...
                   'Tag','Bode DT negfreq Line');
        temp0(5,2) = ...
          plot( 1, 0, ...
                   'color', 1-get(phshndl.ax,'color'), ...
                   'linewidth', 3, ...
                   'linestyle','--', ...
                   'parent', phshndl.ax, ...
                   'Visible', tempVis1, ...
                   'Tag','Bode DT negfreq Line');
        phshndl.Bode_DT_negfreq_Line = temp0(5,1:2);
      end
    end
    if HZchk && ( numel(BodeFreqs) > 1 )
      set( phshndl.ax,'xlim', [BodeFreqs(1) BodeFreqs(end)]/2/pi );
      phshndl.ax_xlim = [BodeFreqs(1) BodeFreqs(end)]/2/pi;
    elseif numel(BodeFreqs) > 1
      set( phshndl.ax,'xlim', [BodeFreqs(1) BodeFreqs(end)] );
      phshndl.ax_xlim = [BodeFreqs(1) BodeFreqs(end)];
    end
  else
    phshndl.Bode_Line = ...
      plot( BodeFreqs_hz, BodePhs,'r', ...
        'LineWidth', 3, ...
        'parent', phshndl.ax, ...
        'Visible',tempVis1, ...
        'Tag','Bode Line');
    if ~isfield( phshndl,'Bode_DT_negfreq_Line')
      phshndl.Bode_DT_negfreq_Line = [];
    end
    if dom_ndx == 2
      if numel(BodePhs) > 2
        n_freq = BodeFreqs(negfreq_ndxs_1);
        n_phs = BodePhs(negfreq_ndxs_1);
        plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts] * freqmult;
        plot_phs = [ 0; n_phs(:); 0 ];
        if ~isequal( 2, numel(phshndl.Bode_DT_negfreq_Line) )
          temp0(5,1) = ...
            plot( plot_freq, plot_phs, ...
              'color', 1-get(phshndl.ax,'color'), ...
              'linewidth', 2, ...
              'linestyle','--', ...
              'parent', phshndl.ax, ...
              'Visible', tempVis1, ...
              'Tag','Bode DT negfreq Line');
          phshndl.Bode_DT_negfreq_Line = temp0(5,1);
        else
          set( temp0(5,1), ...
            'xdata', plot_freq, ...
            'ydata', plot_phs, ...
            'color', 1-get(phshndl.ax,'color'), ...
            'Visible', tempVis1 );
        end
        n_freq = BodeFreqs(negfreq_ndxs_2);
        n_phs = BodePhs(negfreq_ndxs_2);
        plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ] * freqmult;
        plot_phs = [ 0; n_phs(:) ];
        if ~isequal( 2, numel(phshndl.Bode_DT_negfreq_Line) )
          temp0(5,2) = ...
            plot( plot_freq, plot_phs, ...
              'color', 1-get(phshndl.ax,'color'), ...
              'linewidth', 2, ...
              'linestyle','--', ...
              'parent', phshndl.ax, ...
              'Visible', tempVis1, ...
              'Tag','Bode DT negfreq Line');
          phshndl.Bode_DT_negfreq_Line = temp0(5,1:2);
        else
          set( temp0(5,1), ...
            'xdata', plot_freq, ...
            'ydata', plot_phs, ...
            'color', 1-get(phshndl.ax,'color'), ...
            'Visible', tempVis1 );
        end
      else
        if ~isequal( 2, numel(phshndl.Bode_DT_negfreq_Line) )
          temp0(5,1) = ...
            plot( 1, 0, ...
              'color', 1-get(phshndl.ax,'color'), ...
              'linewidth', 2, ...
              'linestyle','--', ...
              'parent', phshndl.ax, ...
              'Visible', tempVis1, ...
              'Tag','Bode DT negfreq Line');
          temp0(5,2) = ...
            plot( 1, 0, ...
              'color', 1-get(phshndl.ax,'color'), ...
              'linewidth', 2, ...
              'linestyle','--', ...
              'parent', phshndl.ax, ...
              'Visible', tempVis1, ...
              'Tag','Bode DT negfreq Line');
          phshndl.Bode_DT_negfreq_Line = temp0(5,1:2);
        end
        set( temp0(5,1),'xdata',[],'ydata',[],'visible','off');
        set( temp0(5,2),'xdata',[],'ydata',[],'visible','off');
      end
    end
    if numel(BodeFreqs) > 1
      set( phshndl.ax,'xlim', [BodeFreqs_hz(1) BodeFreqs_hz(end)] );
      phshndl.ax_xlim = [BodeFreqs_hz(1) BodeFreqs_hz(end)];
    end
  end
 
  temp0(1,1) = phshndl.ax;
  set( phshndl.ax,'Color','k','XColor','w','YColor','w');
  ScrSize = get(0,'ScreenSize');
  % warning off
  YLim = [ min( -200, min(BodePhs)-10 )  max( 200, max(BodePhs)+10 ) ];
  if diff(YLim) < 1
    YLim = [ YLim(1)-1 YLim(2)+1 ];
  end
  if ScrSize(3) > 1024
    set( phshndl.ax, ...
          'Interruptible','on', ...
          'FontSize', 10, ...
          'YLim', YLim, ...
          'position',[0.14 0.21 0.77 0.70] );
  else
    set( phshndl.ax, ...
        'Interruptible','on', ...
        'FontSize', 8, ...
        'YLim', YLim, ...
        'position',[0.14 0.21 0.77 0.70] );
  end
  if ~HZchk
    temp0(3,1) = ...
      plot( BodeFreqs(tempNdx), BodePhs(tempNdx),'co', ...
           'MarkerSize', 7, ...
           'LineWidth', 2.5, ...
           'tag','Bode selection marker', ...
           'Visible',tempVis, ...
           'parent', phshndl.ax);
  else
    temp0(3,1) = ...
      plot( BodeFreqs(tempNdx)/2/pi, BodePhs(tempNdx),'co', ...
           'MarkerSize', 7, ...
           'LineWidth', 2.5, ...
           'tag','Bode selection marker', ...
           'Visible', tempVis, ...
           'parent', phshndl.ax);
  end
  phshndl.Bode_selection_marker = temp0(3,1);  
  
  temp0(6,1) = phshndl.ax_xlabel;
  set( phshndl.ax_title,'string',[ PlotTitle ' Bode Phase'],'Color',[1 1 1] );
  set( phshndl.ax_ylabel,'Color',[1 1 1],'string','Phase (degrees)');
  
  temp0(7,1) = ...
    uicontrol(gcf0,'Style','checkbox', ...
      'Value', UnwrapChk, ...
      'String','unwrap', ...
      'Units','normalized', ...
      'position',[0.005 0.055 0.150 0.050], ...
      'HorizontalAlignment','Left', ...
      'BackgroundColor',[1 .65 .65], ...
      'ForegroundColor',[0 0 0], ...
      'UserData',BodePhs, ...
      'Tag','UnwrapChkbox', ...
      'tooltipstring','angle data "unwrapped", instead of "wrapped"', ...
      'Visible','On', ...
      'callback',['try,pzgcalbk(gcbo,''unwrap checkbox'');' ...
                  'catch,pzg_err(''Unwrap checkbox'');end']);
  phshndl.UnwrapChkbox = temp0(7,1);
  
  temp0(8,1) = ...
    uicontrol(gcf0,'Style','checkbox', ...
      'Value',HZchk, ...
      'String','Hz', ...
      'Units','normalized', ...
      'position',[0.005 0.005 0.100 0.050], ...
      'HorizontalAlignment','Left', ...
      'BackgroundColor',[1 .65 .65], ...
      'ForegroundColor',[0 0 0], ...
      'UserData',BodeFreqs, ...
      'Tag','BodeHZChkbox', ...
      'tooltipstring','x-axis in hertz, instead of rad/second', ...
      'Visible','On', ...
      'Callback',['try,pzgcalbk(gcbo,''Hz checkbox'');' ...
                  'catch,pzg_err(''Hz checkbox'');end']);
  phshndl.BodeHZChkbox = temp0(8,1);
  
  phshndl.BodeAxesLinLogChkbox = ...
    uicontrol(gcf0,'Style','checkbox', ...
      'Value',LogChk, ...
      'String','Log', ...
      'Units','normalized', ...
      'position',[0.115 0.005 0.120 0.050], ...
      'HorizontalAlignment','Right', ...
      'BackgroundColor',[1 .65 .65], ...
      'ForegroundColor',[0 0 0], ...
      'Tag','BodeAxesLinLogChkbox', ...
      'tooltipstring','x-axis log-scaled, instead of linear', ...
      'Visible','On', ...
      'Callback',['try,pzgcalbk(gcbo,''Log checkbox'');' ...
                  'catch,pzg_err(''Log checkbox'');end']);
   
  set( gcf0,'UserData', temp0 );
  
  % Adjust the background color.
  figopts('apply_default_color', gcf0 )
  
  % Set xlimit to same range as the magnitude plot.
  set( phshndl.ax,'xlim', maghndl.ax_xlim );
  
  phshndl.ax_xlim = get( phshndl.ax,'xlim');
  phshndl.ax_ylim = get( phshndl.ax,'ylim');
  setappdata( gcf0,'hndl', phshndl );
  pzg_cphndl( gcf0, dom_ndx, phsploth_ndx );
  pzg_bkup

  pzg_prvw(dom_ndx);
  
  set( gcf0,'visible','on');
  pause(0.1)
  set( gcf0,'position', PhasePosition )
  freqserv('refresh_plot_h', gcf0 );
  pzg_seltxt(dom_ndx);
  
  if ~isempty( PZG(dom_ndx).TFEFreqs )
    if dom_ndx == 1
      updatepl;
    else
      dupdatep;
    end
  end
  
else
  % Phase plot already exists:
  phshndl = getappdata( gcf0,'hndl');
    
  % Unwrap the phase within 2*pi sections if the 
  % frequency data goes beyond Nyquist frequency.
  %unwrapped_phs = pzg_unwrap( BodeFreqs, BodePhs, dom_ndx, get(gcf0,'name') );
  unwrapped_phs = BodePhs;
  if UnwrapChk
    BodePhs = unwrapped_phs;
  else
    % "Wrap" the phase.
    BodePhs = (180/pi) * angle( exp( (1i*pi/180)*unwrapped_phs ) );
  end
  sel_h = phshndl.Bode_selection_marker;
  if ~isempty(sel_h)
    if ~isempty( PZG(dom_ndx).FrqSelNdx ) ...
      &&( PZG(dom_ndx).FrqSelNdx > 0 ) ...
      &&( PZG(dom_ndx).FrqSelNdx <= numel(BodePhs) )
      if ~isempty(PZG(dom_ndx).FrqSelNdx)
        sel_data_y = BodePhs(PZG(dom_ndx).FrqSelNdx);
        if HZchk
          sel_data_x = BodeFreqs(PZG(dom_ndx).FrqSelNdx)/2/pi;
        else
          sel_data_x = BodeFreqs(PZG(dom_ndx).FrqSelNdx);
        end
        set( sel_h(1),'xdata', sel_data_x,'ydata', sel_data_y );
        if PZG(dom_ndx).pzg_show_frf_computation
          set( sel_h,'visible','on')
        else
          set( sel_h,'visible','off')
        end
      else
        set( sel_h,'xdata', [],'ydata', [],'visible','off');
      end
    end
  else
    set( sel_h,'xdata', [],'ydata', [],'visible','off');
  end
  
  if HZchk
    set(phshndl.Bode_Line,'Xdata',BodeFreqs/2/pi,'Ydata',BodePhs);
    if dom_ndx == 2
      if ( temp0(5,1) > 0 ) && isequal( 1, ishandle(temp0(5,1)) )
        n_freq = BodeFreqs(negfreq_ndxs_1);
        n_phs = BodePhs(negfreq_ndxs_1);
        plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts] /(2*pi);
        plot_phs = [ 0; n_phs(:); 0 ];
        set( temp0(5,1), ...
            'xdata', plot_freq, ...
            'ydata', plot_phs, ...
            'color', 1-get(phshndl.ax,'color') );
      end
      if ( temp0(5,2) > 0 ) && isequal( 1, ishandle(temp0(5,2)) )
        n_freq = BodeFreqs(negfreq_ndxs_2);
        n_phs = BodePhs(negfreq_ndxs_2);
        plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ] /(2*pi);
        plot_phs = [ 0; n_phs(:) ];
        set( temp0(5,2), ...
            'xdata', plot_freq, ...
            'ydata', plot_phs, ...
            'color', 1-get(phshndl.ax,'color') );
      end
    end
    if sum( ishandle(temp0(2:4,2) ) ) == 3
      set(temp0(2,2),'Xdata',BodeFreqs([1,end])/2/pi,'Ydata', 180*[1 1] );
      set(temp0(3,2),'Xdata',BodeFreqs([1,end])/2/pi,'Ydata',-180*[1 1] );
      set(temp0(4,2),'Xdata',BodeFreqs([1,end])/2/pi,'Ydata', [0 0] );
    end
  else
    set(phshndl.Bode_Line,'Xdata',BodeFreqs,'Ydata',BodePhs);
    if dom_ndx == 2
      if( temp0(5,1) > 0 ) && isequal( 1, ishandle(temp0(5,1)) )
        n_freq = BodeFreqs(negfreq_ndxs_1);
        n_phs = BodePhs(negfreq_ndxs_1);
        if numel(n_phs) > 2
          plot_freq = [ pi/PZG(2).Ts; n_freq(:); 2*pi/PZG(2).Ts ];
          plot_phs = [ 0; n_phs(:); 0 ];
          set( temp0(5,1), ...
              'xdata', plot_freq, ...
              'ydata', plot_phs, ...
              'color', 1-get(phshndl.ax,'color') );
        end
      end
      if( temp0(5,2) > 0 ) && isequal( 1, ishandle(temp0(5,2)) )
        n_freq = BodeFreqs(negfreq_ndxs_2);
        n_phs = BodePhs(negfreq_ndxs_2);
        if numel(n_phs) > 2
          plot_freq = [ 3*pi/PZG(2).Ts; n_freq(:) ];
          plot_phs = [ 0; n_phs(:) ];
          set( temp0(5,2), ...
              'xdata', plot_freq, ...
              'ydata', plot_phs, ...
              'color', 1-get(phshndl.ax,'color') );
        end
      end
    end
    if sum( ishandle(temp0(2:4,2)) ) == 3
      set( temp0(2,2),'Xdata', BodeFreqs([1,end]),'Ydata', 180*[1 1] );
      set( temp0(3,2),'Xdata',BodeFreqs([1,end]),'Ydata',-180*[1 1] );
      set( temp0(4,2),'Xdata',BodeFreqs([1,end]),'Ydata', [0 0] );
    end
  end
 
  % Remove the word "UNSTABLE" from the title.
  curr_title = get( phshndl.ax_title,'string');
  ndx = strfind( curr_title,' ... UNSTABLE');
  if ~isempty(ndx) && ( ndx(1) > 1 )
    set( phshndl.ax_title, ...
        'string', curr_title(1:ndx(1)-1), ...
        'color', [1 1 1]-get(temp0(1,1),'color'), ...
        'fontweight','normal');
  end
  if numel(BodePhs) < 2
    set( phshndl.Bode_Line,'Visible','off');
    if dom_ndx == 2
      if ( temp0(5,1) > 0 ) && isequal( 1, ishandle(temp0(5,1)) )
        set(temp0(5,1),'Visible','off');
      end
      if ( temp0(5,2) > 0 ) && isequal( 1, ishandle(temp0(5,2)) )
        set(temp0(5,2),'Visible','off');
      end
    end
    %curr_title = get( phshndl.ax_title,'string');
    set( phshndl.ax_title, ...
         'string', [ curr_title ' ... UNSTABLE'], ...
         'color',[1 0 0], ...
         'fontweight','bold');
  else
    set(phshndl.Bode_Line,'Visible','on');
    if dom_ndx == 2
      if ( temp0(5,1) > 0 ) && isequal( 1, ishandle(temp0(5,1)) )
        set(temp0(5,1),'Visible','on');
      end
      if ( temp0(5,2) > 0 ) && isequal( 1, ishandle(temp0(5,2)) )
        set(temp0(5,2),'Visible','on');
      end
    end
  end
  
  phshndl.ax_xlim = get( phshndl.ax,'xlim');
  phshndl.ax_ylim = get( phshndl.ax,'ylim');
  setappdata( gcf0,'hndl', phshndl );
  pzg_cphndl( gcf0, dom_ndx, phsploth_ndx );
  pzg_bkup
end

pzg_updtfilt(dom_ndx);
freqserv('refresh_plot_h', gcf0 );
pzg_seltxt(dom_ndx)

title_str = get( phshndl.ax_title,'string');
unstab_ndx = strfind( title_str,'... UNSTABLE');
if ~isempty(unstab_ndx) && ( unstab_ndx(1) > 1 )
  title_str = title_str(1:unstab_ndx(1)-1);
end
set( phshndl.ax_title,'string', title_str,'color',1-get(phshndl.ax,'color'));
if numel(BodePhs) <= 1
  title_str = [ title_str '... UNSTABLE'];
  set( phshndl.ax_title,'string', title_str,'color','r');
end

x_lim = get( phshndl.ax,'xlim');
y_lim = get( phshndl.ax,'ylim');
phshndl.ax_xlim = x_lim;
phshndl.ax_ylim = y_lim;
setappdata( gcf0,'hndl', phshndl );

pzg_cphndl( gcf0, dom_ndx, phsploth_ndx );
pzg_bkup

return
