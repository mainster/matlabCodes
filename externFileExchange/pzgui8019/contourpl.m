function  contourpl( request_str, dom_ndx )
% Creates and services the contour plot that accompanies the Nyquist plot.

% The following copyrighted m-files comprise the PZGUI tool:
%    ** The contents of these files may not be included **
%    **  in any other program without explicit written  **
%    **    consent from the author, Mark A. Hopkins     **
%     bodepl.m        pzg_bodex.m     pzg_islink.m     pzg_seltxt.m
%     contents.m      pzg_box.m       pzg_islogx.m     pzg_tools.m
%     contourpl.m     pzg_c2d.m       pzg_isunwrp.m    pzg_tpwr.m
%     dpzgui.m        pzg_cntr.m      pzg_lims.m       pzg_txan.m
%     dupdatep.m      pzg_cphndl.m    pzg_menu.m       pzg_unre.m
%     figopts.m       pzg_d2c.m       pzg_moda.m       pzg_unwrap.m
%     fr_disp.m       pzg_disab.m     pzg_onoff.m      pzg_updtfilt.m
%     freqserv.m      pzg_efmt.m      pzg_pfesim.m     pzg_xtrfrq.m
%     gainfilt.m      pzg_err.m       pzg_prvw.m       pzgcalbk.m
%     helpserv.m      pzg_errvis.m    pzg_ptr.m        pzgui.m
%     ldlgfilt.m      pzg_fndo.m      pzg_recovr.m     pzmvserv.m
%     nicholpl.m      pzg_gle.m       pzg_reptxt.m     resppl.m
%     nyqistpl.m      pzg_grid.m      pzg_res.m        rlocuspl.m
%     pidfilt.m       pzg_inzpk.m     pzg_rsppfe.m     sensplot.m
%     pz_move.m       pzg_isdby.m     pzg_rss.m        updatepl.m
%     pzg_bkup.m      pzg_ishzx.m     pzg_scifmt.m     updtpzln.m
%                                     pzg_sclpt.m      zmimntcpt.m
% (c) 1996 - 2014
%    by Professor Mark A. Hopkins, Ph.D.
%       Electrical and Microelectronic Engineering
%       Rochester Institute of Technology
%       Rochester NY, USA 14623        Email:  mark.hopkins@rit.edu
%
% SHAREWARE INFORMATION:
%               FREE, IF USED ONLY FOR EDUCATIONAL PURPOSES.
%   Otherwise:
%    (corporations, companies, and other for-profit users) 
%    Individual licenses -- US$200 per computer
%    Site license -- US$2000 per industrial site, any number of users
%    Make check payable to "Mark A. Hopkins", and remit to address above
% ----------------------------------------------------------------------
global PZG
if isempty(PZG) && ~pzg_recovr 
  return
end
evalin('base','global PZG')

if ( nargin < 2 ) || ( ~isequal( dom_ndx, 1 ) && ~isequal( dom_ndx, 2 ) )
  return
else
  cntr_fig_h = pzg_fndo( dom_ndx, 14,'fig_h');
  if isempty(cntr_fig_h)
    cntr_fig_h = ...
      findobj( allchild(0),'name', PZG(dom_ndx).NyqContourPlotName );
    delete(cntr_fig_h)
    cntr_fig_h = [];
  end
end

if ~isfield( PZG(dom_ndx),'cntr_data') ...
  || ~isstruct(PZG(dom_ndx).cntr_data) ...
  || ~isfield(PZG(dom_ndx).cntr_data,'upper_pseudo_cntr') ...
  || isempty(PZG(dom_ndx).cntr_data.upper_pseudo_cntr)
  return
end

xlim_init = [];
ylim_init = [];
if ~isempty(request_str) && ischar(request_str)
  switch lower(request_str) 
    case 'refresh plot'
      if isempty(cntr_fig_h)
        return
      end
    otherwise
  end
end

if isempty(cntr_fig_h)
  ScrSize = get( 0,'screensize');
  if ScrSize(3) > 1024
    ScrPos = [600 20 320 320];
  elseif ScrSize(3) > 800
    ScrPos = [560 20 300 300];
  else
    ScrPos = [350 20 280 280];
  end
  ScrPos([1,3]) = ScrPos([1,3])/ScrSize(3);
  ScrPos([2,4]) = ScrPos([2,4])/ScrSize(4);
  
  if ischar( PZG(dom_ndx).DefaultBackgroundColor )
    if strcmpi( PZG(dom_ndx).DefaultBackgroundColor,'k')
      bg_color = [ 0 0 0 ];
    else
      bg_color = [ 1 1 1 ];
    end
  end
  cntr_fig_h = ...
    figure('name', PZG(dom_ndx).NyqContourPlotName, ...
       'units','normalized', ...
       'position', ScrPos, ...
       'color', bg_color, ...
       'menubar','figure', ...
       'numbertitle','off', ...
       'integerhandle','off', ...
       'visible','on', ...
       'windowbuttonmotionfcn', ...
         ['try,' ...
          'if pzg_disab,return,end,' ...
          'tempfs=freqserv(gcbf);pzg_ptr;' ...
          'catch,pzg_err(''mouse motion nyq cntr'');end,clear tempfs;'], ...
       'WindowButtonDownFcn', ...
         ['try,if pzg_disab,return,end,' ...
          'tempfs=freqserv(gcbf,1);pzg_ptr;' ...
          'catch,pzg_err(''button down nyq cntr'');end,clear tempfs;'], ...
       'deletefcn', ...
         ['global PZG,' ...
          'if isfield(PZG,''plot_h'')' ...
          '&&isequal(14,numel(PZG(' num2str(dom_ndx) ').plot_h)),' ...
            'PZG(' num2str(dom_ndx) ').plot_h{14}=[];' ...
          'end'], ...
       'Interruptible','On', ...
       'dockcontrols','off', ...
       'tag','PZGUI plot', ...
       'handlevisibility','callback');
  opt_menu_h = ...
    uimenu('parent', cntr_fig_h, ...
           'label', 'PZGUI OPTIONS', ...
           'tag','pzgui_options_menu');
  if dom_ndx == 1
    pzg_menu( opt_menu_h,'s');
  else
    pzg_menu( opt_menu_h,'z');
  end
  cntrhndl = getappdata( cntr_fig_h,'hndl');
  cntrhndl.plot_name = get( cntr_fig_h,'name');
  cntrhndl.dom_ndx = dom_ndx;
  cntrhndl.ploth_ndx = 14;
  mod_hndl = 1;
else
  cntrhndl = getappdata( cntr_fig_h,'hndl');
  mod_hndl = 0;
end

if isfield( cntrhndl,'ax')
  gca0 = cntrhndl.ax;
  if strcmp( request_str,'refresh plot')
    xlim_init = PZG(dom_ndx).plot_h{14}.hndl.ax_xlim;
    ylim_init = PZG(dom_ndx).plot_h{14}.hndl.ax_ylim;
    set( gca0,'xlimmode','manual','ylimmode','manual');
  end
else
  gca0 = ...
    axes('parent', cntr_fig_h, ...
         'units','normalized', ...
         'color', bg_color, ...
         'xgrid','on', ...
         'xcolor', 1-bg_color, ...
         'xticklabelmode','manual', ...
         'xticklabel','', ...
         'ygrid','on', ...
         'ycolor', 1-bg_color, ...
         'yticklabelmode','manual', ...
         'yticklabel','', ...
         'nextplot','add', ...
         'tag','pzg nyquist contour plot axes');
  mod_hndl = 1;
  cntrhndl.ax = gca0;
  cntrhndl.ax_title = get(gca0,'title');
  cntrhndl.ax_xlabel = get(gca0,'xlabel');
  cntrhndl.ax_ylabel = get(gca0,'ylabel');
  
  if dom_ndx == 1
    set( cntrhndl.ax_title, ...
        'string','S-Plane Nyquist Contour  (NOT TO-SCALE)', ...
        'color', 1-bg_color )
    set( cntrhndl.ax_xlabel,'string','Real(S)')
    set( cntrhndl.ax_ylabel,'string','Imag(S)')
  else
    set( cntrhndl.ax_xlabel,'string','Real(Z)')
    set( cntrhndl.ax_ylabel,'string','Imag(Z)')
  end

  max_cntr = ...
    1.05 * max( max( real(PZG(dom_ndx).cntr_data.upper_pseudo_cntr) ), ...
          max( imag(PZG(dom_ndx).cntr_data.upper_pseudo_cntr) ) );
  if dom_ndx == 1
    xlim = [ -0.125*max_cntr  max_cntr ];
    ylim = 1.05*[ -max_cntr  max_cntr ];
  else
    xlim = 1.05 * [ -max_cntr  max_cntr ];
    ylim = 1.05 * [ -max_cntr  max_cntr ];
  end

  set( gca0,'xlim', xlim,'ylim', ylim );
  cntrhndl.ax_xlim = xlim;
  cntrhndl.ax_ylim = ylim;
end

if dom_ndx == 2
  if max( abs(PZG(2).cntr_data.upper_pseudo_cntr) ) < 1+1e-4
    set( cntrhndl.ax, ...
        'xtickmode','auto', ...
        'xticklabelmode','auto', ...
        'ytickmode','auto', ...
        'yticklabelmode','auto')
    set( cntrhndl.ax_title, ...
        'string','Z-Plane Nyquist Contour', ...
        'color', 1-get(cntrhndl.ax,'color') )
  else
    set( cntrhndl.ax, ...
        'xticklabelmode','manual', ...
        'xticklabel','', ...
        'yticklabelmode','manual', ...
        'yticklabel','')
    set( cntrhndl.ax_title, ...
        'string','Z-Plane Nyquist Contour  (NOT TO-SCALE)', ...
        'color', 1-get(cntrhndl.ax,'color') )
  end
end

if isfield(cntrhndl,'nyq_movie_pushbutton')
  movie_h = cntrhndl.nyq_movie_pushbutton;
else
  movie_h = findobj( cntr_fig_h,'tag','nyq movie pushbutton');
end
if isempty(movie_h)
  mod_hndl = 1;
  cntrhndl.nyq_movie_pushbutton = ...
    uicontrol( cntr_fig_h, ...
      'style','pushbutton', ...
      'units','normalized', ...
      'position',[0.005 0.005 0.30 0.045], ...
      'string','Nyquist "movie"', ...
      'tag','nyq movie pushbutton', ...
      'callback', ...
        ['global PZG,' ...
         'nyqistpl(''full out'');' ...
         'drawnow,' ...
         'set(PZG(' num2str(dom_ndx) ...
           ').plot_h{14}.hndl.nyq_movie_pushbutton,''enable'',''off'',' ...
           '''visible'',''off''),' ...
         'set(PZG(' num2str(dom_ndx) ...
           ').plot_h{14}.hndl.nyq_stop_movie_pushbutton,''enable'',''on'',' ...
           '''visible'',''on''),' ...
         'try,' ...
           'freqserv(''run nyquist movie'');' ...
         'catch,' ...
           'pzg_err(''Error running Nyquist movie '');' ...
         'end,' ...
         'set(PZG(' num2str(dom_ndx) ...
           ').plot_h{14}.hndl.nyq_movie_pushbutton,''enable'',''on'',' ...
           '''visible'',''on''),' ...
         'set(PZG(' num2str(dom_ndx) ...
           ').plot_h{14}.hndl.nyq_stop_movie_pushbutton,''enable'',''off'',' ...
           '''visible'',''off'')']);
end

if isfield(cntrhndl,'nyq_stop_movie_pushbutton')
  stop_h = cntrhndl.nyq_stop_movie_pushbutton;
else
  stop_h = findobj( cntr_fig_h,'tag','nyq stop movie pushbutton');
end
if isempty(stop_h)
  mod_hndl = 1;
  cntrhndl.nyq_stop_movie_pushbutton = ...
    uicontrol( cntr_fig_h, ...
      'style','pushbutton', ...
      'units','normalized', ...
      'backgroundcolor',[0.8 0.4 0.4], ...
      'position',[0.005 0.005 0.25 0.05], ...
      'string','Stop the Movie', ...
      'tag','nyq stop movie pushbutton', ...
      'visible','off', ...
      'callback', ...
        ['global PZG,' ...
         'PZG(1).stop_movie=1;' ...
         'PZG(2).stop_movie=1;' ...
         'set(gcbo,''visible'',''off'');']);
end

the_contour = PZG(dom_ndx).cntr_data.upper_pseudo_cntr;

if isfield(cntrhndl,'nyq_contour_all_parts')
  line_h = cntrhndl.nyq_contour_all_parts;
else
  line_h = findobj( gca0,'tag','nyq contour all parts');
end
if isempty(line_h)
  mod_hndl = 1;
  cntrhndl.nyq_contour_all_parts = ...
    plot( real(the_contour), imag(the_contour), ...
      'color','r', ...
      'linestyle','--', ...
      'marker','none', ...
      'markersize', 8, ...
      'parent', gca0, ...
      'linewidth', 1, ...
      'tag','nyq contour all parts');
else
  set( line_h, ...
      'xdata', real(the_contour), ...
      'ydata', imag(the_contour) );
end

if dom_ndx == 1
  flag_ndxs = find( abs(real(the_contour)) < 1e-10 );
else
  flag_ndxs = find( ( abs(the_contour) - 1 ) < 1e-9 );
end
gap_ndxs = find( diff(flag_ndxs) > 2 );
if isempty(gap_ndxs)
  the_contour_flagged = the_contour(flag_ndxs);
else
  the_contour_flagged = [];
  ndx0 = 1;
  for k = 1:numel(gap_ndxs)
    the_contour_flagged = ...
      [ the_contour_flagged; ...
        the_contour(ndx0:flag_ndxs(gap_ndxs(k))); NaN ]; %#ok<AGROW>
    ndx0 = flag_ndxs( gap_ndxs(k) + 1 );
  end
  the_contour_flagged = ...
    [ the_contour_flagged; the_contour(ndx0:end) ];
end

if isfield(cntrhndl,'nyq_contour_flag1_parts')
  line_h = cntrhndl.nyq_contour_flag1_parts;
else
  line_h = findobj( gca0,'tag','nyq contour flag1 parts');
end
if isempty(line_h)
  mod_hndl = 1;
  cntrhndl.nyq_contour_flag1_parts = ...
    plot( real(the_contour_flagged), ...
      imag(the_contour_flagged), ...
      'color','r', ...
      'linestyle','-', ...
      'linewidth', 3, ...
      'marker','none', ...
      'markersize', 8, ...
      'parent', gca0, ...
      'tag','nyq contour flag1 parts');
else
  set( line_h, ...
      'xdata', real(the_contour_flagged), ...
      'ydata', imag(the_contour_flagged) );
end

if isfield(cntrhndl,'nyq_conjugate_contour_all_parts')
  line_h = cntrhndl.nyq_conjugate_contour_all_parts;
else
  line_h = findobj( gca0,'tag','nyq conjugate contour all parts');
end
if isempty(line_h)
  mod_hndl = 1;
  cntrhndl.nyq_conjugate_contour_all_parts = ...
    plot( real(the_contour), ...
        -imag(the_contour), ...
       'color', 1-get(gca0,'color'), ...
       'linestyle','--', ...
       'linewidth', 1, ...
       'marker','none', ...
       'markersize', 8, ...
       'parent', gca0, ...
       'tag','nyq conjugate contour all parts');
else
  set( line_h, ...
      'xdata', real(the_contour), ...
      'ydata', -imag(the_contour), ...
      'color', 1-get(gca0,'color') );
end

if isfield(cntrhndl,'nyq_conjugate_contour_flag1_parts')
  line_h = cntrhndl.nyq_conjugate_contour_flag1_parts;
else
  line_h = findobj( gca0,'tag','nyq conjugate contour flag1 parts');
end
if isempty(line_h)
  mod_hndl = 1;
  cntrhndl.nyq_conjugate_contour_flag1_parts = ...
    plot( real(the_contour_flagged), ...
        -imag(the_contour_flagged), ...
       'color', 1-get(gca0,'color'), ...
       'linestyle','-', ...
       'linewidth', 3, ...
       'marker','none', ...
       'markersize', 8, ...
       'parent', gca0, ...
       'tag','nyq conjugate contour flag1 parts');
else
  set( line_h, ...
      'xdata', real(the_contour_flagged), ...
      'ydata', -imag(the_contour_flagged), ...
      'color', 1-get(gca0,'color') );
end

if isfield(cntrhndl,'nyq_contour_xaxis_hilite')
  xline_h = cntrhndl.nyq_contour_xaxis_hilite;
else
  xline_h = findobj( gca0,'tag','nyq contour xaxis hilite');
end
if ~isempty(xline_h)
  set( xline_h,'visible','off');
end
if isfield(cntrhndl,'nyq_contour_yaxis_hilite')
  yline_h = cntrhndl.nyq_contour_yaxis_hilite;
else
  yline_h = findobj( gca0,'tag','nyq contour yaxis hilite');
end
if ~isempty(yline_h)
  set( yline_h,'visible','off');
end

if ~isempty(xlim_init) && ~isempty(ylim_init)
  set( gca0,'xlim', xlim_init,'ylim', ylim_init );
  xlim = xlim_init;
  ylim = ylim_init;
  mod_hndl = 1;
  cntrhndl.ax_xlim = xlim;
  cntrhndl.ax_ylim = ylim;
else
  xlim = cntrhndl.ax_xlim;
  ylim = cntrhndl.ax_ylim;
end

if isempty(xline_h)
  mod_hndl = 1;
  cntrhndl.nyq_contour_xaxis_hilite = ...
    plot( xlim, [0 0], ...
       'parent', gca0, ...
       'color','c', ...
       'linestyle',':', ...
       'linewidth', 1, ...
       'tag','nyq contour xaxis hilite');
else
  set( xline_h, ...
      'xdata', xlim, ...
      'ydata', [0 0], ...
       'color','c', ...
       'linestyle',':', ...
       'linewidth', 1, ...
       'visible','on');
end

if isempty(yline_h)
  mod_hndl = 1;
  cntrhndl.nyq_contour_yaxis_hilite = ...
    plot( [0 0], ylim, ...
       'parent', gca0, ...
       'color','c', ...
       'linestyle',':', ...
       'linewidth', 1, ...
       'tag','nyq contour yaxis hilite');
else
  set( yline_h, ...
      'xdata', [0 0], ...
      'ydata', ylim, ...
       'color','c', ...
       'linestyle',':', ...
       'linewidth', 1, ...
       'visible','on');
end
if dom_ndx == 2
  % Highlight the unit circle.
  if isfield(cntrhndl,'nyq_contour_uc_hilite')
    uc_h = cntrhndl.nyq_contour_uc_hilite;
  else
    uc_h = findobj( gca0,'tag','nyq contour uc hilite');
  end
  if isempty(uc_h)
    mod_hndl = 1;
    uc_hilites = exp( 1i* linspace(0,2*pi,60000)' );
    cntrhndl.nyq_contour_uc_hilite = ...
      plot( uc_hilites, ...
         'parent', gca0, ...
         'color','c', ...
         'linestyle',':', ...
         'linewidth', 1, ...
         'tag','nyq contour uc hilite');
  end
  if isfield(cntrhndl,'nyq_contour_uc_text')
    uc_text_h = cntrhndl.nyq_contour_uc_text;
  else
    uc_text_h = findobj( gca0,'tag','UC text');
  end
  if isempty(uc_text_h)
    mod_hndl = 1;
    cntrhndl.nyq_contour_uc_text = ...
      text( -1/sqrt(2)+0.1, -1/sqrt(2)+0.1,{'unit';'circle'}, ...
            'parent', gca0, ...
            'color', 1-get(gca0,'color'), ...
            'tag','UC text');
  end
end

if isfield(cntrhndl,'Bode_selection_marker')
  selfreq_h = cntrhndl.Bode_selection_marker;
else
  selfreq_h = findobj( gca0,'tag','Bode selection marker');
  cntrhndl.Bode_selection_marker = selfreq_h;
end
if isempty(selfreq_h) || ~isequal( 1, ishandle(selfreq_h) )
  mod_hndl = 1;
  delete(selfreq_h)
  cntrhndl.Bode_selection_marker = ...
    plot( 0, 0, ...
         'marker','o', ...
         'markersize', 6, ...
         'color',[0 0.8 0.8], ...
         'linewidth', 4, ...
         'linestyle','none', ...
         'parent', gca0, ...
         'tag','Bode selection marker', ...
         'visible','off');
end

% Plot poles and zeros that are on the stability boundary.
if dom_ndx == 1
  pseudo_poles = 1i*PZG(dom_ndx).cntr_data.ld_pseudo_pole_freqs;
  pseudo_zeros = 1i*PZG(dom_ndx).cntr_data.ld_pseudo_zero_freqs;
else
  pseudo_poles = exp( 1i*PZG(dom_ndx).cntr_data.ld_pseudo_pole_freqs );
  pseudo_zeros = exp( 1i*PZG(dom_ndx).cntr_data.ld_pseudo_zero_freqs );
end
pseudo_poles_rep = PZG(dom_ndx).cntr_data.ld_pole_rep;
pseudo_zeros_rep = PZG(dom_ndx).cntr_data.ld_zero_rep;

cplx_ndx = find( abs(imag(pseudo_poles)) > 1e-8 );
if ~isempty(cplx_ndx)
  pseudo_poles = [ pseudo_poles; conj( pseudo_poles(cplx_ndx) ) ];
end
real_ndx = find( abs(imag(pseudo_poles)) <= 1e-8 );
if ~isempty(real_ndx)
  pseudo_poles(real_ndx) = real(pseudo_poles(real_ndx));
end

cplx_ndx = find( abs(imag(pseudo_zeros)) > 1e-8 );
if ~isempty(cplx_ndx)
  pseudo_zeros = [ pseudo_zeros; conj( pseudo_zeros(cplx_ndx) ) ];
end
real_ndx = find( abs(imag(pseudo_zeros)) <= 1e-8 );
if ~isempty(real_ndx)
  pseudo_zeros(real_ndx) = real(pseudo_zeros(real_ndx));
end

if max(get(gca0,'color')) > 0.5
  pole_color = [ 0 0.7 0.4 ];
  zero_color = [ 0.7 0 0.4 ]; %#ok<NASGU>
else
  pole_color = [ 0 0.8 0.5 ];
  zero_color = [ 0.8 0 0.5 ]; %#ok<NASGU>
end

if isfield(cntrhndl,'nyq_contour_pole_locs')
  pline_h = cntrhndl.nyq_contour_pole_locs;
else
  pline_h = findobj( gca0,'tag','nyq contour pole locs');
end
if isfield(cntrhndl,'nyq_contour_zero_locs')
  zline_h = cntrhndl.nyq_contour_zero_locs;
else
  zline_h = findobj( gca0,'tag','nyq contour zero locs');
end

if isempty( pseudo_poles )
  if ~isempty(pline_h)
    set( pline_h,'xdata',[],'ydata',[],'visible','off')
  end
else
  if isempty(pline_h)
    mod_hndl = 1;
    cntrhndl.nyq_contour_pole_locs = ...
      plot( real(pseudo_poles), ...
          imag(pseudo_poles), ...
          'marker','x', ...
          'markersize', 12, ...
          'color', pole_color, ...
          'linestyle','none', ...
          'linewidth', 3, ...
          'parent', gca0, ...
          'tag','nyq contour pole locs');
  else
    set( pline_h, ...
        'xdata', real(pseudo_poles), ...
        'ydata', imag(pseudo_poles), ...
        'marker','x', ...
        'markersize', 12, ...
        'color', pole_color, ...
        'linestyle','none', ...
        'linewidth', 3, ...
        'visible','on')
  end
end
if isempty( pseudo_zeros )
  if ~isempty(zline_h)
    set( zline_h,'xdata',[],'ydata',[],'visible','off')
  end
else
  if isempty(zline_h)
    mod_hndl = 1;
    cntrhndl.nyq_contour_zero_locs = ...
      plot( real(pseudo_zeros), ...
          imag(pseudo_zeros), ...
          'marker','o', ...
          'markersize', 10, ...
          'color', pole_color, ...
          'linestyle','none', ...
          'linewidth', 3, ...
          'parent', gca0, ...
          'tag','nyq contour zero locs');
  else
    set( zline_h, ...
        'xdata', real(pseudo_zeros), ...
        'ydata', imag(pseudo_zeros), ...
        'marker','o', ...
        'markersize', 10, ...
        'color', pole_color, ...
        'linestyle','none', ...
        'linewidth', 3, ...
        'visible','on')
  end
end

%num_unq_reppole = sum( pseudo_poles_rep > 1 );
num_unq_reppole = 0;
for k = 1:numel(pseudo_poles_rep)
  if pseudo_poles_rep(k) > 1
    if isreal( pseudo_poles(k) )
      num_unq_reppole = num_unq_reppole + 1;
    else
      num_unq_reppole = num_unq_reppole + 2;
    end
  end
end
if isfield(cntrhndl,'contour_reppole_text')
  reppole_text_h = cntrhndl.contour_reppole_text;
else
  reppole_text_h = findobj( gca0,'tag','contour reppole text');
  mod_hndl = 1;
  cntrhndl.contour_reppole_text = reppole_text_h;
end
if ~isequal( numel(reppole_text_h), num_unq_reppole )
  delete(reppole_text_h)
  reppole_text_h = [];
  mod_hndl = 1;
  cntrhndl.contour_reppole_text = [];
  PZG(dom_ndx).plot_h{14}.hndl.contour_reppole_text = [];
end

if num_unq_reppole > 0
  set_text_ndx = 1;
  for k = 1:numel(pseudo_poles_rep)
    if pseudo_poles_rep(k) > 1
      this_pseudo_pole = pseudo_poles(k);
      if dom_ndx == 1
        text_xloc = -2.5;
        text_yloc = abs(this_pseudo_pole) + 0.02*diff(ylim);
      else
        text_xloc = 0.8 * real(this_pseudo_pole);
        text_yloc = 0.8 * imag(this_pseudo_pole);
      end
      if isempty(reppole_text_h)
          text( text_xloc, text_yloc, ...
             ['(' num2str( pseudo_poles_rep(k) ) ')'], ...
             'parent', gca0, ...
             'color', 1-get(gca0,'color'), ...
             'fontsize', 12, ...
             'fontweight','bold', ...
             'userdata', this_pseudo_pole, ...
             'tag','contour reppole text');
        if ( ( abs(this_pseudo_pole) > 1e-8 ) && ( dom_ndx == 1 ) ) ...
          ||( ( abs(this_pseudo_pole-1) > 1e-8 ) && ( dom_ndx == 2 ) )
          text( text_xloc, -text_yloc, ...
               ['(' num2str( pseudo_poles_rep(k) ) ')'], ...
               'parent', gca0, ...
               'color', 1-get(gca0,'color'), ...
               'fontsize', 12, ...
               'fontweight','bold', ...
               'userdata', conj(this_pseudo_pole), ...
               'tag','contour reppole text');
        end
      else
        set( reppole_text_h(set_text_ndx), ...
            'string',['(' num2str( pseudo_poles_rep(k) ) ')'], ...
            'position', [ text_xloc, text_yloc, 0 ], ...
            'color', 1-get(gca0,'color'), ...
            'userdata', this_pseudo_pole, ...
            'visible','on');
        if ~isreal(pseudo_poles(k))
          set_text_ndx = set_text_ndx + 1;
          set( reppole_text_h(set_text_ndx), ...
            'string',['(' num2str( pseudo_poles_rep(k) ) ')'], ...
            'position', [ text_xloc, -text_yloc, 0 ], ...
            'color', 1-get(gca0,'color'), ...
            'userdata', conj(this_pseudo_pole), ...
            'visible','on');
        end
        set_text_ndx = set_text_ndx + 1;
      end
    end
  end
  cntrhndl.contour_reppole_text = ...
    findobj( gca0,'tag','contour reppole text');
  PZG(dom_ndx).plot_h{14}.hndl.contour_reppole_text = ...
    cntrhndl.contour_reppole_text;
elseif isfield(cntrhndl,'contour_reppole_text') ...
    && ~isempty(cntrhndl.contour_reppole_text)
    set( cntrhndl.contour_reppole_text,'visible','off')
end

%num_unq_repzero = sum( pseudo_zeros_rep > 1 );
num_unq_repzero = 0;
for k = 1:numel(pseudo_zeros_rep)
  if pseudo_zeros_rep(k) > 1
    if isreal( pseudo_zeros(k) )
      num_unq_repzero = num_unq_repzero + 1;
    else
      num_unq_repzero = num_unq_repzero + 2;
    end
  end
end
if isfield(cntrhndl,'contour_repzero_text')
  repzero_text_h = cntrhndl.contour_repzero_text;
else
  repzero_text_h = findobj( gca0,'tag','contour repzero text');
  mod_hndl = 1;
  cntrhndl.contour_repzero_text = repzero_text_h;
end
if ~isequal( numel(repzero_text_h), 2*num_unq_repzero )
  delete(repzero_text_h)
  repzero_text_h = [];
  mod_hndl = 1;
  cntrhndl.contour_repzero_text = [];
  PZG(dom_ndx).plot_h{14}.hndl.contour_repzero_text = [];
end

if num_unq_repzero > 0
  set_text_ndx = 1;
  for k = 1:numel(pseudo_zeros_rep)
    if pseudo_zeros_rep(k) > 1
      this_pseudo_zero = pseudo_zeros(k);
      if dom_ndx == 1
        text_xloc = -2.5;
        text_yloc = abs(this_pseudo_zero) + 0.02*diff(ylim);
      else
        text_xloc = 0.8 * real(this_pseudo_zero);
        text_yloc = 0.8 * imag(this_pseudo_zero);
      end
      if isempty(repzero_text_h)
        text( text_xloc, text_yloc, ...
             ['(' num2str( pseudo_zeros_rep(k) ) ')'], ...
             'parent', gca0, ...
             'color', 1-get(gca0,'color'), ...
             'fontsize', 12, ...
             'fontweight','bold', ...
             'userdata', this_pseudo_zero, ...
             'tag','contour repzero text');
        if this_pseudo_zero ~= 0
          text( text_xloc, -text_yloc, ...
               ['(' num2str( pseudo_zeros_rep(k) ) ')'], ...
               'parent', gca0, ...
               'color', 1-get(gca0,'color'), ...
               'fontsize', 12, ...
               'fontweight','bold', ...
               'userdata', conj(this_pseudo_zero), ...
               'tag','contour repzero text');
        end
      else
        set( repzero_text_h(set_text_ndx), ...
            'string',['(' num2str( pseudo_zeros_rep(k) ) ')'], ...
            'position', [ text_xloc, text_yloc, 0 ], ...
            'color', 1-get(gca0,'color'), ...
            'userdata', this_pseudo_zero, ...
            'visible','on');
        if ~isreal(pseudo_zeros(k))
          set_text_ndx = set_text_ndx + 1;
          set( repzero_text_h(set_text_ndx), ...
            'string',['(' num2str( pseudo_zeros_rep(k) ) ')'], ...
            'position', [ text_xloc, -text_yloc, 0 ], ...
            'color', 1-get(gca0,'color'), ...
            'userdata', conj(this_pseudo_zero), ...
            'visible','on');
        end
        set_text_ndx = set_text_ndx + 1;
      end
    end
  end
  cntrhndl.contour_repzero_text = ...
    findobj( gca0,'tag','contour repzero text');
  PZG(dom_ndx).plot_h{14}.hndl.contour_repzero_text = ...
    cntrhndl.contour_repzero_text;
elseif isfield(cntrhndl,'contour_repzero_text') ...
    && ~isempty(cntrhndl.contour_repzero_text)
    set( cntrhndl.contour_repzero_text,'visible','off')
end

if strcmp( request_str,'bring forward') ...
  && ~isempty(cntr_fig_h)
  figure(cntr_fig_h)
end

pzg_reptxt( dom_ndx, cntrhndl.ax_xlim, cntrhndl.ax_ylim )

if mod_hndl
  setappdata( cntr_fig_h,'hndl', cntrhndl );
  pzg_cphndl( cntr_fig_h, dom_ndx, 14 );
  if PZG(dom_ndx).pzg_show_frf_computation
    freqserv('refresh selected_freq');
    pzg_seltxt(dom_ndx)
  end
end

return
