function  dpzgui
% Creates and services the discrete-time
% pole/zero map graphical user interface (dpzgui).

% The following copyrighted m-files comprise the PZGUI tool:
%    ** The contents of these files may not be included **
%    **  in any other program without explicit written  **
%    **    consent from the author, Mark A. Hopkins     **
%     bodepl.m        pzg_bodex.m     pzg_islogx.m     pzg_seltxt.m
%     contents.m      pzg_box.m       pzg_isunwrp.m    pzg_tools.m
%     contourpl.m     pzg_c2d.m       pzg_lims.m       pzg_tpwr.m
%     dpzgui.m        pzg_cntr.m      pzg_maprep.m     pzg_txan.m
%     dupdatep.m      pzg_cphndl.m    pzg_menu.m       pzg_unre.m
%     figopts.m       pzg_d2c.m       pzg_moda.m       pzg_unwrap.m
%     fr_disp.m       pzg_disab.m     pzg_onoff.m      pzg_updtfilt.m
%     freqserv.m      pzg_efmt.m      pzg_pfesim.m     pzg_xtrfrq.m
%     gainfilt.m      pzg_err.m       pzg_prvw.m       pzgcalbk.m
%     helpserv.m      pzg_errvis.m    pzg_ptr.m        pzgui.m
%     ldlgfilt.m      pzg_fndo.m      pzg_recovr.m     pzmvserv.m
%     nicholpl.m      pzg_gle.m       pzg_reptxt.m     resppl.m
%     nyqistpl.m      pzg_grid.m      pzg_res.m        rlocuspl.m
%     pidfilt.m       pzg_inzpk.m     pzg_rsppfe.m     sensplot.m
%     pz_move.m       pzg_isdby.m     pzg_rss.m        updatepl.m
%     pzg_bkup.m      pzg_ishzx.m     pzg_scifmt.m     updtpzln.m
%                     pzg_islink.m    pzg_sclpt.m      zmimntcpt.m
% (c) 1996 - 2014
%    by Professor Mark A. Hopkins, Ph.D.
%       Electrical and Microelectronic Engineering
%       Rochester Institute of Technology
%       Rochester NY, USA 14623        Email:  mark.hopkins@rit.edu
%
% SHAREWARE INFORMATION:
%               FREE, IF USED ONLY FOR EDUCATIONAL PURPOSES.
%   Otherwise:
%    (corporations, companies, and other for-profit users) 
%    Individual licenses -- US$200 per computer
%    Site license -- US$2000 per industrial site, any number of users
%    Make check payable to "Mark A. Hopkins", and remit to address above
% ----------------------------------------------------------------------
global PZG
evalin('base','global PZG')

pwmsgbox_h = -1;
if isempty(PZG) || ~isfield( PZG,'plot_h') ...
  ||( numel(PZG(1).plot_h) < 13 )
  CT_PZGUI = findobj( allchild(0),'type','figure', ...
    'name','Continuous-Time P/Z Map G.U.I.');
  DT_PZGUI = findobj( allchild(0),'type','figure', ...
      'name','Discrete-Time P/Z Map G.U.I.');
  if ~isempty(CT_PZGUI) || ~isempty(DT_PZGUI)
    pzg_recovr
  end
end
DT_PZGUI = pzg_fndo( 2, 13,'fig_h');
if isempty(DT_PZGUI) || ~isappdata(DT_PZGUI,'hndl')
  DT_PZGUI = findobj( allchild(0),'type','figure', ...
    'name','Discrete-Time P/Z Map G.U.I.');
  delete(DT_PZGUI)
  pwmsgbox_h = ...
    msgbox({'Please wait while the Discrete-Time DPZGUI interface'; ...
      'is constructed, and the various plot data are initialized.';' '}, ...
     'dpzgui Advisory');
  drawnow
end
CT_PZGUI = pzg_fndo( 1, 12,'fig_h');

if isempty(PZG)
  % Define the continuous-time parameters.
  PZG(1).PZGUIname = 'Continuous-Time P/Z Map G.U.I.';
  PZG(1).Domain = 's';
  PZG(1).Selection = [1 1];
  PZG(1).FrqSelNdx = [];
  PZG(1).NyqSelNdx = [];

  PZG(1).PureDelay = 0;
  PZG(1).Ts = 0.005;
  PZG(1).Gain = 15;
  PZG(1).ZeroLocs = -70;
  PZG(1).PoleLocs = [ -3+31j; -3-31j ];
  PZG(1).N = [];
  PZG(1).D = [];
  
  PZG(1).DCgain = ...
    real(PZG(1).Gain * prod(-PZG(1).ZeroLocs) ./ prod(-PZG(1).PoleLocs));

  PZG(1).recompute_frf = 1;
  PZG(1).BodeFreqs = [];
  PZG(1).BodeMag = [];
  PZG(1).BodePhs = [];
  PZG(1).TFEFreqs = [];
  PZG(1).TFEMag = [];
  PZG(1).TFEPhs = [];

  PZG(1).CLGain = PZG(1).Gain;
  PZG(1).CLZeroLocs = PZG(1).ZeroLocs;
  PZG(1).N = [];
  PZG(1).D = [];
  PZG(1).Dc = [];
  PZG(1).CLPoleLocs = [];
  PZG(1).CLBodeFreqs = [];
  PZG(1).CLBodeMag = [];
  PZG(1).CLBodePhs = [];
  
  % Define the discrete-time parameters.
  PZG(2).PZGUIname = 'Discrete-Time P/Z Map G.U.I.';
  PZG(2).Domain = 'z';
  PZG(2).Selection = [1 1];
  PZG(2).FrqSelNdx = [];

  PZG(2).PureDelay = 0;
  PZG(2).Ts = PZG(1).Ts;
  PZG(2).Gain = 0.086556451342561;
  PZG(2).ZeroLocs = [ 0.701836874287323 ]; %#ok<NBRAK>
  PZG(2).PoleLocs = [ 0.973301955431202 + 0.152081679048812i; ...
                      0.973301955431202 - 0.152081679048812i ];
  PZG(2).N = [];
  PZG(2).D = [];

  PZG(2).DCgain = ...
    real(PZG(2).Gain * prod(1-PZG(2).ZeroLocs) ./ prod(1-PZG(2).PoleLocs));

  PZG(2).recompute_frf = 1;
  PZG(2).BodeFreqs = [];
  PZG(2).BodeMag = [];
  PZG(2).BodePhs = [];
  PZG(2).TFEFreqs = [];
  PZG(2).TFEMag = [];
  PZG(2).TFEPhs = [];

  modalss = pzg_moda( 2, 1, 1, 0,'', 1 );
  if ~isempty(modalss)
    PZG(2).CLPoleLocs = tzero( modalss.a, modalss.b, modalss.c, modalss.d+1 );
    PZG(2).CLZeroLocs = PZG(2).ZeroLocs;
    PZG(2).CLGain = PZG(2).Gain;
  else
    PZG(2).CLGain = PZG(2).Gain;
    PZG(2).CLZeroLocs = PZG(2).ZeroLocs;
    PZG(2).N = [];
    PZG(2).D = [];
    PZG(2).Dc = [];
    PZG(2).CLPoleLocs = [];
  end
  PZG(2).CLBodeFreqs = [];
  PZG(2).CLBodeMag = [];
  PZG(2).CLBodePhs = [];
  
  % Define the various plot names.
  PZG(1).OLBodeName = 'Continuous-Time Open-Loop';
  PZG(2).OLBodeName = 'Discrete-Time Open-Loop';
  PZG(1).CLBodeName = 'Continuous-Time Closed-Loop';
  PZG(2).CLBodeName = 'Discrete-Time Closed-Loop';
  PZG(1).NicholsName = 'Continuous-Time System Nichols Chart';
  PZG(2).NicholsName = 'Discrete-Time System Nichols Chart';
  PZG(1).RootLocusName = 'Continuous-Time System Root Locus';
  PZG(2).RootLocusName = 'Discrete-Time System Root Locus';
  PZG(1).OLTimeRespName = 'Continuous-Time Open-Loop Time Response';
  PZG(2).OLTimeRespName = 'Discrete-Time Open-Loop Time Response';
  PZG(1).CLTimeRespName = 'Continuous-Time Closed-Loop Time Response';
  PZG(2).CLTimeRespName = 'Discrete-Time Closed-Loop Time Response';
  PZG(1).NyquistName = 'Continuous-Time System Nyquist Plot';
  PZG(2).NyquistName = 'Discrete-Time System Nyquist Plot';
  PZG(1).SensPlotName = 'Continuous-Time Closed-Loop Output Sensitivity';
  PZG(2).SensPlotName = 'Discrete-Time Closed-Loop Output Sensitivity';
  PZG(1).NyqContourPlotName = 'Continuous-Time Nyquist Contour';
  PZG(2).NyqContourPlotName = 'Discrete-Time Nyquist Contour';
  
  PZG(1).TFEFreqs = [];
  PZG(1).TFEMag = [];
  PZG(1).TFEPhs = [];
  PZG(2).TFEFreqs = [];
  PZG(2).TFEMag = [];
  PZG(2).TFEPhs = [];
  PZG(1).NegSelect = 0;
  PZG(2).NegSelect = 0;
  PZG(1).pzg_show_frf_computation = 0;
  PZG(2).pzg_show_frf_computation = 0;
  PZG(1).NyqSelNdx = [];
  PZG(2).NyqSelNdx = [];
  PZG(1).DefaultBackgroundColor = 'k';
  PZG(2).DefaultBackgroundColor = 'k';
end

for k = 1:2
  if ~isfield(PZG(k),'plot_h')
    PZG(k).plot_h = cell(14,1);
  elseif numel(PZG(k).plot_h) < 14
    PZG(k).plot_h = ...
      [ PZG(k).plot_h(:); cell( 14-numel(PZG(k).plot_h), 1 ) ];
  elseif size(PZG(k).plot_h,2) ~= 1
    PZG(k).plot_h = PZG(k).plot_h(:);
  end
end

if PZG(1).Gain == 0
  PZG(1).Gain = 1;
end
if PZG(2).Gain == 0
  PZG(2).Gain = 1;
end

if strcmp('w',PZG(1).DefaultBackgroundColor)
  foreground_color = 'k';
  checkbox_foreground_color = [ 0 0 0 ];
  checkbox_background_color = [ 1 1 1 ];
  checkbox_background_color2 = [ 1 1 1 ];
else
  foreground_color = 'w';
  checkbox_foreground_color = [ 1 1 1 ];
  checkbox_background_color = [ 0 0 0 ];
  checkbox_background_color2 = [ 0 0 0 ];
end

this_cyan = [ 0 1 1 ];
if isequal( PZG(1).DefaultBackgroundColor,'w')
  this_cyan = [ 0 0.7 0.7 ];
end
this_yellow = [1 1 0];
if isequal(PZG(2).DefaultBackgroundColor,'w')
  this_yellow = [0.7 0.7 0 ];
end

if ~isfield(PZG,'DCgain')
  % S-domain
  DCgain = PZG(1).Gain;
  if ~any( PZG(1).PoleLocs == 0 ) && ~any( PZG(1).ZeroLocs == 0 )
    if ~isempty( PZG(1).PoleLocs )
      DCgain = real( DCgain / prod( -PZG(1).PoleLocs ) );
    end
    if ~isempty( PZG(1).ZeroLocs )
      DCgain = real( DCgain * prod( -PZG(1).ZeroLocs ) );
    end
    if ~isnan(DCgain) && ~isinf(DCgain) && ( DCgain ~= 0 )
      PZG(1).DCgain = DCgain;
    else
      PZG(1).DCgain = [];
    end
  else
    PZG(1).DCgain = [];
  end
  % Z-domain
  DCgain = PZG(2).Gain;
  if ~any( PZG(2).PoleLocs == 1 ) && ~any( PZG(2).ZeroLocs == 1 )
    if ~isempty( PZG(2).PoleLocs )
      DCgain = real( DCgain / prod( 1 - PZG(2).PoleLocs ) );
    end
    if ~isempty( PZG(1).ZeroLocs )
      DCgain = real( DCgain * prod( 1 - PZG(2).ZeroLocs ) );
    end
    if ~isnan(DCgain) && ~isinf(DCgain) && ( DCgain ~= 0 )
      PZG(2).DCgain = DCgain;
    else
      PZG(2).DCgain = [];
    end
  else
    % Some poles or zeros are located at s = 0.
    PZG(2).DCgain = [];  
  end  
end

Ts = PZG(2).Ts;

if ~isempty(DT_PZGUI) && isequal( 1, ishandle(DT_PZGUI) )
  if isappdata( DT_PZGUI,'hndl')
    hndl = getappdata( DT_PZGUI,'hndl');
  else
    delete(DT_PZGUI)
    DT_PZGUI = [];
  end
  temp0 = get(DT_PZGUI,'UserData');
else
  hndl = [];
end

ColorOrder = [ 1 0.8 0.4; 1 0 1; 0.4 0.8 1; 1 0 0; 0 1 0; 0 0 1];

% Refresh the contour data, if necessary.
if ~isequal( PZG(2).recompute_frf, 0 ) ...
  || ~isfield( PZG(2),'cntr_data') ...
  || isempty( PZG(2).cntr_data ) ...
  ||~isstruct( PZG(2).cntr_data ) ...
  ||~isfield( PZG(2).cntr_data,'contour_freq')
  PZG(2).recompute_frf = 0;
  pzg_cntr(2);
  pzg_bodex(2);
end

pz_markersize = 14;
pz_linewidth = 2.5;
if numel(PZG(2).PoleLocs) > 20
  pz_markersize = 10;
  pz_linewidth = 2;
end

new_dt_figure = 0;
if isempty(DT_PZGUI)
  % Check that the Control System Toolbox is available.
  ver_str = ver;
  if isstruct(ver_str)
    ctrl_license = [];
    for k = 1:numel(ver_str)
      if isequal( ver_str(k).Name,'Control System Toolbox') ...
        ||any( strfind( lower(ver_str(k).Name),'control system') )
        ctrl_license(end+1) = k; %#ok<AGROW>
      end
    end
    if isempty(ctrl_license)
      if ishandle(pwmsgbox_h)
        delete(pwmsgbox_h)
      end
      errdlg_h = ...
        errordlg( ...
          {'DPZGUI cannot function without the Control System Toolbox.'; ...
           'The Control System Toolbox does not appear to be licensed.'; ...
           ' '; ...
           '  ... Exiting DPZGUI'; ...
           ' ';'    Click "OK" to continue ...';' '}, ...
          'DPZGUI Requires Control System Toolbox','modal');
      uiwait(errdlg_h)
      return
    end
  end
  
  ScrSize = get(0,'ScreenSize');
  norm_gui_ohead = [10 55]./ScrSize(3:4);
  if ~isempty(CT_PZGUI)
    % Try to arrange the two main GUIs so they're both visible.
    ctpzgui_pos = get( CT_PZGUI,'position');
    dtpzgui_pos = ctpzgui_pos;
    if ( 1-sum(dtpzgui_pos([1,3])) ) > ( dtpzgui_pos(3)+2*norm_gui_ohead(1) )
      ctpzgui_pos(1) = ...
        dtpzgui_pos(1) + 1.02*dtpzgui_pos(3)+norm_gui_ohead(1);
    else
      ctpzgui_pos(1) = ...
        max( 0.01, dtpzgui_pos(1)-1.02*dtpzgui_pos(3)-norm_gui_ohead(1) );
    end
    ScrPos = ctpzgui_pos;
  else
    ScrPos = [];
  end

  if ~isempty(CT_PZGUI)
    CT_Hndls = get(CT_PZGUI,'UserData');
    % Try to arrange the two main GUIs so they're both visible.
    ctpzgui_pos = get( CT_PZGUI,'position');
    dtpzgui_pos = ctpzgui_pos;
    if ( 1-sum(ctpzgui_pos([1,3])) ) > ( ctpzgui_pos(3)+2*norm_gui_ohead(1) )
      dtpzgui_pos(1) = ...
        ctpzgui_pos(1) + 1.02*ctpzgui_pos(3)+norm_gui_ohead(1);
    else
      dtpzgui_pos(1) = ...
        max( 0.01, ctpzgui_pos(1)-1.02*ctpzgui_pos(3)-norm_gui_ohead(1) );
    end
    ScrPos = dtpzgui_pos;
  end
  
  new_dt_figure = 1;
  DT_PZGUI = ...
    figure( ...
      'units','pixels', ...
      'Position', [ScrSize(3:4)-[500 435] 495 385], ...
      'Name', PZG(2).PZGUIname, ...
      'Color', PZG(2).DefaultBackgroundColor, ...
      'menubar','figure', ...
      'numbertitle','off', ...
      'integerhandle','off', ...
      'handlevisibility','callback', ...
      'dockcontrols','off', ...
      'Interruptible','On', ...
      'tag','DPZGUI main user interface', ...
      'windowbuttonupfcn', ...
        ['global PZMoving pzg_drawbox,' ...
         'PZMoving=0;' ...
         'pzg_drawbox.button_down=0;' ...
         'clear pzg_drawbox PZMoving,' ...
         'pzg_box([],1)'], ...
      'CloseRequestFcn', ...
        ['global PZG,' ...
         'if isempty(PZG),' ...
           'closereq,' ...
           'return,' ...
         'end,' ...
         'temp_helph=pzg_fndo(2,(12:13),''pzg_help_checkbox'');' ...
         'for temp_kh=1:numel(temp_helph),' ...
           'set(temp_helph(temp_kh),''Value'',0,' ...
              '''foregroundcolor'',' ... 
                  '1-get(get(temp_helph(temp_kh),''parent''),''color''),' ...
              '''fontweight'',''normal'');' ...
         'end,' ...
         'temp_h=pzg_fndo(1,12,''fig_h'');' ...
         'if ~isempty(temp_h),' ...
           'pzg_grid(get(temp_h,''userdata''),temp_h,' ...
                     'pzg_fndo(1,12,''ax_h''),12,PZG(1).plot_h{12}.hndl);' ...
         'end,' ...
         'temp_h=pzg_fndo(1,10,''fig_h'');' ...
         'if ~isempty(temp_h),' ...
           'pzg_grid(get(temp_h,''userdata''),temp_h,' ...
                     'pzg_fndo(1,10,''ax_h''),10,PZG(1).plot_h{10}.hndl);' ...
         'end,' ...
         'temp_link_h=pzg_fndo(1,12,''LinkCheckbox'');' ...
         'if~isempty(temp_link_h),' ...
           'set(temp_link_h,''value'',0,' ...
               '''backgroundcolor'',PZG(1).DefaultBackgroundColor);' ...
         'end,' ...
         'temp_link_h=pzg_fndo(1,12,''LinkMethod'');' ...
         'if~isempty(temp_link_h),' ...
           'set(temp_link_h,' ...
                '''backgroundcolor'',PZG(1).DefaultBackgroundColor);' ...
         'end,' ...
         'temp_boxh=pzg_fndo(1,12,''draw_box_checkbox'');' ...
         'if~isempty(temp_boxh),' ...
           'set(temp_boxh,''value'',0);' ...
           'set(get(temp_boxh,''parent''),''pointer'',''arrow'');' ...
         'end,' ...
         'updtpzln(''z'');' ...
         'pzg_seltxt(2,[],[],PZG(2).NegSelect);' ...
         'temp_boxh=pzg_fndo((1:2),(10:13),''pzgbox'');' ...
         'for temp_kbox=1:numel(temp_boxh),' ...
           'if~isempty(temp_boxh(temp_kbox)),' ...
             'set(temp_boxh(temp_kbox),''visible'',''off'');' ...
           'end,' ...
         'end,' ...
         'PZG(1).plot_h{13}=[];' ...
         'PZG(2).plot_h{13}=[];' ...
         'clear global pzg_drawbox,' ...
         'pzg_bkup,' ...
         'clear temp_h temp_link_h temp_boxh temp_kbox temp_helph temp_kh;' ...
         'closereq']);

  set( DT_PZGUI,'units','normalized');
  if ( numel(ScrPos) == 4 ) && ( max(ScrPos) <= 1 ) ...
    &&( min(ScrPos) >= 0 )
    set( DT_PZGUI,'position', ScrPos );
  end
  
  % Put an "Options" menu item in the figure's menubar.
  opt_menu_h = ...
    uimenu('parent', DT_PZGUI, ...
           'label', 'PZGUI OPTIONS', ...
           'tag','pzgui_options_menu');
  setappdata( DT_PZGUI,'hndl', hndl )
  pzg_menu( opt_menu_h,'z');
  hndl = getappdata( DT_PZGUI,'hndl');
  
  hndl.plot_name = get( DT_PZGUI,'name');
  hndl.dom_ndx = 2;
  hndl.ploth_ndx = 13;
  
  % If dpzgui path is not part of the Matlab path, add it at the end.
  whichpzg = which('dpzgui');
  if ~isempty(whichpzg)
    pzgpath = fileparts(whichpzg);
    if isempty( strfind( path, pzgpath ) )
      try                                       %#ok<TRYNC>
        evalin('base',['addpath(''' pzgpath ''',''-end'');'])
      end
    end
  end
  
  temp0 = zeros([20 2]);
  DTgca = axes('parent',DT_PZGUI, ...
               'nextplot','add', ...
               'xgrid','on', ...
               'ygrid','on', ...
               'tag','pzg pzmap plot axes');
  temp0(1,1) = DTgca;
  hndl.ax = DTgca;
  hndl.ax_title = get( DTgca,'title');
  hndl.ax_xlabel = get( DTgca,'xlabel');
  hndl.ax_ylabel = get( DTgca,'ylabel');
  if strcmp( PZG(2).DefaultBackgroundColor,'k')
    set( DTgca,'Color','k','XColor','w','YColor','w','ColorOrder',ColorOrder );
  else
    set( DTgca,'Color','w','XColor','k','YColor','k','ColorOrder',ColorOrder );
  end
  if ScrSize(3) > 1024
    set( DTgca,'Position',[0.11 0.23 0.67 0.67], ...
        'Interruptible','On', ...
        'FontSize',10 );
  else
    set( DTgca,'Position',[0.11 0.23 0.67 0.67], ...
        'Interruptible','On', ...
        'FontSize',8 );
  end
  tempLim = get(DTgca,'XLim');
  tempLim(1) = min( tempLim(1), -1.1 );
  tempLim(2) = max( tempLim(2), 1.1 );
  set(DTgca,'XLim',tempLim);
  tempLim = get(DTgca,'YLim');
  tempLim(1) = min( tempLim(1), -1.1 );
  tempLim(2) = max( tempLim(2), 1.1 );
  set(DTgca,'YLim',tempLim);
  
  set( get(DTgca,'xlabel'),'string','Real(Z)', ...
      'Color', 1-get(DTgca,'color') );
  set( get(DTgca,'ylabel'),'string','Imag(Z)', ...
      'Color', 1-get(DTgca,'color') );

  Zetas = [ 0; 0.01; 0.02; 0.05; (0.1:0.1:0.9)' ];
  normPt = -Zetas + 1i*sqrt(1-Zetas.^2);
  LogBase = [(0:0.0001:0.0099) logspace(-2,0,125)...
             logspace(0,log10(pi),75)]';
  ZLog = zeros( numel(LogBase), numel(Zetas) );
  ZLog(:,1)=exp(normPt(1)*LogBase);
  for Ck = 2:numel(Zetas)
    ZLog(:,Ck)=exp(normPt(Ck)*LogBase/imag(normPt(Ck)));
  end
  
  h = plot( ZLog,':','color', this_yellow,'parent', DTgca, ...
           'tag','dpzgui grid line' );
  set( h(1),'Color', this_cyan,'linestyle','-', ...
      'tag','dpzgui unit circle')
  h = plot( conj(ZLog),':','color', this_yellow,'parent', DTgca, ...
           'tag','dpzgui grid line');
  set( h(1),'Color', this_cyan,'linestyle','-', ...
      'tag','dpzgui unit circle')
  
  LogBase = logspace(-3,log10(pi/2),150)';
  normPt = pi*( -cos(LogBase)+1i*sin(LogBase) );
  ZLog = zeros(numel(normPt),10);
  ZLog(:,1) = exp( 0.1*normPt );
  for Ck = 2:10
    ZLog(:,Ck) = exp( Ck/10*normPt );
  end
  plot( ZLog,':','color', this_cyan,'parent', DTgca, ...
       'tag','dpzgui grid line')
  plot( conj(ZLog),':','color', this_cyan,'parent', DTgca, ...
       'tag','dpzgui grid line')

  set( hndl.ax_title, ...
      'string','  Open-Loop Z-plane P/Z Map             ', ...
      'color', 1-get(DTgca,'color'))
  
  if isempty(PZG(2).ZeroLocs)
    temp_z=0;
    tempVis='Off';
  else
    temp_z=PZG(2).ZeroLocs;
    tempVis='On';
  end
  temp0(3,1) = ...
    plot( real(temp_z),imag(temp_z), ...
         'color','r', ...
         'linestyle','none', ...
         'LineWidth', pz_linewidth, ...
         'marker','o', ...
         'MarkerSize', pz_markersize-2, ...
         'parent', DTgca, ...
         'Visible',tempVis, ...
         'Tag','PZG Z-Plane Zeros');
  hndl.PZG_Zeros_line = temp0(3,1);
  if isempty(PZG(2).ZeroLocs)
    set( temp0(3,1),'Xdata',[],'Ydata',[],'Visible','On')
  end
  hndl = pzg_maprep( PZG(2).ZeroLocs,'zero', hndl );
  
  if isempty(PZG(2).PoleLocs)
    temp_p=0;
    tempVis='Off';
  else
    temp_p=PZG(2).PoleLocs;
    tempVis='On';
  end
  temp0(2,1) = ...
    plot( real(temp_p),imag(temp_p), ...
         'color','g', ...
         'linestyle','none', ...
         'LineWidth', pz_linewidth, ...
         'marker','x', ...
         'MarkerSize', pz_markersize, ...
         'parent', DTgca, ...
         'Interruptible','On', ...
         'Visible',tempVis,'Tag','PZG Z-Plane Poles');
  hndl.PZG_Poles_line = temp0(2,1);
  if isempty(PZG(1).PoleLocs)
    set( temp0(2,1),'Xdata',[],'Ydata',[],'Visible','On')
  end
  hndl = pzg_maprep( PZG(2).PoleLocs,'pole', hndl );

  HelpString = {'        THE INTERACTIVE POLE/ZERO MAP' ' ' ...
          ' This part of the G.U.I. panel is a pole/zero' ...
          ' map in which the locations of the poles' ...
          ' and zeros can be manipulated interactively,' ...
          ' by using the mouse.' ' ' ...
          ' Position the mouse cursor on top of the' ...
          ' pole or zero you want to move, and you should' ...
          ' see the mouse cursor change to a "hand".' ...
          ' (If poles and zeros are too close together to' ...
          ' be easily resolved, the cursor will not change.)' ...
          ' Then click the left or right mouse-button' ...
          ' to DRAG-AND-DROP it to a new location' ...
          ' (i.e., hold down the mouse-button while you' ...
          ' move the cursor to the intended location,' ...
          ' then let up the mouse button).' ' ' ...
          ' If you move a complex pole or zero, its' ...
          ' complex conjugate automatically moves with it.' ' ' ...
          ' Depending upon the speed of your computer' ...
          ' -- and the size of the model --' ...
          ' there can be a noticeable delay as the pole ' ...
          ' or zero tries to follow the mouse cursor.' ' ' ...
          ' After the mouse button is released,' ...
          ' all plots automatically recomputed & updated.'}';
  set( DTgca,'UserData', HelpString );

  dt_str = date;
  n = [ 40 99 41 32 77 46 65 46 72 111 112 107 105 110 ...
       115 44 32 49 57 57 54 45 double(dt_str(end-3:end)) ];
  HelpString = {'PZGui is Copyrighted' ...
    ['(c) 1996-' dt_str(end-3:end) ] ...
    '   Professor Mark A. Hopkins, Ph.D.' ...
    '     Electrical and Microelectronic Engr.' ...
    '     79 Lomb Memorial Blvd.' ...
    '     Rochester Institute of Technology' ...
    '     Rochester, New York  14623' ...
    '     mark.hopkins@rit.edu' ' '...
    ' The contents of these files may not be' ...
    ' included in any other program without explicit' ...
    ' written consent from the author, Mark A. Hopkins.' ...
    ' ' 'SHAREWARE DETAILS:' ' ' ... 
    '     FREE,  if used ONLY for educational purposes.' ' ' ...
    ' Otherwise:' '  (corporations, companies, other for-profits)' ...
    '   > Individual licenses -- US$200 per computer' ... 
    '   > Site license -- US$2000 per industrial site,' ...
    '        any number of users at that site.' ...
    '   Make check payable to: "Mark A. Hopkins",' ...
    '   and remit to the address listed above.' }';
  uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'Units','normalized', ...
      'Position', [-0.005 0.970 0.190 0.035], ...
      'String',char(n), ...
      'fontsize', 6, ...
      'BackgroundColor', get(DT_PZGUI,'color'), ...
      'ForegroundColor', 1-get(DT_PZGUI,'color'), ...
      'tooltipstring', char(n), ...
      'UserData', HelpString, ...
      'Callback', ...
        ['temp_dlg_h=findobj(allchild(0),''name'',' ...
            '''PZGui Copyright Info'');' ...
         'if isempty(temp_dlg_h),' ...
           'temp_dlg_h=msgbox(get(gcbo,''UserData''),' ...
             '''PZGui Copyright Info'');' ...
           'temp_pos=get(temp_dlg_h,''position'');' ...
           'temp_pos(2)=0.6*temp_pos(2);' ...
           'set(temp_dlg_h,''position'',temp_pos);' ...
         'else,' ...
           'figure(temp_dlg_h);' ...
         'end,' ...
         'clear temp_pos temp_dlg_h'] );

  
  HelpString = ...
   {'FOR HELP,' 'MOVE MOUSE-CURSOR TO AN OBJECT' ' ' ...
    'PZGui is copyrighted, (c)1996-2014:' ...
    'by Professor Mark A. Hopkins, Ph.D.' ...
    '  Electrical and Microelectronic Eng.' ...
    '  79 Lomb Memorial Blvd.' ...
    '  Rochester Institute of Technology' ...
    '  Rochester, New York  14623' ...
    '  mark.hopkins@rit.edu' ' '...
    ' The contents of these files may not be' ...
    ' included in any other program without explicit' ...
    ' written consent from the author, Mark A. Hopkins.' ...
    ' ' 'SHAREWARE DETAILS:' ... 
    ' FREE, if used ONLY for educational purposes.' ' ' ...
    ' Otherwise (corporations, companies, other for-profits):' ...
    ' Individual licenses may be purchased for U.S. $200' ... 
    ' per computer, or a site license may be purchased' ... 
    ' for U.S. $2000.  A site license is good for' ... 
    ' any number of machines at one industrial site.' ' ' ...
    ' Make check payable to: "Mark A. Hopkins".' ...
    ' and remit to the address listed above.' }';

  temp0(9,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'String','Help', ...
      'Value', 0, ...
      'Units','normalized', ...
      'Position',[0.905 0.065 0.09 0.04], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor', checkbox_background_color2, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'tag','pzg help checkbox', ...
      'TooltipString','open a context-sensitive "help" window', ...
      'Callback', ...
        ['if get(gcbo,''Value''),' ...
          'set(gcbo,''foregroundcolor'',''r'',' ...
               '''fontweight'',''bold''),' ...
          'helpserv(get(gcbf,''Name''));' ...
        'else,' ...
          'set(gcbo,''foregroundcolor'',1-get(gcbf,''color''),' ...
               '''fontweight'',''normal''),' ...
        'end;'], ...
      'UserData',HelpString );
  hndl.pzg_help_checkbox = temp0(9,2);

  HelpString = {'FIND THE UNIT CIRCLE'; ...
                ' '; ...
                'Center the pole/zero plot'; ...
                'and scale it to the unit circle'};
  uicontrol(DT_PZGUI,'style','pushbutton', ...
                'units','normalized', ...
                'position',[ 0.81 0.065 0.07 0.04 ], ...
                'string','Center', ...
                'UserData', HelpString, ...
                'TooltipString','center the plot on the unit-circle', ...
                'callback', ...
                    ['global PZG,' ...
                     'set(get(gcbf,''currentaxes''),' ...
                          '''xlim'',[-1.4 1.4],' ...
                          '''ylim'',[-1.1 1.1]);' ...
                     'PZG(1).plot_h{13}.xlim=[-1.4 1.4];' ...
                     'PZG(2).plot_h{13}.xlim=[-1.4 1.4];' ...
                     'PZG(1).plot_h{13}.ylim=[-1.1 1.1];' ...
                     'PZG(2).plot_h{13}.ylim=[-1.1 1.1];' ...
                     'PZG(1).plot_h{13}.hndl.ax_xlim=[-1.4 1.4];' ...
                     'PZG(2).plot_h{13}.hndl.ax_xlim=[-1.4 1.4];' ...
                     'PZG(1).plot_h{13}.hndl.ax_ylim=[-1.1 1.1];' ...
                     'PZG(2).plot_h{13}.hndl.ax_ylim=[-1.1 1.1];' ...
                     'set(PZG(2).plot_h{13}.hndl.PZmap_xaxis_highlight,' ...
                       '''xdata'',[-1.4 1.4],''ydata'',[0 0]);' ...
                     'set(PZG(2).plot_h{13}.hndl.PZmap_yaxis_highlight,' ...
                       '''xdata'',[0 0],''ydata'',[-1.1 1.1]);' ...
                     'temp_hndl=getappdata(gcbf,''hndl'');' ...
                     'temp_hndl.ax_xlim=[-1.4 1.4];' ...
                     'temp_hndl.ax_ylim=[-1.1 1.1];' ...
                     'setappdata(gcbf,''hndl'',temp_hndl);' ...
                     'clear temp_hndl']);

  HelpString = {'HOLD THE DC-GAIN FIXED (CONSTANT)'; ...
                ' '; ...
                'When this box is checked, the DC gain of'; ...
                'the transfer function is kept at a constant'; ...
                ' value, even as poles and zeros are changed.'; ...
                ' '; ...
                'If any poles or zeros are located at z = 1,'; ...
                'the gain of the appropriate derivative'; ...
                'of the transfer function is held constant.'};
  hndl.Fix_DC_checkbox = ...
    uicontrol(DT_PZGUI,'style','checkbox', ...
                'units','normalized', ...
                'position',[0.895 0.115 0.104 0.04], ...
                'string','Fix DC', ...
                'value', 0, ...
                'tag','D-T Fix DC checkbox', ...
                'UserData', HelpString, ...
                'BackgroundColor', checkbox_background_color2, ...
                'ForegroundColor', checkbox_foreground_color, ...
                'TooltipString','keep DC gain constant when P/Z are changed', ...
                'callback', ...
                  ['global PZG,' ...
                   'pzg_onoff(0);' ...
                   'drawnow,' ...
                   'try,' ...
                     'if get(gcbo,''value''),' ...
                       'PZG(2).DCgain=PZG(2).Gain;' ...
                       'if~isempty(PZG(2).PoleLocs)' ...
                         '&&any(PZG(2).PoleLocs~=1),' ...
                         'temp_nu=find(PZG(2).PoleLocs~=1);' ...
                         'PZG(2).DCgain=PZG(2).DCgain' ...
                           '/prod(1-PZG(2).PoleLocs(temp_nu));' ...
                       'end,' ...
                       'if~isempty(PZG(2).ZeroLocs)' ...
                         '&&any(PZG(2).ZeroLocs~=1),' ...
                         'temp_nu=find(PZG(2).ZeroLocs~=1);' ...
                         'PZG(2).DCgain=PZG(2).DCgain' ...
                           '*prod(1-PZG(2).ZeroLocs(temp_nu));' ...
                       'end,' ...
                       'PZG(2).DCgain = real(PZG(2).DCgain);' ...
                       'clear temp_nu,' ...
                     'else,' ...
                       'PZG(2).DCgain = [];' ...
                     'end,' ...
                   'catch,pzg_err(''Fix DC checkbox'');end,' ...
                   'pzg_onoff(1);' ...
                   'pzg_unre;' ...
                   'clear temp_errdlg_h,']);

  hndl.verrel = ...
    uicontrol(DT_PZGUI,'Style','text', ...
        'String',{'Ver. 8.0.19';'18Jul2014'}, ...
        'Units','normalized', ...
        'Position',[0.63 0.93 0.15 0.07], ...
        'HorizontalAlignment','Right', ...
        'BackgroundColor', PZG(2).DefaultBackgroundColor, ...
        'ForegroundColor', foreground_color, ...
        'tag','pzgui ver & rel', ...
        'UserData', PZG );
  
  HelpString = {' Pure Delay '; ' '; ...
          ' If the system has any "pure delay"'; ...
          ' (also called "process delay" or'; ...
          ' "transport delay"), set this parameter'; ...
          ' to the INTEGER number of SAMPLES of delay.'; ...
          ' '; ...
          ' Default value of pure delay is zero.'; ...
          ' '; ...
          ' Note that each unit of delay is modeled'; ...
          ' with a pole at z=0, for the root-locus'; ...
          ' and closed-loop time-response computations.'}';
  uicontrol(DT_PZGUI,'Style','frame', ...
            'units','normalized', ...
            'position',[0.800 0.928 0.20 0.070], ...
            'backgroundcolor',[0.9 0.9 0.9])
  uicontrol(DT_PZGUI,'Style','text', ...
      'Units','normalized', ...
      'Position',[0.805 0.931 0.07 0.064], ...
      'String',{'pure';'delay'}, ...
      'Fontweight','bold', ...
      'fontsize', 7, ...
      'HorizontalAlignment','center', ...
      'BackgroundColor',[0.9 0.9 0.9], ...
      'ForegroundColor',[0 0 0], ...
      'TooltipString','delay (integer number of samples)', ...
      'UserData',HelpString );
  if ~isfield(PZG(2),'PureDelay') ...
    || ~isequal(numel(PZG(2).PureDelay),1)
    PZG(2).PureDelay = 0;
  else
    PZG(2).PureDelay = abs(round(PZG(2).PureDelay));
  end
 hndl.PZGUI_pure_delay = ...
    uicontrol(DT_PZGUI,'Style','edit', ...
      'String',pzg_efmt(PZG(2).PureDelay), ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.88 0.942 0.10 0.045], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[.9 .9 1], ...
      'ForegroundColor',[0 0 0], ...
      'tag','PZGUI pure delay', ...
      'TooltipString','delay (integer number of samples)', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempCz1=pzmvserv(''z'');' ...
         'if tempCz1;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''Pure Delay pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz1;% Set PureDelay'], ...
      'UserData',HelpString );


  HelpString = {' SAMPLE PERIOD Ts ' ' ' ...
          ' The sample period determines the Nyquist' ...
          ' frequency of a discrete-time system, and' ...
          ' therefore affects all the frequency-domain' ...
          ' and time-domain plots associated with the' ...
          ' discrete-time system.' ' ' ...
          ' Set the time between samples by changing' ...
          ' the value that appears in this window.' ' ' ...
          ' The default value of TS is 0.005 seconds.' ' ' ...
          ' The sample time must be in units of seconds;' ...
          ' it is the reciprocal of the sample frequency (in Hz).' ...
          ' ' ' You can use powers-of-ten notation to enter' ...
          ' a sample time.  For example 3.3 microseconds' ...
          ' could be entered as:    3.3e-6' }';
  uicontrol(DT_PZGUI,'Style','frame', ...
            'units','normalized', ...
            'position',[0.803 0.864 0.20 0.057], ...
            'backgroundcolor',[0.9 0.9 0.9])
  uicontrol(DT_PZGUI,'Style','text', ...
      'Units','normalized', ...
      'Position',[0.82 0.868 0.05 0.048], ...
      'String','Ts', ...
      'Fontweight','bold', ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[0.9 0.9 0.9], ...
      'ForegroundColor',[0 0 0], ...
      'TooltipString','sample-period for discrete-time z/p/k model', ...
      'UserData',HelpString );
  temp0(13,2) = uicontrol(DT_PZGUI,'Style','edit', ...
      'String',pzg_efmt(Ts), ...
      'Fontweight','bold', ...
      'Fontsize', 8, ...
      'Units','normalized', ...
      'Position',[0.87 0.873 0.12 0.045], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[.9 .9 1], ...
      'ForegroundColor',[0 0 0], ...
      'TooltipString','sample-period for discrete-time z/p/k model', ...
      'tag','pzgui Set TS', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempCz2=pzmvserv(''z'');' ...
         'pzg_box(''redraw box'');' ...
         'catch,pzg_err(''Ts text-entry'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz2;% Set TS'], ...
      'UserData',HelpString );
  hndl.pzgui_Set_TS = temp0(13,2);

    
  HelpString = {' TRANSFER FUNCTION GAIN ' ' '...
          ' The full system model is specified by a set' ...
          ' of poles, a set of zeros, and a GAIN.' ' ' ...
          ' You set the gain by entering' ...
          ' its value  in this data window.' ' ' ...
          ' The default GAIN is unity.' ' ' ...
          ' NOTE: ' ...
          ' This is NOT the DC gain; it is the leading' ...
          ' coefficient of the numerator polynomial' ...
          ' (the leading coefficient of the denominator' ...
          ' polynomial is assumed to be unity).'}';
  uicontrol(DT_PZGUI,'Style','frame', ...
            'units','normalized', ...
            'position',[0.803 0.793 0.20 0.057], ...
            'backgroundcolor',[0.7 0.7 0.7])
  temp0(1,2) = uicontrol(DT_PZGUI,'Style','edit', ...
      'String',pzg_efmt(PZG(2).Gain), ...
      'Fontweight','bold', ...
      'Fontsize', 11, ...
      'Units','normalized', ...
      'Position',[0.863 0.801 0.136 0.045], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[.9 .9 1], ...
      'ForegroundColor',[0 0 0], ...
      'TooltipString','enter gain K (of Z/P/K model)', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempCz3=pzmvserv(''z'');' ...
         'if tempCz3;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''Gain text-entry'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz3;% Set Gain'], ...
      'UserData',HelpString, ...
      'tooltipstring', num2str(PZG(2).Gain,16), ...
      'tag','DT ZPK-gain entry window' );
  hndl.zpk_gain_entry_window = temp0(1,2);
  uicontrol(DT_PZGUI,'Style','text',...
      'Units','normalized', ...
      'String','Gain', ...
      'fontsize', 10, ...
      'Fontweight','bold', ...
      'Position',[0.802 0.796 0.063 0.045], ...
      'HorizontalAlignment','Left', ...
      'BackgroundColor',[0.7 0.7 0.7], ...
      'ForegroundColor',[0 0 0.9], ...
      'TooltipString','Gain K (of Z/P/K model)', ...
      'UserData',HelpString );


  HelpString = {' DRAW A BOX IN THE Z-PLANE' ' '...
          ' You can check or un-check this box' ...
          ' simply by clicking on it.' ' ' ...
          ' This feature is excellent for invesigating' ...
          ' the mappings between continuous-time and' ...
          ' discrete-time domains.' ' ' ...
          ' When this box is checked, the zoom feature' ...
          ' in the pole/zero map is disabled, and replaced' ...
          ' by the ability to draw a box in the Z-plane.' ' ' ...
          ' The box is composed of six lines (sides and' ...
          ' diagonals, each of which is a different color.' ...
          ' ' ' IF YOU HAVE THE C-T LINK ENABLED, then' ...
          ' whenever you draw a new box, its edges and' ...
          ' diagonals are mapped into the Z-plane by' ...
          ' either e^(sT) or the bilinear transformation.' ...
          '  (If you are currently mapping poles and zeros' ...
          ' by the ZOH method, then e^(sT) is used to' ...
          ' map the box into the Z-Plane.)' ' ' ...
          ' If you change the sample time Ts or the' ...
          ' type of mapping, the box''s mapping will be' ...
          ' recomputed and refreshed in the C-T display,' ...
          ' provided that this box is checked.' }';
  temp0(16,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',0, ...
      'String','Draw Box', ...
      'Units','normalized', ...
      'Position',[0.35 0.065 0.16 0.047], ...
      'HorizontalAlignment','Left', ...
      'BackgroundColor', checkbox_background_color2, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'TooltipString','draw box instead of zoom -- box also mapped to S-plane', ...
      'UserData',HelpString, ...
      'Tag','dpzgui draw box checkbox', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''value''),' ...
             'temp_help_h=' ...
               'findobj(allchild(0),''name'',''PZGui Help Window'');' ...
             'if ~isempty(temp_help_h),' ...
               'delete(temp_help_h);' ...
             'end,' ...
             'temp_pzguih=pzg_fndo(1,12,''fig_h'');' ...
             'if isempty(temp_pzguih),' ...
               'pzgui;' ...
               'figure(gcbf),' ...
             'end,' ...
           'end,' ...
         'catch,pzg_err(''Draw Box checkbox'');end,' ...
         'tempUIdrwbxzh=findobj(gcbf,''type'',''uicontrol'');' ...
         'pzg_onoff(1);' ...
         'clear temp_pzguih temp_posct temp_posdt;' ...
         'clear temp_help_h tempUIdrwbxzh;' ...
         ]);
  hndl.draw_box_checkbox = temp0(16,2);

  HelpString = {'     ERASE PUSHBUTTON ' ' ' ...
          ' This button erases boxes that have' ...
          ' been drawn, as well as lines related' ...
          ' to the "Show-FRF-Computation" tool,' ...
          ' which will be closed.' ' ' ...
          ' Click on this button to erase any box' ...
          ' you have drawn using the "Draw Box"' ...
          ' check-box immediately to the left.' ' '}';
  temp0(17,2) = uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Erase', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.52 0.061 0.08 0.04], ...
      'BackgroundColor',[0.7 0.9 0.8], ...
      'ForegroundColor',[0 0 0], ...
      'TooltipString','erase all drawn boxes, and de-select frequency', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempCz4=pzmvserv(''z'');' ...
         'catch,pzg_err(''Erase pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz4;% Erase'], ...
      'UserData',HelpString );

  HelpString = {'     UNDO PUSHBUTTON ' ' ' ...
          ' Push this button to undo the' ...
          ' last change that was made to' ...
          ' the open-loop model.' ' ' ...
          ' That includes changes such as' ...
          ' added/deleted/moved poles & zeros,' ...
          ' changed gain, and changed sample period.' ...
          ' ' 'The "undo" is domain-specific.' ...
          ' In other words, pressing "Undo" in' ...
          ' the discete-time P/Z Map does not' ...
          ' affect the continuous-time model,' ...
          ' and vice-versa.'}';
  undo_h = ...
    uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Undo', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.625 0.061 0.08 0.04], ...
      'BackgroundColor',[0.7 0.9 0.8], ...
      'ForegroundColor',[0 0 0], ...
      'tag','dpzgui UNDO pushbutton', ...
      'TooltipString','undo the last change to p/z/k', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempCz5=pzmvserv(''z'');' ...
         'if tempCz5;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''UNDO pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz5;% UNDO'], ...
      'UserData',HelpString );
  if ~isfield( PZG(2),'undo_info') || isempty( PZG(2).undo_info )
    set( undo_h,'enable','off')
  end
  hndl.dpzgui_UNDO_pushbutton = undo_h;

  HelpString = {'     REDO PUSHBUTTON ' ' ' ...
          ' Push this button to re-do the' ...
          ' last "undo" change that was made to' ...
          ' the open-loop model.' ' ' ...
          ' That includes changes such as' ...
          ' added/deleted/moved poles & zeros,' ...
          ' changed gain, and changed sample period.' ...
          ' ' 'The "Redo" is domain-specific.' ...
          ' In other words, pressing "Redo" in' ...
          ' the discete-time P/Z Map does not' ...
          ' affect the continuous-time model,' ...
          ' and vice-versa (except sample-period).'}';
  redo_h = ...
    uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Redo', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.71 0.061 0.08 0.04], ...
      'BackgroundColor',[0.7 0.9 0.8], ...
      'ForegroundColor',[0 0 0], ...
      'tag','dpzgui REDO pushbutton', ...
      'TooltipString','redo the last "undo" change to p/z/k', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempCz5=pzmvserv(''z'');' ...
         'if tempCz5;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''REDO pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz5;% REDO'], ...
      'UserData',HelpString );
  if ~isfield( PZG(2),'redo_info') || isempty( PZG(2).undo_info )
    set( redo_h,'enable','off')
  end
  hndl.dpzgui_REDO_pushbutton = redo_h;

  HelpString = {'     DISPLAY DAMPING GRID ' ' ' ...
          ' When this checkbox is checked, ' ...
          ' a grid of constant damping factors' ...
          ' and constant natural frequencies' ' ' ...
          ' will be displayed.' }';
  temp0(18,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',1, ...
      'String','Grid', ...
      'Units','normalized', ...
      'Position',[0.81 0.115 0.08 0.04], ...
      'HorizontalAlignment','Left', ...
      'BackgroundColor', checkbox_background_color2, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'Tag','GridOnCheckbox', ...
      'TooltipString','show/hide grid lines', ...
      'UserData',HelpString, ...
      'Callback', ...
        ['temp_gridh=findobj(gcbf,''tag'',''dpzgui grid line'');' ...
         'if get(gcbo,''value''),' ...
           'set(temp_gridh,''visible'',''on'');' ...
         'else,' ...
           'set(temp_gridh,''visible'',''off'');' ...
         'end,' ...
         'clear temp_gridh'] );
  hndl.GridOnCheckbox = temp0(18,2);


  HelpString = {'      OPEN THE CONTINUOUS-TIME P/Z-MAP G.U.I.' ' ' ...
          ' This pushbutton control allows you' ...
          ' to open the Continuous-Time pzgui very easily.' ' ' ...
          ' When you click on this button, the C-T GUI' ...
          ' is created, or brought to the front if it' ...
          ' already exists.'};
  uicontrol(DT_PZGUI,'Style','pushbutton', ...
       'String','C-T pzgui', ...
       'Units','normalized', ...
       'Position',[0.005 0.103 0.10 0.038], ...
       'HorizontalAlignment','Left', ...
       'BackgroundColor',[0.7 0.9 0.8], ...
       'ForegroundColor',[0 0 0], ...
       'UserData',HelpString, ...
       'Tag','open C-T pzgui', ...
       'TooltipString','open the continuous-time P/Z-map G.U.I.', ...
       'Callback', ...
         ['global PZG,' ...
          'pzg_onoff(0);' ...
          'drawnow,' ...
          'temp_ct_pzg=pzg_fndo(1,12,''fig_h'');' ...
          'if isempty(temp_ct_pzg),' ...
            'temp_qdlg_ans=questdlg(' ...
              '{''Do you want to LINK the C-T to the D-T model?'';' ...
              ''' ''},''Establish D-T to C-T Link ??'',' ...
              '''Yes, create D-T to C-T link'',' ...
              '''No, simply open C-T pzgui'',' ...
              '''No, simply open C-T pzgui'');' ...
            'if isempty(temp_qdlg_ans),' ...
              'pzg_onoff(1);' ...
              'clear temp_ct_pzg temp_qdlg_ans,' ...
              'return,' ...
            'elseif strcmpi(temp_qdlg_ans,''Yes, create D-T to C-T link''),' ...
              'temp_ctlink_h=' ...
                'findobj(gcbf,''tag'',''dpzgui Link Checkbox'');' ...
              'set(temp_ctlink_h,' ...
                '''value'',1,''backgroundcolor'',[0 0.7 0]);' ...
              'temp_ctlink_h=' ...
                'findobj(gcbf,''tag'',''C-T LinkMethod'');' ...
              'set(temp_ctlink_h,''backgroundcolor'',[0 0.7 0]);' ...
              'try,' ...
                'dpzgui;dupdatep;' ...
              'catch,pzg_err(''C-T pzgui pushbutton'');end,' ...
              'pzg_unre;' ...            
            'end,' ...
          'end,' ...
          'pzgui;' ...
          'pzg_onoff(1);' ...
          'clear temp_ct_pzg temp_qdlg_ans temp_ctlink_h']);
  
  
  HelpString = {' CONTINUOUS-TIME P/Z MAP LINK' ' ' ...
          ' You can check or un-check this box' ...
          ' simply by clicking on it.' ' ' ...
          ' Whenever this box is checked, a continuous-' ...
          ' time pole/zero map corresponding to the' ...
          ' discrete-time pole/zero map in this window' ...
          ' will be created and linked, so that as this' ...
          ' pole/zero map, or Ts, or GAIN are changed,' ...
          ' corresponding changes are made in the C-T map.' ...
          ' ' ' The method of computing the C-T locations' ...
          ' may be selected in the pull down menu to the' ...
          ' right of this checkbox. ' ...
          ' The default method is ZOH Equivalent.'}';
  temp0(14,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',0, ...
      'String','C-T Link by:', ...
      'Units','normalized', ...
      'Position',[0.005 0.057 0.145 0.040], ...
      'HorizontalAlignment','Left', ...
      'BackgroundColor', checkbox_background_color2, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'Tag','dpzgui Link Checkbox', ...
      'TooltipString','link/unlink Z-plane model onto S-plane', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1;' ...
             'set(gcbo,''backgroundcolor'',[0 0.7 0]);' ...
             'set(findobj(gcbf,''tag'',''C-T LinkMethod''),' ...
                  '''backgroundcolor'',[0 0.7 0]);' ...
             'temp_dtlink_h=pzg_fndo(1,12,''LinkCheckbox'');' ...
             'if~isempty(temp_dtlink_h),' ...
               'set(temp_dtlink_h,''value'',0,' ...
                     '''backgroundcolor'',get(gcbf,''color''));' ...
             'end,' ...
             'temp_dtlink_h=pzg_fndo(1,12,''LinkMethod'');' ...
             'if~isempty(temp_dtlink_h),' ...
               'set(temp_dtlink_h,''backgroundcolor'',get(gcbf,''color''));' ...
             'end,' ...
             'dpzgui;dupdatep;' ...
           'else,' ...
             'set(gcbo,''backgroundcolor'',PZG(1).DefaultBackgroundColor);' ...
             'set(findobj(gcbf,''tag'',''C-T LinkMethod''),' ...
                  '''backgroundcolor'',PZG(1).DefaultBackgroundColor);' ...
           'end,' ...
         'catch,pzg_err(''C-T Link checkbox'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear temp_dtlink_h; % C-T Link checkbox']);
  hndl.LinkCheckbox = temp0(14,2);

  SelectStr = {'z=e^(sT)';'ZOH equiv';'bilinear'}';
  HelpString = {' ***  D-T > C-T COMPUTATION METHOD  ***' ' ' ...
          ' THIS IS A PULL-DOWN SELECTION MENU.' ' ' ...
          ' Click the arrow on the right end of the menu' ...
          ' to select the method by which the continuous-' ...
          ' time poles and zeros will be computed from' ...
          ' the discrete-time pole and zero locations.'}';
  if ~isempty(CT_PZGUI)
    InitVal = get( CT_Hndls(15,2),'Value' );
  else
    InitVal = 2;
  end
  fig_bg_color = get( DT_PZGUI,'color');
  temp0(15,2) = uicontrol(DT_PZGUI,'Style','popupmenu', ...
      'String',SelectStr, ...
      'Value', InitVal, ...
      'Units','normalized', ...
      'Position',[0.13 0.075 0.175 0.03], ...
      'BackgroundColor',fig_bg_color, ...
      'ForegroundColor',1-fig_bg_color, ...
      'UserData',HelpString, ...
      'Tag','C-T LinkMethod', ...
      'TooltipString','method of converting Z-plane model to S-plane', ...
      'Callback', ...
         ['global PZG;' ...
          'pzg_onoff(0);' ...
          'drawnow,' ...
          'try,' ...
            'temp_h=pzg_fndo(1,12,''fig_h'');' ...
            'if~isempty(temp_h),' ...
              'tempA=get(temp_h,''UserData'');' ...
              'if isequal(get(tempA(15,2),''Value''),get(gcbo,''Value'')),' ...
                 'return,' ...
              'end,' ...
              'freqserv(''deselect frequency'');' ...
              'set(tempA(15,2),''Value'',get(gcbo,''Value''));' ...
              'if get(tempA(14,2),''value'')||get(tempA(10,2),''Value''),' ...
                'pzgui;' ...
                'updatepl;' ...
              'end,' ...
              'temp=get(gcbf,''UserData'');' ...
              'if get(temp(14,2),''Value'')||get(temp(10,2),''Value''),' ...
                'dpzgui;' ...
                'dupdatep;' ...
              'end,' ...
              'pzg_box(''redraw box'');' ...
              'pzg_grid(tempA,temp_h,' ...
                'PZG(1).plot_h{12}.ax_h,12,PZG(1).plot_h{12}.hndl);' ...
            'end,' ...
            'temp_h=pzg_fndo(1,10,''fig_h'');' ...
            'if~isempty(temp_h),' ...
              'pzg_grid(get(temp_h,''userdata''),temp_h,' ...
                'PZG(1).plot_h{10}.ax_h,10,PZG(1).plot_h{10}.hndl);' ...
            'end,' ...
          'catch,pzg_err(''C-T Link-Method popupmenu'');end,' ...
          'temp_lnkz_ui=findobj(gcbf,''type'',''uicontrol'');' ...
          'pzg_onoff(1);' ...
          'pzg_unre;' ...
          'clear temp temp_h tempA'] );
  hndl.LinkMethod = temp0(15,2);

  
  HelpString = {'OPEN-LOOP BODE PLOTTING CHECK BOX' ' ' ...
          ' You can check this box simply by clicking on it.' ' ' ...
          ' When this box is checked, the OPEN-LOOP' ...
          ' Bode magnitude and phase plots will be created,' ...
          ' and will automatically be updated as you change the' ...
          ' pole/zero configuration, or the GAIN, or the delay.' ...
          ' ' ' IN THE RESULTING BODE PLOT, if you position' ...
          ' the cursor near the FREQ RESPONSE LINE, itself,' ...
          ' that frequency will be highlighted in all' ...
          ' the Bode, Nichols and Nyquist plots, and the' ...
          ' frequency will be displayed near the cursor.' ...
          ' ' ...
          ' The ZOOM feature is enabled and linked in all' ...
          ' of the Bode plots, so whenever you zoom in or out' ...
          ' in one of the plots, the frequency ranges in' ...
          ' the other plots are adjusted to be identical.'}';
  plot_exist = [ pzg_fndo( 2,1,'fig_h'); pzg_fndo( 2,2,'fig_h') ];
  temp0(2,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',~isempty(plot_exist), ...
      'String','OLbode', ...
      'Units','normalized', ...
      'Position',[0.005 0.005 0.125 0.045], ...
      'BackgroundColor', checkbox_background_color, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'tag','D-T OLbode checkbox', ...
      'TooltipString','open-loop Bode plot', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1;' ...
             'bodepl(PZG(2).BodeFreqs,' ... 
                    'PZG(2).BodeMag,PZG(2).BodePhs,' ...
                    'PZG(2).OLBodeName,PZG(2).FrqSelNdx,' ...
                    'PZG(2).OLBodeName,' ...
                    '[0.01 0.67 0.29 0.28],' ...
                    '[''try,tempfs=freqserv(gcbf,1);pzg_ptr;' ...
                      'catch,pzg_err(''''mouse motion bodepl'''');' ...
                      'end,clear tempfs;'']);' ...
           'end;' ...
           'olbz_tempH=pzg_fndo(2,1,''fig_h'');' ...
           'if~isempty(olbz_tempH),' ...
             'figure(olbz_tempH(1)),' ...
             'set(gcbo,''value'',1),' ...
           'end,' ...
           'olbz_tempH=pzg_fndo(2,2,''fig_h'');' ...
           'if~isempty(olbz_tempH),' ...
             'figure(olbz_tempH(1)),' ...
             'set(gcbo,''value'',1),' ...
           'end,' ...
         'catch,pzg_err(''O.L.Bode checkbox'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'pzg_bkup,' ...
         'clear olbz_tempH;']);       
  hndl.OLbode_checkbox = temp0(2,2);
  
  HelpString = {'CLOSED-LOOP BODE PLOTTING CHECK BOX' ' ' ...
          ' You can check this box simply by clicking on it.' ' ' ...
          ' When this box is checked, the CLOSED-LOOP' ...
          ' Bode magnitude and phase plots will be created,' ...
          ' and will automatically be updated as you change the' ...
          ' pole/zero configuration, or the GAIN, or the delay.' ...
          ' ' ' IN THE RESULTING BODE PLOT, if you position' ...
          ' the cursor near the FREQ RESPONSE LINE, itself,' ...
          ' that frequency will be highlighted in all' ...
          ' the Bode, Nichols and Nyquist plots, and the' ...
          ' frequency will be displayed near the cursor.' ...
          ' ' ...
          ' The ZOOM feature is enabled and linked in all' ...
          ' of the Bode plots, so whenever you zoom in or out' ...
          ' in one of the plots, the frequency ranges in' ...
          ' the other plots are adjusted to be identical.' }';
  plot_exist = [ pzg_fndo( 2,3,'fig_h'); pzg_fndo( 2,4,'fig_h') ];
  temp0(3,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',~isempty(plot_exist), ...
      'String','C.Lbode', ...
      'Units','normalized', ...
      'Position',[0.135 0.005 0.125 0.045], ...
      'BackgroundColor', checkbox_background_color, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'tag','D-T CLbode checkbox', ...
      'TooltipString','unity neg feedback closed-loop Bode plot', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1;' ...
             'bodepl(PZG(2).CLBodeFreqs,' ...
                    'PZG(2).CLBodeMag,PZG(2).CLBodePhs,' ...
                    'PZG(2).CLBodeName,PZG(2).FrqSelNdx,' ...
                    'PZG(2).CLBodeName,' ...
                    '[0.31 0.67 0.29 0.28],' ...
                    '[''try,tempfs=freqserv(gcbf,1);pzg_ptr;' ...
                      'catch,pzg_err(''''mouse motion bodepl'''');' ...
                      'end,clear tempfs;'']);' ...
           'end;' ...
           'clbz_tempH=pzg_fndo(2,3,''fig_h'');' ...
           'if~isempty(clbz_tempH),' ...
             'figure(clbz_tempH(1)),' ...
             'set(gcbo,''value'',1),' ...
           'end,' ...
           'clbz_tempH=pzg_fndo(2,4,''fig_h'');' ...
           'if~isempty(clbz_tempH),' ...
             'figure(clbz_tempH(1)),' ...
             'set(gcbo,''value'',1),' ...
           'end,' ...
         'catch,pzg_err(''C.L.Bode checkbox'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'pzg_bkup,' ...
         'clear clbz_tempH;']);
  hndl.CLbode_checkbox = temp0(3,2);

  HelpString = {' NICHOLS CHARTING CHECK BOX' ' ' ...
          ' You can check this box simply by clicking on it.' ' ' ...
          ' When this box is checked, the D-T Nichols chart' ...
          ' will be created, and will automatically be updated' ...
          ' as you change the pole/zero configuration, or the' ...
          ' GAIN, or the pure delay.' ...
          ' ' ' IN THE RESULTING Nichols chart, if you position' ...
          ' the cursor near the FREQ RESPONSE LINE, itself,' ...
          ' that frequency will be highlighted in all' ...
          ' the Bode and Nyquist plots, and the frequency' ...
          ' will be displayed near the cursor.' ...
          ' ' 'While ordinarily the D-T Nichols chart contains the' ...
          ' mapping of the upper-half of the unit-circle, here there' ...
          ' is a checkbox to also view the data from the rest of the' ...
          ' Nyquist contour, and that can be quite informative.' ...
          ' ' ' Another checkbox enables display of three "equi-margin"' ...
          ' gain-phase margins, at 3dB, 6dB, and 9dB.' ...
          ' ' ' There is also a checkbox to highlight the relationships' ...
          ' between the cursor location in the the Nichols chart and the' ...
          ' closed-loop magnitude and phase plots, as you move the cursor' ...
          ' around in any of those three plots.  This can be a big help' ...
          ' in understanding the "Nichols grid".' ...
          ' '}';  
  plot_exist = pzg_fndo( 2, 6,'fig_h');
  temp0(4,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',~isempty(plot_exist), ...
      'String','Nichols', ...
      'Units','normalized', ...
      'Position',[0.26 0.005 0.125 0.045], ...
      'BackgroundColor', checkbox_background_color, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'tag','D-T Nichols checkbox', ...
      'TooltipString','Nichols chart', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1;' ...
             'ScrSize=get(0,''ScreenSize'');' ...
             'if ScrSize(3)>1024;' ...
               'ScrPos=[10 10 450 320];' ...
             'elseif ScrSize(3)>800;' ...
               'ScrPos=[10 10 360 250];' ...
             'else;' ...
               'ScrPos=[10 10 280 200];' ...
             'end;' ...
             'nicholpl(PZG(2).BodeFreqs,' ...
                      'PZG(2).BodeMag,' ...
                      'PZG(2).BodePhs,' ...
                      'PZG(2).NicholsName,' ...
                      'PZG(2).FrqSelNdx,' ...
                      'PZG(2).NicholsName,' ...
                      'ScrPos,' ...
                      '[''try,tempfs=freqserv(gcbf,1);pzg_ptr;' ...
                        'catch,pzg_err(''''mouse motion nich'''');' ...
                        'end,clear tempfs;''],''z'');' ...
           'end;' ...
           'temp_f=pzg_fndo(2,6,''fig_h'');' ...
           'if~isempty(temp_f)', ...
             'figure(temp_f(1)),' ...
             'set(gcbo,''value'',1);' ...
           'end,' ...
         'catch,pzg_err(''Nichols checkbox'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'pzg_bkup,' ...
         'clear ScrSize ScrPos temp_f']);
  hndl.Nichols_checkbox = temp0(4,2);

  HelpString = {'        NYQUIST PLOT CHECK BOX' ' ' ...
          ' You can check this box simply by clicking on it.' ' ' ...
          ' When this box is checked, the D-T Nyquist chart' ...
          ' will be created, and will automatically be updated' ...
          ' as you change the pole/zero configuration,' ...
          ' or the GAIN, or the pure delay.' ' ' ...
          ' The Nyquist Contour plot is also created at the same' ...
          ' time. This shows the contour points at which the ' ...
          ' transfer function is evaluated to produce the Nyquist plot.' ...
          ' ' ' Where poles or zeros are on the stability boundary (i.e.,' ...
          ' on the unit-circle), the Nyquist contour makes semicircular' ...
          ' detours, with infinitesimal radii, into the right half-plane.' ...
          ' For the poles, these detours, which are necessary to the Nyquist' ...
          ' criterion, are automatically created in the contour plot, with' ...
          ' full mapping capability to the Nyquist plot.  For the zeros,' ...
          ' although the detours are not required, the associated mappings' ...
          ' are illuminating, especially in terms of the phase effects.' ...
          ' ' ' There is a checkbox for nonlinear scaling in the plot,' ...
          ' which is very useful when you need to see the unit circle' ...
          ' in detail at the same time you need to see large magnitudes.' ...
          ' ' ' Another checkbox enables display of three "equi-margin"' ...
          ' gain-phase margins, at 3dB, 6dB, and 9dB.' ...
          ' ' ' In the Nyquist plot, if you position the cursor' ...
          ' near the FREQ RESPONSE LINE, itself, that frequency will be' ...
          ' highlighted in all the frequency-domain plots. The same is' ...
          ' true for the contour plot.' ' '}';
  plot_exist = pzg_fndo( 2, 7,'fig_h');
  temp0(19,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',~isempty(plot_exist), ...
      'String','Nyquist', ...
      'Units','normalized', ...
      'Position',[0.385 0.005 0.12 0.045], ...
      'BackgroundColor', checkbox_background_color, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'Tag','D-T Nyquist Checkbox', ...
      'TooltipString','Nyquist plot', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1;' ...
             'ScrSize=get(0,''ScreenSize'');' ...
             'if ScrSize(3)>1024;' ...
               'ScrPos=[150 20 450 320];' ...
             'elseif ScrSize(3)>800;' ...
               'ScrPos=[100 20 360 250];' ...
             'else;' ...
               'ScrPos=[70 20 280 200];' ...
             'end;' ...
             'nyqistpl(PZG(2).BodeFreqs,' ...
                       'PZG(2).BodeMag, PZG(2).BodePhs,' ...
                       'PZG(2).ZeroLocs, PZG(2).PoleLocs, PZG(2).Gain,' ...
                       'PZG(2).NyquistName, PZG(2).FrqSelNdx,' ...
                       'PZG(2).NyquistName, ScrPos,' ...
                       '[''try,if pzg_disab,return,end,' ...
                         'tempfs=freqserv(gcbf,1);pzg_ptr;' ...
                         'catch,pzg_err(''''mouse motion nyq'''');' ...
                         'end,clear tempfs;''],' ...
                       '''z'', PZG(2).Ts);' ...
             'contourpl(''bring forward'',2);' ...
           'end;' ...
           'temp_f=pzg_fndo(2,7,''fig_h'');' ...
           'if~isempty(temp_f),' ...
             'figure(temp_f(1)),' ...
             'set(gcbo,''value'',1);' ...
           'end,' ...
           'temp_c=pzg_fndo(2,14,''fig_h'');' ...
           'if~isempty(temp_c)', ...
             'figure(temp_c(1)),' ...
             'set(gcbo,''value'',1);' ...
           'end,' ...
         'catch,pzg_err(''Nyquist checkbox'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'pzg_bkup,' ...
         'clear ScrPos ScrSize clear temp_f temp_c;']);
  hndl.Nyquist_checkbox = temp0(19,2);
       
  HelpString = {' OPEN-LOOP TIME RESPONSE CHECK BOX' ' ' ...
          ' You can check this box simply by clicking on it.' ' ' ...
          ' When this box is checked, the D-T open-loop' ...
          ' step response will be created, and will' ...
          ' automatically be updated as you change the' ...
          ' pole/zero configuration, or the GAIN, or the delay.' ' ' ...
          ' In the response plot, there is a pulldown menu to' ...
          ' select IMPULSE, STEP, RAMP, PARABOLA or SINUSOIDAL' ...
          ' input.' ...
          ' ' 'The end-time of the plot can be changed easily,' ...
          ' by entering a different value into "Max Time".' ...
          ' ' ' When you select sinusoidal response, you' ...
          ' can specify the sinusoid frequency (in hertz),' ...
          ' and the resulting STEADY-STATE magnitude and' ...
          ' phase shift are displayed.' ' ' ...
          ' Also, when displaying sinusoidal response, there' ...
          ' is a checkbox to display only that part of the' ...
          ' response around the time the system reaches ' ...
          ' steady-state.' ' ' ...
          ' For step-response: ' ...
          ' You may select one of several PERFORMANCE' ...
          ' MEASURES, as well as the range over which it is' ...
          ' computed.  Step-response performance is automatic' ...
          ' and is always displayed, with step-input selected.'}';
  plot_exist = pzg_fndo( 2,8,'fig_h');
  temp0(5,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',~isempty(plot_exist), ...
      'String','OLresp', ...
      'Units','normalized', ...
      'Position',[0.510 0.005 0.125 0.045], ...
      'BackgroundColor', checkbox_background_color, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'tag','D-T OLresp checkbox', ...
      'TooltipString','open-loop time-response plot', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'if get(gcbo,''value''),' ...
           'tempmbox_h=' ...
              'msgbox({''Creating the open-loop response plot.'';' ...
                       ''' '';''     Please wait ...''},' ...
                      '''Please Wait ...'');' ...
         'else,' ...
           'tempmbox_h=[];' ...
         'end,' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1;' ...
             'ScrSize=get(0,''ScreenSize'');' ...
             'if ScrSize(3)>1024;' ...
               'ScrPos=[495 10 375 320];' ...
             'elseif ScrSize(3)>800;' ...
               'ScrPos=[380 10 300 250];' ...
             'else;' ...
               'ScrPos=[300 10 240 200];' ...
             'end;' ...
             'resppl(PZG(2).N,PZG(2).D,' ...
                    'PZG(2).Gain,PZG(2).OLTimeRespName,' ...
                    'PZG(2).OLTimeRespName,' ...
                    '''z'',PZG(2).Ts,ScrPos);' ...
           'end,' ...
           'temp_f=pzg_fndo(2,8,''fig_h'');' ...
           'if~isempty(temp_f)', ...
             'figure(temp_f(1)),' ...
             'set(gcbo,''value'',1);' ...
           'end,' ...
         'catch,pzg_err(''O.L.Resp checkbox'');end,' ...
         'pzg_onoff(1);' ...
         'if isequal(ishandle(tempmbox_h),1),' ...
           'delete(tempmbox_h),' ...
         'end,' ...
         'pzg_unre;' ...
         'pzg_bkup,' ...
         'clear ScrPos ScrSize temp_f tempmbox_h;']);
  hndl.OLresp_checkbox = temp0(5,2);

  HelpString = {'    CLOSED-LOOP TIME RESPONSE CHECK BOX' ' ' ...
          ' You can check this box simply by clicking on it.' ' ' ...
          ' When this box is checked, the D-T closed-loop' ...
          ' step response will be created, and will' ...
          ' automatically be updated as you change the' ...
          ' pole/zero configuration, or the GAIN, or the delay.' ' ' ...
          ' In the response plot, there is a pulldown menu to' ...
          ' select IMPULSE, STEP, RAMP, PARABOLA or SINUSOIDAL' ...
          ' input.' ...
          ' ' 'The end-time of the plot can be changed easily,' ...
          ' by entering a different value into "Max Time".' ...
          ' ' ' When you select sinusoidal response, you' ...
          ' can select the sinusoid frequency (in hertz),' ...
          ' and the resulting STEADY-STATE magnitude and' ...
          ' phase shift are displayed.' ' ' ...
          ' Also, when displaying sinusoidal response, there' ...
          ' is a checkbox to display only that part of the' ...
          ' response around the time the system reaches ' ...
          ' steady-state.' ' ' ...
          ' For step-response: ' ...
          ' You may select one of several PERFORMANCE' ...
          ' MEASURES, as well as the range over which it is' ...
          ' computed.  Step-response performance is automatic' ...
          ' and is always displayed, with step-input selected.'}';
  plot_exist = pzg_fndo( 2,9,'fig_h');
  temp0(6,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',~isempty(plot_exist), ...
      'String','C.Lresp', ...
      'Units','normalized', ...
      'Position',[0.62 0.005 0.13 0.045], ...
      'BackgroundColor', checkbox_background_color, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'tag','D-T CLresp checkbox', ...
      'TooltipString','unity neg-feedback closed-loop time-response plot', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'if get(gcbo,''value''),' ...
           'tempmbox_h=' ...
              'msgbox({''Creating the closed-loop response plot.'';' ...
                       ''' '';''     Please wait ...''},' ...
                      '''Please Wait ...'');' ...
         'else,' ...
           'tempmbox_h=[];' ...
         'end,' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1;' ...
             'ScrSize=get(0,''ScreenSize'');' ...
             'if ScrSize(3)>1024;' ...
               'ScrPos=[900 10 375 320];' ...
             'elseif ScrSize(3)>800;' ...
               'ScrPos=[700 10 300 250];' ...
             'else;' ...
               'ScrPos=[550 10 240 200];' ... 
             'end;' ...
             'resppl(PZG(2).N,PZG(2).Dc,' ...
                    'PZG(2).CLGain,PZG(2).CLTimeRespName,' ...
                    'PZG(2).CLTimeRespName,' ...
                    '''z'',PZG(2).Ts,ScrPos);' ...
           'end,' ...
           'temp_f=pzg_fndo(2,9,''fig_h'');' ...
           'if~isempty(temp_f)', ...
             'set(temp_f,''visible'',''on'');' ...
             'figure(temp_f(1)),' ...
             'set(gcbo,''value'',1);' ...
           'end,' ...
         'catch,pzg_err(''C.L.Resp checkbox'');' ...
         'end,' ...
         'pzg_onoff(1);' ...
         'if isequal(ishandle(tempmbox_h),1),' ...
           'delete(tempmbox_h),' ...
         'end,' ...
         'pzg_unre;' ...
         'pzg_bkup,' ...
         'clear ScrPos ScrSize temp_f tempmbox_h;']);
  hndl.CLresp_checkbox = temp0(6,2);

  HelpString = {' ROOT LOCUS PLOTTING CHECK BOX' ' ' ...
          ' You can check this box simply by clicking on it.' ' ' ...
          ' When this box is checked, the discrete-time' ...
          ' ROOT LOCUS plot will be created, and will' ...
          ' automatically be updated as you change the' ...
          ' pole/zero configuration, or GAIN, or pure delay.' ' ' ...
          ' The closed loop pole positions that result' ...
          ' from the GAIN you have specified' ...
          ' are indicated by cyan "square" markers.' ' ' ...
          ' By positioning the cursor near A ROOT LOCUS LINE,' ...
          ' you can find out the gain associated' ...
          ' with that particular computation point.  The gain' ...
          ' is displayed at the lower left corner of the' ...
          ' Nichols plot. ' ...
          ' ' ' Each of the root locus computation points' ...
          ' corresponds to a possible closed-loop pole' ...
          ' location.' }';
    
  plot_exist = pzg_fndo( 2,11,'fig_h');
  temp0(10,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',~isempty(plot_exist), ...
      'String','Rt Loc', ...
      'Units','normalized', ...
      'Position',[0.745 0.005 0.105 0.045], ...
      'BackgroundColor', checkbox_background_color, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'tag','D-T RtLoc checkbox', ...
      'TooltipString','root locus plot', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1,' ...
             'ScrSize=get(0,''ScreenSize'');' ...
             'if ScrSize(3)>1024,' ...
               'ScrPos=[485 10 375 320];' ...
             'elseif ScrSize(3)>800,' ...
               'ScrPos=[370 10 300 250];' ...
             'else,' ...
               'ScrPos=[290 10 240 200];' ...
             'end,' ...
             'rlocuspl(1,1,PZG(2).Gain,' ...
               'PZG(2).RootLocusName,[],''z'',' ...
               'PZG(2).RootLocusName,' ...
               'ScrPos,''rlocuspl(PZG(2).Gain);pzg_ptr;'','''');' ...
           'end,' ...
           'temp_f=pzg_fndo(2,11,''fig_h'');' ...
           'if~isempty(temp_f),' ...
             'figure(temp_f(1)),' ...
             'set(gcbo,''value'',1);' ...
           'end,' ...
         'catch,pzg_err(''D-T Rt.Loc. checkbox'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'pzg_bkup,' ...
         'clear ScrPos ScrSize temp_f']);
  hndl.RtLoc_checkbox = temp0(10,2);

  HelpString = {'        SENSITIVITY PLOT CHECK BOX' ' ' ...
          ' You can check this box simply by clicking on it.' ' ' ...
          ' When this box is checked, the D-T sensitivity plot' ...
          ' will be created, and will automatically be updated' ...
          ' as you change the pole/zero configuration,' ...
          ' or the GAIN, or the pure delay.' ' ' ...
          ' In the sensitivity plot, if you position the cursor' ...
          ' near the FREQ RESPONSE LINE, itself,' ...
          ' that frequency will be highlighted in all' ...
          ' the frequency-domain plots, and displayed' ...
          ' near the cursor.' ' '}';
  plot_exist = pzg_fndo( 2,5,'fig_h');
  temp0(20,2) = uicontrol(DT_PZGUI,'Style','checkbox', ...
      'Value',~isempty(plot_exist), ...
      'String','Sensitivity', ...
      'Units','normalized', ...
      'Position',[0.855 0.005 0.142 0.045], ...
      'BackgroundColor', checkbox_background_color, ...
      'ForegroundColor', checkbox_foreground_color, ...
      'UserData',HelpString, ...
      'Tag','D-T Sensitivity Checkbox', ...
      'TooltipString','unity neg-feedback output-sensitivity magnitude plot', ...
      'Callback', ...
        ['global PZG;' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
           'if get(gcbo,''Value'')==1;' ...
             'ScrSize=get(0,''ScreenSize'');' ...
             'if ScrSize(3)>1024;' ...
               'ScrPos=[300 20 450 320];' ...
             'elseif ScrSize(3)>800;' ...
               'ScrPos=[250 20 360 250];' ...
             'else;' ...
               'ScrPos=[200 20 280 200];' ...
             'end;' ...
             'sensplot(PZG(2).CLBodeFreqs,' ...
                'PZG(2).CLBodeMag,' ...
                'PZG(2).CLBodePhs,' ...
                'PZG(2).SensPlotName,' ...
                'PZG(2).FrqSelNdx,' ...
                'PZG(2).SensPlotName,' ...
                'ScrPos,' ...
                '[''if pzg_disab,return,end,' ...
                  'try,tempfs=freqserv(gcbf,1);pzg_ptr;' ...
                  'catch,pzg_err(''''mouse motion sens'''');' ...
                  'end,clear tempfs''],' ...
                '''z'');' ...
           'end,' ...
           'temp_f=pzg_fndo(2,5,''fig_h'');' ...
           'if~isempty(temp_f)', ...
             'figure(temp_f(1)),' ...
             'set(gcbo,''value'',1);' ...
           'end,' ...
         'catch,pzg_err(''Sensitivity checkbox'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'pzg_bkup,' ...
         'clear ScrPos ScrSize temp_f;']);
  hndl.Sensitivity_checkbox = temp0(20,2);


  uicontrol(DT_PZGUI,'Style','frame', ...
            'units','normalized', ...
            'position',[0.800 0.488 0.20 0.298], ...
            'backgroundcolor',[0.7 0.7 0.7])
  HelpString = {'  PULL-DOWN SELECTION MENU FOR POLE SELECTION' ...
          ' ' ' Click the arrow at the right end of it' ...
          ' to select a pole to be moved or deleted.' ...
          ' ' 'The pole will not be deleted or moved' ...
          ' until you actually click the "Delete" or "Move"' ...
          ' pushbutton below.' ...
          ' ' ' If moving, the pole will be moved to the' ...
          ' location specified in the data entry window, below.' ...
          ' ' ' The pull-down menu will list every pole' ...
          ' in the pole/zero map at the left.' ...
          ' ' ' If a complex pole is selected, in fact' ...
          ' BOTH it and its conjugate are selected.'}';
  nr_poles = numel(PZG(2).PoleLocs);
  nr_poles_str = [ num2str(nr_poles) ' POLES'];
  if nr_poles == 0
    nr_poles_str = 'NO POLES';
  elseif nr_poles == 1
    nr_poles_str = '1 POLE';
  end
  hndl.number_of_poles = ...
    uicontrol(DT_PZGUI,'Style','text', ...
      'String', nr_poles_str, ...
      'fontsize', 10, ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.802 0.738 0.196 0.045], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[0.7 0.7 0.7], ...
      'ForegroundColor',[0 0 0.9], ...
      'tag','D-T number of poles', ...
      'UserData',HelpString );
  
  SelectStr = cell(numel(PZG(2).PoleLocs)+1,1);
  for Ck = 1:numel(PZG(2).PoleLocs)
    this_pole = PZG(2).PoleLocs(Ck);
    if ( abs( 1 - this_pole ) < 1e-4 ) ...
      ||( abs( -1 - this_pole ) < 1e-4 )
      if isreal(this_pole)
        SelectStr{Ck} = num2str(this_pole,10);
      else
        SelectStr{Ck} = num2str(this_pole,9);
      end
    else
      SelectStr{Ck} = num2str(this_pole,7);
    end
  end
  SelectStr{end} = 'ALL POLES';
  uicontrol(DT_PZGUI,'Style','text', ...
      'String',{'selected';'pole'}, ...
      'fontsize', 7, ...
      'Units','normalized', ...
      'Position',[0.805 0.610 0.085 0.085], ...
      'HorizontalAlignment','center', ...
      'BackgroundColor',[0.7 0.7 0.7], ...
      'ForegroundColor',[0 0 0], ...
      'UserData',HelpString );
  temp0(7,2) = uicontrol(DT_PZGUI,'Style','popupmenu', ...
      'String',SelectStr, ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.804 0.704 0.195 0.045], ...
      'BackgroundColor',[0.7 0.8 0.9], ...
      'ForegroundColor',[0 0 0], ...
      'TooltipString','menu to select one of the model poles', ...
      'Tag','dpzgui pole-list dropdown menu', ...
      'UserData',HelpString );
  hndl.pole_list_dropdown_menu = temp0(7,2);

  HelpString = {' MOVE A POLE PUSHBUTTON.' '  ' ...
          ' Click this button when you want to move' ...
          ' the pole (or zeros) selected above' ...
              ' to the location indicated in the data' ...
          ' entry box (just below). ' ' ' ...
          ' If a complex pole is selected,' ...
          ' its complex conjugate will be moved, too.'}';
  uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Move', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.81 0.590 0.085 0.045], ...
      'BackgroundColor',[.8 .85 .95], ...
      'ForegroundColor',[0 0 0], ...
      'tooltipstring','move selected pole to indicated location', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempz6=get(gcbf,''UserData'');' ...
         'tempz6=get(tempz6(11,2),''String'');' ...
         'if exist(tempz6);' ...
           'eval([''tempz6='' tempz6 '';'']);' ...
           'tempCz6=pzmvserv(''z'',tempz6);' ...
         'else;' ...
           'if~isempty(str2num(tempz6)),' ...
             'tempz6=str2num(tempz6);' ...
             'tempCz6=pzmvserv(''z'',tempz6);' ...
           'else,' ...
             'tempCz6=pzmvserv(''z'');' ...
           'end,' ...
         'end;' ...
         'if tempCz6;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''Move pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempz6 tempCz6;% MovePole'], ...
      'Interruptible','On', ...
      'UserData',HelpString );
  HelpString = {' DELETE A POLE PUSHBUTTON.' ' ' ...
          ' Click this button when you want to delete' ...
          ' the real pole or complex pole pair ' ...
          ' selected above, from the pole/zero' ...
          ' map at the left.' ' ' ...
          ' If a complex pole is selected above,' ...
          ' BOTH it and its conjugate will be deleted.'}';
  uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Delete', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.900 0.644 0.085 0.045], ...
      'BackgroundColor',[.8 .85 .95], ...
      'ForegroundColor',[0 0 0], ...
      'tooltipstring','delete selected pole', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempCz7=pzmvserv(''z'');' ...
         'if tempCz7;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''Delete pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz7;% DeletePole'], ...
      'UserData',HelpString );
  HelpString = {'      ADD A POLE PUSHBUTTON.' '  ' ...
          ' Click this button when you want to add' ...
          ' the pole (or poles) indicated in the data' ...
          ' entry box (just below) to the pole/zero ' ...
          ' map (at left). ' ' ' ...
          ' If a complex number is entered above,' ...
          ' it will be used to add a complex PAIR.' ...
          ' ' ' CAUTION:' ...
          ' If you click this button multiple times,' ...
          ' the specified pole or poles will be added' ...
          ' multiple times.'}';
  uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Add', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.905 0.584 0.085 0.045], ...
      'BackgroundColor',[.8 .85 .95], ...
      'ForegroundColor',[0 0 0], ...
      'tooltipstring','add poles at indicated locations', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempz8=get(gcbf,''UserData'');' ...
         'tempz8=get(tempz8(11,2),''String'');' ...
         'if exist(tempz8,''var'');' ...
           'eval([''tempz8='' tempz8 '';'']);' ...
           'tempCz8=pzmvserv(''z'',tempz8);' ...
         'else;' ...
           'if~isempty(str2num(tempz8)),' ...
             'tempz8=str2num(tempz8);' ...
             'tempCz8=pzmvserv(''z'',tempz8);' ...
           'else,' ...
             'tempCz8=pzmvserv(''z'');' ...
           'end,' ...
         'end;' ...
         'if tempCz8;' ...
           'PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''Add pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempz8 tempCz8;% AddPole'], ...
      'Interruptible','On', ...
      'UserData',HelpString );

  HelpString = {' POLE-LOCATION DATA ENTRY BOX.' ' ' ...
          ' Enter either the NUMERICAL VALUE of the' ...
          ' location where you want to place a new pole' ...
          '(or to move the currently-selected pole),' ...
          ' OR ENTER THE NAME OF A VECTOR of poles defined in' ...
          ' the main MATLAB workspace. ' ' '...
          ' If you are entering a complex number, it' ...
          ' should END with i or j; for example, -0.5+0.3i.' ...
          ' ' ' The pole or poles specified here will not' ...
          ' actually be added until you click the "Add Pole" ' ...
          ' pushbutton below.  EACH TIME you click the' ...
          ' "Add Pole" pushbutton, the specified pole or' ...
          ' poles WILL BE added, so be careful: ' ...
          ' you could accidentally get multiple poles.' }';
    uicontrol(DT_PZGUI,'Style','text', ...
      'String',{'Z-plane locations';'( or varname )'}, ...
      'fontsize', 7, ...
      'Units','normalized', ...
      'Position',[0.802 0.491 0.196 0.050], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[0.7 0.7 0.7], ...
      'ForegroundColor',[0 0 0], ...
      'UserData',HelpString );
  temp0(11,2) = uicontrol(DT_PZGUI,'Style','edit', ...
      'String','', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.81 0.541 0.18 0.045], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[.9 .9 1], ...
      'ForegroundColor',[0 0 0], ...
      'Interruptible','On', ...
      'TooltipString','enter list (or variable name) of Z-plane locations', ...
      'UserData',HelpString );
  hndl.pole_entry_edit = temp0(11,2);


  uicontrol(DT_PZGUI,'Style','frame', ...
            'units','normalized', ...
            'position',[0.800 0.171 0.20 0.307], ...
            'backgroundcolor',[0.7 0.7 0.7])
  HelpString = {'   PULL-DOWN MENU FOR ZERO SELECTION' ...
          ' ' ' Click the arrow at the right end of it' ...
          ' to select a zero to be moved or deleted. ' ' ' ...
          ' The selected zero will not be deleted or moved' ...
          ' until you click the "Delete" or "Move" pushbutton.' ...
          ' ' ' If moving, the zero will be moved to the' ...
          ' location specified in the data entry window, below.' ...
          ' ' ' The pull-down menu will list every zero' ...
          ' in the pole/zero map at the left.' ...
          ' ' ' If a complex zero is selected, in fact' ...
          ' BOTH it and its conjugate are selected.'}';
  nr_zeros = numel(PZG(2).ZeroLocs);
  nr_zeros_str = [ num2str(nr_zeros) ' ZEROS'];
  if nr_zeros == 0
    nr_zeros_str = 'NO ZEROS';
  elseif nr_zeros == 1
    nr_zeros_str = '1 ZERO';
  end
  hndl.number_of_zeros = ...
    uicontrol(DT_PZGUI,'Style','text', ...
      'String', nr_zeros_str, ...
      'fontsize', 10, ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.802 0.433 0.196 0.045], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[0.7 0.7 0.7], ...
      'ForegroundColor',[0 0 0.9], ...
      'tag','D-T number of zeros', ...
      'UserData',HelpString );

  SelectStr = cell(numel(PZG(2).ZeroLocs)+1,1);
  for Ck = 1:numel(PZG(2).ZeroLocs)
    SelectStr{Ck} = num2str(PZG(2).ZeroLocs(Ck));
  end
  SelectStr{end} = 'ALL ZEROS';
  uicontrol(DT_PZGUI,'Style','text', ...
      'String',{'selected';'zero'}, ...
      'fontsize', 7, ...
      'Units','normalized', ...
      'Position',[0.805 0.303 0.085 0.085], ...
      'HorizontalAlignment','center', ...
      'BackgroundColor',[0.7 0.7 0.7], ...
      'ForegroundColor',[0 0 0], ...
      'UserData',HelpString );
  temp0(8,2) = uicontrol(DT_PZGUI,'Style','popupmenu', ...
      'String',SelectStr, ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.804 0.400 0.195 0.045], ...
      'BackgroundColor',[0.7 0.8 0.9], ...
      'ForegroundColor',[0 0 0], ...
      'TooltipString','menu to select one of the model zeros', ...
      'Tag','dpzgui zero-list dropdown menu', ...
      'UserData',HelpString );
  hndl.zero_list_dropdown_menu = temp0(8,2);

  HelpString = {' MOVE A ZERO PUSHBUTTON.' '  ' ...
          ' Click this button when you want to move' ...
          ' the zero (or zeros) selected above' ...
              ' to the location indicated in the data' ...
          ' entry box (below). ' ' ' ...
          ' If a complex zero is selected,' ...
          ' its complex conjugate will be moved, too.'}';
  uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Move', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.81 0.280 0.085 0.045], ...
      'BackgroundColor',[.8 .85 .95], ...
      'ForegroundColor',[0 0 0], ...
      'tooltipstring','move selected zero to indicated location', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempz9=get(gcbf,''UserData'');' ...
         'tempz9=get(tempz9(12,2),''String'');' ...
         'if exist(tempz9);' ...
           'eval([''tempz9='' tempz9 '';'']);' ...
           'tempCz9=pzmvserv(''z'',tempz9);' ...
         'else;' ...
           'if~isempty(str2num(tempz9)),' ...
             'tempz9=str2num(tempz9);' ...
             'tempCz9=pzmvserv(''z'',tempz9);' ...
           'else,' ...
             'tempCz9=pzmvserv(''z'');' ...
           'end,' ...
         'end;' ...
         'if tempCz9;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''Move pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz9 tempz9;% MoveZero'], ...
      'Interruptible','On', ...
      'UserData',HelpString );
  HelpString = {' DELETE A ZERO PUSHBUTTON.' ' ' ...
          ' Click this button when you want to delete' ...
          ' the real zero or complex zero pair ' ...
          ' selected directly above, from the pole/zero' ...
          ' map at the left.' ' ' ...
          ' If a complex zero is selected above,' ...
          ' BOTH it and its conjugate will be deleted.'}';
  uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Delete', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.900 0.338 0.085 0.045], ...
      'BackgroundColor',[.8 .85 .95], ...
      'ForegroundColor',[0 0 0], ...
      'tooltipstring','delete selected zero', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempCz10=pzmvserv(''z'');' ...
         'if tempCz10;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''Delete pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz10;% DeleteZero'], ...
      'UserData',HelpString );
  HelpString = {'    ADD A ZERO PUSHBUTTON' ' ' ...
          ' Click this button when you want to add' ...
          ' the zero (or zeros) indicated in the data' ...
          ' entry box (just below) to the pole/zero ' ...
          ' map (at left).' ' ' ...
          ' If a complex number is entered above,' ...
          ' it will be used to add a complex PAIR.' ...
          ' ' ' CAUTION:' ...
          ' If you click this button multiple times,' ...
          ' the specified zero or zeros will be added' ...
          ' multiple times.'}';
  uicontrol(DT_PZGUI,'Style','pushbutton', ...
      'String','Add', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.905 0.273 0.085 0.045], ...
      'BackgroundColor',[.8 .85 .95], ...
      'ForegroundColor',[0 0 0], ...
      'tooltipstring','add zeros at indicated locations', ...
      'Callback', ...
        ['global PZG,' ...
         'pzg_onoff(0);' ...
         'drawnow,' ...
         'try,' ...
         'tempz11=get(gcbf,''UserData'');' ...
         'tempz11=get(tempz11(12,2),''String'');' ...
         'if exist(tempz11,''var'');' ...
           'eval([''tempz11='' tempz11 '';'']);' ...
           'tempCz11=pzmvserv(''z'',tempz11);' ...
         'else;' ...
           'if~isempty(str2num(tempz11)),' ...
             'tempz11=str2num(tempz11);' ...
             'tempCz11=pzmvserv(''z'',tempz11);' ...
           'else,' ...
             'tempCz11=pzmvserv(''z'');' ...
           'end,' ...
         'end;' ...
         'if tempCz11;PZG(2).recompute_frf=0;pzg_cntr(2);pzg_bodex(2);' ...
           'dpzgui;dupdatep;' ...
         'end;' ...
         'catch,pzg_err(''Add pushbutton'');end,' ...
         'pzg_onoff(1);' ...
         'pzg_unre;' ...
         'clear tempCz11 tempz11;% AddZero'], ...
      'Interruptible','On', ...
      'UserData',HelpString );

  HelpString = {' ZERO-LOCATION DATA ENTRY BOX.' ' ' ...
          ' Enter either the NUMERICAL VALUE of the' ...
          ' location where you want to place a new zero ' ...
          ' (or move the currently-selected zero), ' ...
          ' or the NAME OF A VECTOR of zeros defined in' ...
          ' the main MATLAB workspace.' ' ' ...
          ' If you are entering a complex number, it' ...
          ' should END with i or j; for example, -0.5+0.2i.' ...
          ' ' ' The zero or zeros specified here will not' ...
          ' actually be added until you click the "Add Zero"' ...
          ' pushbutton below.  Each time you click the' ...
          ' "Add Zero" pushbutton, the specified zero or' ...
          ' zeros WILL BE added, so be careful: ' ...
          ' you could accidentally get multiple zeros.'}';
  uicontrol(DT_PZGUI,'Style','text', ...
      'String',{'Z-plane locations';'( or varname )'}, ...
      'fontsize', 7, ...
      'Units','normalized', ...
      'Position',[0.802 0.178 0.196 0.052], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[0.7 0.7 0.7], ...
      'ForegroundColor',[0 0 0], ...
      'UserData',HelpString );
  temp0(12,2) = uicontrol(DT_PZGUI,'Style','edit', ...
      'String','', ...
      'Fontweight','bold', ...
      'Units','normalized', ...
      'Position',[0.81 0.231 0.18 0.045], ...
      'HorizontalAlignment','Center', ...
      'BackgroundColor',[.9 .9 1], ...
      'ForegroundColor',[0 0 0], ...
      'Interruptible','On', ...
      'TooltipString','enter list (or variable name) of Z-plane locations', ...
      'UserData',HelpString );
  hndl.zero_entry_edit = temp0(12,2);

  ImAxis = get(DTgca,'YLim');
  temp = [0 0];
  temp0(4,1) = plot(temp, ImAxis,'-','color', this_cyan,'parent', DTgca );
  hndl.PZmap_yaxis_highlight = temp0(4,1);

  ReAxis = get(DTgca,'XLim');
  temp = [0 0];
  temp0(5,1) = plot(ReAxis,temp,'-','color', this_cyan,'parent', DTgca );
  hndl.PZmap_xaxis_highlight = temp0(5,1);

  set(DT_PZGUI,'UserData', temp0 );
  set(DT_PZGUI,'WindowButtonDownFcn', ...
    ['global PZG,' ...
     'if pzg_disab,return,end,' ...
     'try,' ...
       'if strcmpi(get(gcbf,''pointer''),''arrow'')' ...
         '||strcmpi(get(gcbf,''pointer''),''hand''),' ...
         'temp_helph=findobj(allchild(0),''string'',''Help'',' ...
            '''tag'',''pzg help checkbox'');' ...
         'for temp_kh=1:numel(temp_helph),' ...
           'if isequal(1,ishandle(temp_helph(temp_kh))),' ...
             'set(temp_helph(temp_kh),''Value'',0,' ...
                '''foregroundcolor'',1-get(gcbf,''color''),' ...
                '''fontweight'',''normal'');' ...
           'end,' ...
         'end,' ...
         'temp_helpwndw=' ...
           'findobj(allchild(0),''name'',''PZGui Help Window'');' ...
         'delete(temp_helpwndw);' ...
       'end,' ...
       'zmintcpt;' ...
       'pzg_ptr;' ...
     'catch,pzg_err(''DT PZGUI button down'');end,' ...
     'clear temp_helph temp_helpwndw;']);
  set(DT_PZGUI,'WindowButtonMotionFcn', ...
    ['global PZG,' ...
     'if pzg_disab,return,end,' ...
     'try,' ...
       'pzgcalbk(gcbf,''mouse motion'');' ...
       'pzg_ptr;' ...
     'catch,pzg_err(''DT PZGUI mouse motion'');end,' ...
     'clear temp_mousemotionz_ui,']);
  
  if ~isempty(CT_PZGUI) ...
    && ~isempty(gcbo) && isequal( get(gcbo,'parent'), CT_PZGUI ) ...
    && isequal( get(gcbo,'type'),'uicontrol') ...
    && isequal( get(gcbo,'string'),'Draw Box')
    % If figure is created from turning on "Draw Box" in D-T PZGUI,
    % create a message box explaining the "draw box" function.
    msgbox_h = ...
      msgbox({'Using the mouse as if you were "zooming-in" on the S-plane,'; ...
              '(i.e., holding down the left-button of the mouse)'; ...
              'causes a "box" to be drawn, instead of zooming.'; ...
              ' '; ...
              'The "box" you draw is immediately mapped into the Z-plane'; ...
              'by whatever method you select in the "D-T Link" menu.'; ...
              ' '; ...
              'Comparing the two boxes helps to understand distortions'; ...
              'under the different S-to-Z plane conversion methods.'; ...
              ' ';'     Click "OK" to continue'}, ...
              'C-T to D-T "Draw Box" is Enabled','modal');
    set( findobj(msgbox_h,'type','text'),'fontsize', 10 )
    msg_pos = get( msgbox_h,'position');
    msg_pos(3:4) = [ 1.2*msg_pos(3), 1.1*msg_pos(4) ];
    set( msgbox_h,'position', msg_pos );
    uiwait(msgbox_h)
  end
  
  bodesel_h = findobj( DTgca,'tag','Bode selection marker');
  if ~isequal( 1, numel(bodesel_h) )
    delete(bodesel_h)
    bodesel_h = ...
      plot( 0, 0, ...
           'linestyle','none', ...
           'linewidth', 3, ...
           'marker','o', ...
           'markersize', 4, ...
           'color',[0 0.8 0.8], ...
           'parent', DTgca, ...
           'visible','off', ...
           'tag','Bode selection marker');
    set( bodesel_h,'xdata', [],'ydata', [] )
  end
  hndl.Bode_selection_marker = bodesel_h;
  if PZG(2).pzg_show_frf_computation
    selVis = 'on';
  else
    selVis = 'off';
  end
  PZG(2).FrqSelNdx = abs(round(PZG(2).FrqSelNdx));
  if isempty(PZG(2).FrqSelNdx) ...
    || ( PZG(2).FrqSelNdx < 1 ) ...
    || ( PZG(2).FrqSelNdx > numel(PZG(2).BodeFreqs) )
    set( bodesel_h,'visible','off');
  else
    sel_point = PZG(2).BodeFreqs( PZG(2).FrqSelNdx );
    neg_freq_sel = 0;
    sel_point = mod( sel_point, 2*pi/PZG(2).Ts );
    if sel_point > pi/PZG(2).Ts
      neg_freq_sel = 1;
      sel_point = 2*pi/PZG(2).Ts - sel_point;
    end
    if PZG(2).NegSelect || neg_freq_sel
      sel_point = -abs(sel_point);
    end
    sel_point = exp( 1i*sel_point * PZG(2).Ts );
    set( bodesel_h, ...
        'xdata', real(sel_point), ...
        'ydata', imag(sel_point), ...
        'visible', selVis );
  end
  
  hndl.ax_xlim = get( hndl.ax,'xlim');
  hndl.ax_ylim = get( hndl.ax,'ylim');
  setappdata( DT_PZGUI,'hndl', hndl );
  pzg_cphndl( DT_PZGUI, 2, 13 )
  
  CT_PZGUI = pzg_fndo( 1, 12,'fig_h');
  if ~isempty(CT_PZGUI)
    pzgui;
    pzg_grid( get(CT_PZGUI,'userdata'), CT_PZGUI, ...
             PZG(1).plot_h{12}.ax_h, 12, ...
             PZG(1).plot_h{12}.hndl );
  end
  ct_rloc_h = pzg_fndo( 1, 10,'fig_h');
  if ~isempty(ct_rloc_h)
    pzgui;
    pzg_grid( get(ct_rloc_h,'userdata'), ct_rloc_h, ...
             PZG(1).plot_h{10}.ax_h, 10, ...
             PZG(1).plot_h{10}.hndl );
  end
  
else
  % DPZGUI figure already exists
  set([hndl.PZmap_xaxis_highlight;hndl.PZmap_yaxis_highlight],'visible','off');
  set( hndl.pzgui_Set_TS,'String',pzg_efmt(PZG(2).Ts) );
  set( hndl.zpk_gain_entry_window, ...
      'String', pzg_efmt(PZG(2).Gain), ...
      'tooltipstring', num2str(PZG(2).Gain,16) );
  set( hndl.PZG_Poles_line, ...
      'Xdata',real(PZG(2).PoleLocs), ...
      'Ydata',imag(PZG(2).PoleLocs), ...
      'MarkerSize', pz_markersize, ...
      'LineWidth', pz_linewidth, ...
      'Visible','On');
  [ hndl, mod_hndl ] = pzg_maprep( PZG(2).PoleLocs,'pole', hndl );
  if mod_hndl
    PZG(2).plot_h{13}.hndl.pole_repstr_h = hndl.pole_repstr_h;
    setappdata( DT_PZGUI,'hndl', hndl );
  end
  set( hndl.PZG_Zeros_line, ...
      'Xdata',real(PZG(2).ZeroLocs), ...
      'Ydata',imag(PZG(2).ZeroLocs), ...
      'MarkerSize', pz_markersize-2, ...
      'LineWidth', pz_linewidth, ...
      'Visible','On');
  [ hndl, mod_hndl ] = pzg_maprep( PZG(2).ZeroLocs,'zero', hndl );
  if mod_hndl
    PZG(2).plot_h{13}.hndl.zero_repstr_h = hndl.zero_repstr_h;
    setappdata( DT_PZGUI,'hndl', hndl );
  end
  set( hndl.PZmap_yaxis_highlight, ...
      'xdata',[0 0], ...
      'Ydata', get(hndl.ax,'YLim'), ...
      'visible','on');
  set( hndl.PZmap_xaxis_highlight, ...
      'Xdata', get(hndl.ax,'XLim'), ...
      'ydata', [0 0], ...
      'visible','on');
  
  SelectStr = cell(numel(PZG(2).PoleLocs)+1,1);
  for Ck = 1:numel(PZG(2).PoleLocs)
    this_pole = PZG(2).PoleLocs(Ck);
    if ( abs( 1 - this_pole ) < 1e-4 ) ...
      ||( abs( -1 - this_pole ) < 1e-4 )
      if isreal(this_pole)
        SelectStr{Ck} = num2str(this_pole,10);
      else
        SelectStr{Ck} = num2str(this_pole,9);
      end
    else
      SelectStr{Ck} = num2str(this_pole,7);
    end
  end
  SelectStr{end} = 'ALL POLES';
  temp1 = get( hndl.pole_list_dropdown_menu,'Value');
  temp1 = max( 1, min( temp1, numel(PZG(2).PoleLocs) ) );
  set( hndl.pole_list_dropdown_menu,'String', SelectStr,'Value', temp1 );

  SelectStr = cell(numel(PZG(2).ZeroLocs)+1,1);
  for Ck = 1:numel(PZG(2).ZeroLocs)
    this_zero = PZG(2).ZeroLocs(Ck);
    if ( abs( 1 - this_zero ) < 1e-4 ) ...
      ||( abs( -1 - this_zero ) < 1e-4 )
      if isreal(this_pole)
        SelectStr{Ck} = num2str(this_zero,10);
      else
        SelectStr{Ck} = num2str(this_zero,9);
      end
    else
      SelectStr{Ck} = num2str(this_zero,7);
    end
  end
  SelectStr{end} = 'ALL ZEROS';
  temp1 = get( hndl.zero_list_dropdown_menu,'Value');
  temp1 = max( 1, min( temp1, numel(PZG(2).ZeroLocs) ) );
  set( hndl.zero_list_dropdown_menu,'String', SelectStr,'Value', temp1 );
end

if isempty(gcbf) ...
  ||( ~isempty(gcbo) && isequal( get(gcbo,'tag'),'open D-T pzgui') )
  figure(DT_PZGUI);
end

set( DT_PZGUI,'UserData', temp0 );

if get( hndl.LinkCheckbox,'value')
  set( [ hndl.LinkCheckbox; hndl.LinkMethod ], ...
      'foregroundcolor',1-get(DT_PZGUI,'color'), ...
      'backgroundcolor',[0 0.7 0]);
else
  set( [ hndl.LinkCheckbox; hndl.LinkMethod ], ...
      'foregroundcolor',1-get(DT_PZGUI,'color'), ...
      'backgroundcolor', get(DT_PZGUI,'color') );
end

freqserv('refresh_plot_h', DT_PZGUI );
pzg_seltxt(2)
  
if isempty(gcbf)
  figure(DT_PZGUI)
end

if new_dt_figure
  zmintcpt('open zoom', DT_PZGUI )
  freqserv('refresh_plot_h', DT_PZGUI );
  local_update_pid_ldlg(2)
  if PZG(2).pzg_show_frf_computation && ~isempty(PZG(2).FrqSelNdx)
    updtpzln('z')
    pzg_seltxt( 2, PZG(2).BodeFreqs(PZG(2).FrqSelNdx), 13, PZG(2).NegSelect )
  end
end

if ishandle(pwmsgbox_h)
  delete(pwmsgbox_h)
end

%drawnow
hndl.ax_xlim = get( hndl.ax,'xlim');
hndl.ax_ylim = get( hndl.ax,'ylim');
setappdata( DT_PZGUI,'hndl', hndl );
pzg_cphndl( DT_PZGUI, 2, 13 )

if ~isempty(PZG)
  pzg_bkup
end

return

function local_update_pid_ldlg(dom_ndx)
  curr_tools = pzg_tools(dom_ndx);
  if curr_tools(1)
    if dom_ndx == 1
      gainfilt('s-Domain Pure Gain Design GUI');
    else
      gainfilt('z-Domain Pure Gain Design GUI');
    end
  elseif curr_tools(2)
    if dom_ndx == 1
      gainfilt('s-Domain Lead Lag Design GUI');
    else
      gainfilt('z-Domain Lead Lag Design GUI');
    end
  elseif curr_tools(3)
    if dom_ndx == 1
      gainfilt('s-Domain PID Design GUI');
    else
      gainfilt('z-Domain PID Design GUI');
    end
  end
return

